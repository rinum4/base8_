
// Соответствует операции GetTestManagmentList
// Возвращает полное содержимое справочника ТЦуправлениеТестированием
//
Функция GetTestManagmentList() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЦУправлениеТестом.Ссылка КАК Ссылка,
	|	ТЦУправлениеТестом.Наименование КАК Наименование,
	|	ТЦУправлениеТестом.Хост КАК Хост,
	|	ТЦУправлениеТестом.ТипКлиента КАК ТипКлиента,
	|	ПРЕДСТАВЛЕНИЕ(ТЦУправлениеТестом.ТипКлиента) КАК ТипКлиентаПредставление,
	|	ТЦУправлениеТестом.ТипПриложения КАК ТипПриложения,
	|	ПРЕДСТАВЛЕНИЕ(ТЦУправлениеТестом.ТипПриложения) КАК ТипПриложенияПредставление,
	|	ТЦУправлениеТестом.ДатаНачала КАК ДатаНачала,
	|	ТЦУправлениеТестом.ДатаОкончания КАК ДатаОкончания,
	|	ТЦУправлениеТестом.Сценарий КАК Сценарий,
	|	ТЦУправлениеТестом.Сценарий.Наименование КАК СценарийНаименование,
	|	ТЦУправлениеТестом.Выполнение КАК Выполнение,
	|	ПРЕДСТАВЛЕНИЕ(ТЦУправлениеТестом.Результат) КАК РезультатПредставление,
	|	ТЦУправлениеТестом.Результат КАК Результат
	|ИЗ
	|	Справочник.ТЦУправлениеТестом КАК ТЦУправлениеТестом";
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокКлиентовТип = ФабрикаXDTO.Тип(
		"http://v8.1c.ru/testcenter/RemoteManagement/1.0.0.2","ClientsList");
	КлиентТип = ФабрикаXDTO.Тип(
		"http://v8.1c.ru/testcenter/RemoteManagement/1.0.0.2","Client");
	ТипКлиентскогоПриложенияТип = ФабрикаXDTO.Тип(
		"http://v8.1c.ru/testcenter/RemoteManagement/1.0.0.2","ClientAppType");
	СценарийТип = ФабрикаXDTO.Тип(
		"http://v8.1c.ru/testcenter/RemoteManagement/1.0.0.2","Scenario");
		
	СписокКлиентов = ФабрикаXDTO.Создать(СписокКлиентовТип);
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ТипПриложения) Тогда
			ТипКлиентскогоПриложения = ФабрикаXDTO.Создать(ТипКлиентскогоПриложенияТип);
			Индекс = Перечисления.ТЦТипКлиентскогоПриложения.Индекс(Выборка.ТипПриложения);
			ТипКлиентскогоПриложения.ID = Метаданные.Перечисления.ТЦТипКлиентскогоПриложения.ЗначенияПеречисления[Индекс].Имя;
			ТипКлиентскогоПриложения.Name = Выборка.ТипПриложенияПредставление;
		Иначе
			ТипКлиентскогоПриложения = Неопределено;
		КонецЕсли;
		
		ДатаОкончания = Выборка.ДатаОкончания;
		Выполнение	 = Выборка.Выполнение;
		РезультатПредставление = Выборка.РезультатПредставление;
		
		Если ЗначениеЗаполнено(Выборка.Сценарий) Тогда
			
			Сценарий = ФабрикаXDTO.Создать(СценарийТип);
			Сценарий.UUID = Строка(Выборка.Сценарий.УникальныйИдентификатор());
			Сценарий.Name = Выборка.СценарийНаименование;
			
			Если Выборка.Результат = Перечисления.ТЦРезультатВыполнения.Неопределено
				ИЛИ  Выборка.Результат = Перечисления.ТЦРезультатВыполнения.ПустаяСсылка() Тогда
				
				// Проверим, активно ли фоновое задание теста.
				ЗапросПоТесту = Новый Запрос;
				ЗапросПоТесту.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				               |	ТЦТест.Ссылка КАК Тест,
				               |	ТЦТест.Результат КАК Результат,
				               |	ТЦТест.Менеджер КАК Менеджер
				               |ИЗ
				               |	Документ.ТЦТест КАК ТЦТест
				               |ГДЕ
				               |	ТЦТест.Дата >= &ДатаНачала
				               |
				               |УПОРЯДОЧИТЬ ПО
				               |	ТЦТест.Дата УБЫВ";
				
				ЗапросПоТесту.УстановитьПараметр("ДатаНачала", Выборка.ДатаНачала);
				
				РезультатЗапросаПоТесту = ЗапросПоТесту.Выполнить();
				Если Не РезультатЗапросаПоТесту.Пустой() Тогда
					
					ВыборкаТеста = РезультатЗапросаПоТесту.Выбрать();
					ВыборкаТеста.Следующий();
					
					Диагностика = ТЦСервер.ДиагностироватьИЗавершитьТестСОшибкойФЗ(ВыборкаТеста.Тест, ВыборкаТеста.Менеджер);
					Если Диагностика <> Неопределено Тогда
						
						Попытка
							ОбъектУправленияТестом = Выборка.Ссылка.ПолучитьОбъект();
							ОбъектУправленияТестом.Результат = Диагностика.Результат;
							ОбъектУправленияТестом.ДатаОкончания = Диагностика.ДатаОкончания;
							ОбъектУправленияТестом.Выполнение = Ложь;
							ОбъектУправленияТестом.Записать();
						Исключение
							ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "Тест-центр");
						КонецПопытки;
						
						ДатаОкончания = Диагностика.ДатаОкончания;
						Выполнение	 = Ложь;
						РезультатПредставление = СокрЛП(Диагностика.Результат);

					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;

		Иначе
			Сценарий = Неопределено;
		КонецЕсли;
		
		Клиент = ФабрикаXDTO.Создать(КлиентТип);
		Клиент.Name = Выборка.Наименование;
		Клиент.UUID = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		Клиент.Host = Выборка.Хост;
		Клиент.ClientType = Выборка.ТипКлиентаПредставление;
		Клиент.ClientAppType = ТипКлиентскогоПриложения;
		Клиент.StartDate = Выборка.ДатаНачала;
		Клиент.FinishDate = ДатаОкончания;
		Клиент.Scenario = Сценарий;
		Клиент.isExecuted = Выполнение;
		Клиент.Result = РезультатПредставление;
		
		СписокКлиентов.Items.Добавить(Клиент);
		
	КонецЦикла;
	
	Возврат СписокКлиентов;
	
КонецФункции //GetTestManagmentList

// Соответствует операции  SetTestManagmentByID
// Устанавливает значения реквизитов элемента справочника ТЦУправлениеТестированием
//
Функция SetTestManagementByID(ClientUUID, TypeID, StartDate, FinishDate, ScenarioUUID)
	
	Если ПустаяСтрока(ClientUUID) Тогда
		Возврат "Не задан UUID клиента";
	КонецЕсли;
	
	УИДКлиента = Новый УникальныйИдентификатор(ClientUUID);
	СпрСсылка = Справочники.ТЦУправлениеТестом.ПолучитьСсылку(УИДКлиента);
	Если Найти(СпрСсылка, "Объект не найден") > 0 Тогда
		Возврат "Неверное значение параметра ""ClientUUID"" (" + ClientUUID + ")";
	КонецЕсли;
	
	СпрОбъект = СпрСсылка.ПолучитьОбъект();
	
	Если ЗначениеЗаполнено(TypeID) Тогда
		Попытка
			ТипПриложения = Перечисления.ТЦТипКлиентскогоПриложения[TypeID];
		Исключение
			Возврат "Неверное значение параметра ""TypeID"" (" + TypeID + ")";
		КонецПопытки;
	Иначе
		ТипПриложения = Перечисления.ТЦТипКлиентскогоПриложения.ПустаяСсылка();
	КонецЕсли;
	Если ТипПриложения = Перечисления.ТЦТипКлиентскогоПриложения.УправлениеТестом Тогда
		ЕстьЗапущенныеАгенты = ТЦСервер.ПроверитьНаличиеЗапущенныхАгентов();
		Если Не ЕстьЗапущенныеАгенты Тогда
			Возврат "В системе нет ни одного запущенного приложения с ролью АгентТЦ.
					|Для создания приложения с управляющей ролью запустите как минимум одного клиента с ролью АгентТЦ";
		КонецЕсли;
	КонецЕсли;
	
	СпрОбъект.ТипПриложения = ТипПриложения;
	
	СпрОбъект.ДатаНачала = StartDate;
	СпрОбъект.ДатаОкончания = FinishDate;
	
	Если ЗначениеЗаполнено(ScenarioUUID) Тогда
		УИДСценария = Новый УникальныйИдентификатор(ScenarioUUID);
		Сценарий = Справочники.ТЦСценарии.ПолучитьСсылку(УИДСценария);
		Если Найти(Сценарий, "Объект не найден") > 0 Тогда
			Возврат "Неверное значение параметра ""ScenarioUUID"" (" + ScenarioUUID + ")";
		КонецЕсли;
		СпрОбъект.Сценарий = Сценарий;
	КонецЕсли;
	
	СпрОбъект.ОбменДанными.Загрузка = Истина;
	СпрОбъект.Записать();

	Возврат "";
	
КонецФункции //SetTestManagmentByID

// Соответствует операции  SetTestManagementByIDUseAllAgents
// Устанавливает значения реквизитов элемента справочника ТЦУправлениеТестированием
//
Функция SetTestManagementByIDUseAllAgents(ClientUUID, TypeID, StartDate, FinishDate, ScenarioUUID)
	
	Если ПустаяСтрока(ClientUUID) Тогда
		Возврат "Не задан UUID клиента";
	КонецЕсли;
	
	УИДКлиента = Новый УникальныйИдентификатор(ClientUUID);
	СпрСсылка = Справочники.ТЦУправлениеТестом.ПолучитьСсылку(УИДКлиента);
	Если Найти(СпрСсылка, "Объект не найден") > 0 Тогда
		Возврат "Неверное значение параметра ""ClientUUID"" (" + ClientUUID + ")";
	КонецЕсли;
	
	СпрОбъект = СпрСсылка.ПолучитьОбъект();
	
	Если ЗначениеЗаполнено(TypeID) Тогда
		Попытка
			ТипПриложения = Перечисления.ТЦТипКлиентскогоПриложения[TypeID];
		Исключение
			Возврат "Неверное значение параметра ""TypeID"" (" + TypeID + ")";
		КонецПопытки;
	Иначе
		ТипПриложения = Перечисления.ТЦТипКлиентскогоПриложения.ПустаяСсылка();
	КонецЕсли;
	Если ТипПриложения = Перечисления.ТЦТипКлиентскогоПриложения.УправлениеТестом Тогда
		ЕстьЗапущенныеАгенты = ТЦСервер.ПроверитьНаличиеЗапущенныхАгентов();
		Если Не ЕстьЗапущенныеАгенты Тогда
			Возврат "В системе нет ни одного запущенного приложения с ролью АгентТЦ.
					|Для создания приложения с управляющей ролью запустите как минимум одного клиента с ролью АгентТЦ";
		КонецЕсли;
	КонецЕсли;
	
	СпрОбъект.ТипПриложения = ТипПриложения;
	
	СпрОбъект.ДатаНачала = StartDate;
	СпрОбъект.ДатаОкончания = FinishDate;
	
	Если ЗначениеЗаполнено(ScenarioUUID) Тогда
		УИДСценария = Новый УникальныйИдентификатор(ScenarioUUID);
		Сценарий = Справочники.ТЦСценарии.ПолучитьСсылку(УИДСценария);
		Если Найти(Сценарий, "Объект не найден") > 0 Тогда
			Возврат "Неверное значение параметра ""ScenarioUUID"" (" + ScenarioUUID + ")";
		КонецЕсли;
		СпрОбъект.Сценарий = Сценарий;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ТЦОбщий.СформироватьИЛИДополнитьПараметрыВыполнения(ПараметрыВыполнения);
	ПараметрыВыполнения.РаспределятьПоКомпьютерамРавномерно = Истина;
	
	// Поместим параметры в хранилище значений
	ХранилищеПараметров = Новый ХранилищеЗначения(ПараметрыВыполнения);
	СпрОбъект.ПараметрыВыполнения = ХранилищеПараметров;	
	СпрОбъект.ОбменДанными.Загрузка = Истина;
	СпрОбъект.Записать();

	Возврат "";
	
КонецФункции //SetTestManagmentByID

// Соответствует операции  SetTestManagementByIDUseAllAgentsChangeURL
// Устанавливает значения реквизитов элемента справочника ТЦУправлениеТестированием
//
Функция SetTestManagementByIDUseAllAgentsChangeURL(ClientUUID, TypeID, StartDate, FinishDate, ScenarioUUID, PublicationURL, DataSeparationUsed)
	
	Если ПустаяСтрока(ClientUUID) Тогда
		Возврат "Не задан UUID клиента";
	КонецЕсли;
	
	УИДКлиента = Новый УникальныйИдентификатор(ClientUUID);
	СпрСсылка = Справочники.ТЦУправлениеТестом.ПолучитьСсылку(УИДКлиента);
	Если Найти(СпрСсылка, "Объект не найден") > 0 Тогда
		Возврат "Неверное значение параметра ""ClientUUID"" (" + ClientUUID + ")";
	КонецЕсли;
	
	СпрОбъект = СпрСсылка.ПолучитьОбъект();
	
	Если ЗначениеЗаполнено(TypeID) Тогда
		Попытка
			ТипПриложения = Перечисления.ТЦТипКлиентскогоПриложения[TypeID];
		Исключение
			Возврат "Неверное значение параметра ""TypeID"" (" + TypeID + ")";
		КонецПопытки;
	Иначе
		ТипПриложения = Перечисления.ТЦТипКлиентскогоПриложения.ПустаяСсылка();
	КонецЕсли;
	Если ТипПриложения = Перечисления.ТЦТипКлиентскогоПриложения.УправлениеТестом Тогда
		ЕстьЗапущенныеАгенты = ТЦСервер.ПроверитьНаличиеЗапущенныхАгентов();
		Если Не ЕстьЗапущенныеАгенты Тогда
			Возврат "В системе нет ни одного запущенного приложения с ролью АгентТЦ.
					|Для создания приложения с управляющей ролью запустите как минимум одного клиента с ролью АгентТЦ";
		КонецЕсли;
	КонецЕсли;
	
	СпрОбъект.ТипПриложения = ТипПриложения;
	
	СпрОбъект.ДатаНачала = StartDate;
	СпрОбъект.ДатаОкончания = FinishDate;
	
	Если ЗначениеЗаполнено(ScenarioUUID) Тогда
		УИДСценария = Новый УникальныйИдентификатор(ScenarioUUID);
		Сценарий = Справочники.ТЦСценарии.ПолучитьСсылку(УИДСценария);
		Если Найти(Сценарий, "Объект не найден") > 0 Тогда
			Возврат "Неверное значение параметра ""ScenarioUUID"" (" + ScenarioUUID + ")";
		КонецЕсли;
		СпрОбъект.Сценарий = Сценарий;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ТЦОбщий.СформироватьИЛИДополнитьПараметрыВыполнения(ПараметрыВыполнения);
	ПараметрыВыполнения.РаспределятьПоКомпьютерамРавномерно = Истина;
	
	PublicationURL = СокрЛП(PublicationURL);
	Если ЗначениеЗаполнено(PublicationURL) Тогда
		ПараметрыВыполнения.АдресПубликации	= PublicationURL;
		Если ЗначениеЗаполнено(DataSeparationUsed) Тогда
			ПараметрыВыполнения.ЕстьРазделение	= DataSeparationUsed;
		КонецЕсли;
	КонецЕсли;
	
	// Поместим параметры в хранилище значений
	ХранилищеПараметров = Новый ХранилищеЗначения(ПараметрыВыполнения);
	СпрОбъект.ПараметрыВыполнения = ХранилищеПараметров;	
	СпрОбъект.ОбменДанными.Загрузка = Истина;
	СпрОбъект.Записать();

	Возврат "";
	
КонецФункции //SetTestManagmentByID

// Соответствует операции  SetTestManagementByIDAdvanced
// Устанавливает значения реквизитов элемента справочника ТЦУправлениеТестированием и формирует параметры запуска сценария
//
Функция SetTestManagementByIDAdvanced(ClientUUID, TypeID, StartDate, FinishDate, ScenarioUUID, ScenarioParameters)
	
	Если ПустаяСтрока(ClientUUID) Тогда
		Возврат "Не задан UUID клиента";
	КонецЕсли;
	
	УИДКлиента = Новый УникальныйИдентификатор(ClientUUID);
	СпрСсылка = Справочники.ТЦУправлениеТестом.ПолучитьСсылку(УИДКлиента);
	Если Найти(СпрСсылка, "Объект не найден") > 0 Тогда
		Возврат "Неверное значение параметра ""ClientUUID"" (" + ClientUUID + ")";
	КонецЕсли;
	
	СпрОбъект = СпрСсылка.ПолучитьОбъект();
	
	Если ЗначениеЗаполнено(TypeID) Тогда
		Попытка
			ТипПриложения = Перечисления.ТЦТипКлиентскогоПриложения[TypeID];
		Исключение
			Возврат "Неверное значение параметра ""TypeID"" (" + TypeID + ")";
		КонецПопытки;
	Иначе
		ТипПриложения = Перечисления.ТЦТипКлиентскогоПриложения.ПустаяСсылка();
	КонецЕсли;
	Если ТипПриложения = Перечисления.ТЦТипКлиентскогоПриложения.УправлениеТестом Тогда
		ЕстьЗапущенныеАгенты = ТЦСервер.ПроверитьНаличиеЗапущенныхАгентов();
		Если Не ЕстьЗапущенныеАгенты Тогда
			Возврат "В системе нет ни одного запущенного приложения с ролью АгентТЦ.
					|Для создания приложения с управляющей ролью запустите как минимум одного клиента с ролью АгентТЦ";
		КонецЕсли;
	КонецЕсли;
	
	СпрОбъект.ТипПриложения = ТипПриложения;
	
	СпрОбъект.ДатаНачала = StartDate;
	СпрОбъект.ДатаОкончания = FinishDate;
	
	Если ЗначениеЗаполнено(ScenarioUUID) Тогда
		УИДСценария = Новый УникальныйИдентификатор(ScenarioUUID);
		Сценарий = Справочники.ТЦСценарии.ПолучитьСсылку(УИДСценария);
		Если Найти(Сценарий, "Объект не найден") > 0 Тогда
			Возврат "Неверное значение параметра ""ScenarioUUID"" (" + ScenarioUUID + ")";
		КонецЕсли;
		СпрОбъект.Сценарий = Сценарий;
	КонецЕсли;
	
	// Обработаем параметры:
	// InitialUsersCount, InitialUsersAdditionStep, FinalUsersAdditionStep, APDEXThreshold, MaxIterationsCount, MaxErrorsCount, MaxErrorsCountPerIteration,
	// IntensityFactor, DynamicUserAddition, LauchOnRunningAgents, PublicationURL, DataSeparationUsed, ComputerWeightTableString, ConcurrentlyLaunchedVWP, ConcurrentlyLaunchedVWPAgent
	
	ПараметрыВыполнения = Новый Структура;
	ТЦОбщий.СформироватьИлиДополнитьПараметрыВыполнения(ПараметрыВыполнения);
	
	Если НЕ ПустаяСтрока(ScenarioParameters) Тогда
		
		// Количество ВРМ, одновременно запускаемых в рамках всего теста
		Если ScenarioParameters.ConcurrentlyLaunchedVWP > 0 Тогда
			ПараметрыВыполнения.ОбщееКоличествоОдновременноЗапускаемыхВРМ = ScenarioParameters.ConcurrentlyLaunchedVWP;
		КонецЕсли;

		// Количество ВРМ, одновременно запускаемых агентом
		Если ScenarioParameters.ConcurrentlyLaunchedVWPAgent > 1 Тогда
			ПараметрыВыполнения.КоличествоОдновременноЗапускаемыхВРМАгента = ScenarioParameters.ConcurrentlyLaunchedVWPAgent;
		КонецЕсли;
		
		// Начальное количество пользователей
		ПараметрыВыполнения.НачальноеКоличествоПользователей = ScenarioParameters.InitialUsersCount;
		
		// Шаги дозапуска пользователей
		Если ScenarioParameters.FinalUsersAdditionStep > ScenarioParameters.InitialUsersAdditionStep Тогда
			Врем = ScenarioParameters.InitialUsersAdditionStep;
			ScenarioParameters.InitialUsersAdditionStep = ScenarioParameters.FinalUsersAdditionStep;
			ScenarioParameters.FinalUsersAdditionStep = Врем;
		КонецЕсли;
		
		ПараметрыВыполнения.НачальныйШагДозапускаПользователей = ScenarioParameters.InitialUsersAdditionStep;
		ПараметрыВыполнения.КонечныйШагДозапускаПользователей = ScenarioParameters.FinalUsersAdditionStep;
		
		// Пороговый APDEX
		Если ScenarioParameters.APDEXThreshold < 0 Тогда
			ScenarioParameters.APDEXThreshold = 0;
		КонецЕсли;
		
		ПараметрыВыполнения.ПороговыйAPDEX = ScenarioParameters.APDEXThreshold;
		
		// Количество итераций
		Если ScenarioParameters.MaxIterationsCount < 1 Тогда
			ScenarioParameters.MaxIterationsCount = 1;
		КонецЕсли;
		
		// Коэффициент интенсивности
		Если ScenarioParameters.IntensityFactor < 0 Тогда
			ScenarioParameters.IntensityFactor = 0;
		КонецЕсли;
				
		ПараметрыВыполнения.МаксимальноеКоличествоИтераций = ScenarioParameters.MaxIterationsCount;
		
		// Прочие параметры
		ПараметрыВыполнения.КритическоеКоличествоОшибокТеста = ScenarioParameters.MaxErrorsCount;
		ПараметрыВыполнения.КритическоеКоличествоОшибокИтерации = ScenarioParameters.MaxErrorsCountPerIteration;
		ПараметрыВыполнения.ЭтоДинамическийТест = ScenarioParameters.DynamicUserAddition;
		ПараметрыВыполнения.РаспределятьПоКомпьютерамРавномерно = ScenarioParameters.LauchOnRunningAgents;
		ПараметрыВыполнения.КоэффициентИнтенсивности = ScenarioParameters.IntensityFactor;
		ПараметрыВыполнения.АдресПубликации = СокрЛП(ScenarioParameters.PublicationURL);
		ПараметрыВыполнения.ЕстьРазделение = ScenarioParameters.DataSeparationUsed;
		
		// Таблица распределения
		ТаблицаРаспределения = Неопределено;
		// ComputerWeightTableString - это строка вида "имя_компьютера1=вес_компьютера1;имя_компьютера2=вес_компьютера2;имя_компьютера3=вес_компьютера3";
		Если ЗначениеЗаполнено(ScenarioParameters.ComputerWeightTableString) Тогда
			
			ТаблицаВесов = Новый ТаблицаЗначений;
			ТаблицаВесов.Колонки.Добавить("Компьютер", Новый ОписаниеТипов("СправочникСсылка.ТЦКомпьютеры"));
			ТаблицаВесов.Колонки.Добавить("Вес", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
			
			СтрокаВесов = СтрЗаменить(ScenarioParameters.ComputerWeightTableString, ";", Символы.ПС);
		
			Сч = 1;
			ТекущаяСтрока = СокрЛП(СтрПолучитьСтроку(СтрокаВесов, Сч));
			Пока ТекущаяСтрока <> "" Цикл
				
				Позиция = Найти(ТекущаяСтрока, "=");
				Если Позиция < 2 или Позиция = СтрДлина(ТекущаяСтрока) Тогда
					Возврат "Некорректная строка в таблице весов: """ + ТекущаяСтрока +"""";
				КонецЕсли;
				
				ИмяКомпьютера = ВРег(Лев(ТекущаяСтрока, Позиция - 1));
				ВесКомпьютера = Прав(ТекущаяСтрока, СтрДлина(ТекущаяСтрока) - Позиция);
				ВесКомпьютера = Число(ВесКомпьютера);
				
				Если ВесКомпьютера < 0 Тогда
					ВесКомпьютера = 1;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаВесов.Добавить();
				НоваяСтрока.Компьютер = ТЦСервер.НайтиКомпьютер(ИмяКомпьютера);
				НоваяСтрока.Вес = ВесКомпьютера;
				
				Сч = Сч + 1;
				ТекущаяСтрока = СокрЛП(СтрПолучитьСтроку(СтрокаВесов, Сч));
				
			КонецЦикла;
			
			Если ТаблицаВесов.Количество() = 0 Тогда
				Возврат "Таблица весов получилось пустой. Строка весов: """ + ScenarioParameters.ComputerWeightTableString + """";
			КонецЕсли;

			ТаблицаРаспределения = ТаблицаВесов;
			
		КонецЕсли;
		
		ПараметрыВыполнения.ТаблицаРаспределения = ТаблицаРаспределения;
	КонецЕсли;
	
	// Поместим параметры в хранилище значений
	ХранилищеПараметров = Новый ХранилищеЗначения(ПараметрыВыполнения);
	СпрОбъект.ПараметрыВыполнения = ХранилищеПараметров;
	СпрОбъект.ОбменДанными.Загрузка = Истина;
	СпрОбъект.Записать();

	Возврат "";
	
КонецФункции

// Соответствует операции GetScenarios
Функция GetScenarios()
	
	ТЦСервер.ОчиститьФантомныеСоединения();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЦСценарии.Ссылка,
	|	ТЦСценарии.Наименование
	|ИЗ
	|	Справочник.ТЦСценарии КАК ТЦСценарии";
	
	СписокСценариевТип = ФабрикаXDTO.Тип(
		"http://v8.1c.ru/testcenter/RemoteManagement/1.0.0.2","ScenariosList");
	СценарийТип = ФабрикаXDTO.Тип(
		"http://v8.1c.ru/testcenter/RemoteManagement/1.0.0.2","Scenario");
		
	СписокСценариев = ФабрикаXDTO.Создать(СписокСценариевТип);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Сценарий = ФабрикаXDTO.Создать(СценарийТип);
		УИД = Выборка.Ссылка.УникальныйИдентификатор();
		Сценарий.UUID = Строка(УИД);
		Сценарий.Name = Выборка.Наименование;
		СписокСценариев.Items.Добавить(Сценарий);
	КонецЦикла;
	
	Возврат СписокСценариев;
	
КонецФункции

// Соответствует операции GetClientAppsTypes
Функция GetClientAppsTypes()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЦТипКлиентскогоПриложения.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТЦТипКлиентскогоПриложения.Ссылка) КАК Представление
	|ИЗ
	|	Перечисление.ТЦТипКлиентскогоПриложения КАК ТЦТипКлиентскогоПриложения";
	
	СписокТипыКлиентскихПриложенийТип = ФабрикаXDTO.Тип(
		"http://v8.1c.ru/testcenter/RemoteManagement/1.0.0.2","ClientAppsTypesList");
	ТипКлиентскогоПриложенияТип = ФабрикаXDTO.Тип(
		"http://v8.1c.ru/testcenter/RemoteManagement/1.0.0.2","ClientAppType");
	
	СписокТиповКлиентов = ФабрикаXDTO.Создать(СписокТипыКлиентскихПриложенийТип);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Индекс = Перечисления.ТЦТипКлиентскогоПриложения.Индекс(Выборка.Ссылка);
		ИД = Метаданные.Перечисления.ТЦТипКлиентскогоПриложения.ЗначенияПеречисления[Индекс].Имя;
		
		ТипКлиента = ФабрикаXDTO.Создать(ТипКлиентскогоПриложенияТип);
		ТипКлиента.ID = ИД;
		ТипКлиента.Name = Выборка.Представление;
		СписокТиповКлиентов.Items.Добавить(ТипКлиента);
	КонецЦикла;
	
	Возврат СписокТиповКлиентов;
	
КонецФункции

// Соответствует операции UnloadAgents
Функция UnloadAgents()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЦАгенты.Ссылка
	|ИЗ
	|	Справочник.ТЦАгенты КАК ТЦАгенты";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	// Отправка сообщений о необходимости завершения работы всем запущенным агентам
	ЗапущенныеАгенты = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Попытка
		ТЦСервер.ЗавершитьРаботуАгента(ЗапущенныеАгенты);
	Исключение
		ТекстИсключения = ОписаниеОшибки();
		Возврат ТекстИсключения;
	КонецПопытки;
	
	// Пауза 10 секунд
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	КипВнешнийКомпонент.Пауза(Инструменты, 10000);
	
	// Удаление записей о тех агентах, которые зависли или завершились аварийно
	ЗапущенныеАгенты = ТЦСервер.КлиентыЗапущены(ЗапущенныеАгенты);
	Если ЗапущенныеАгенты.Количество() > 0 Тогда
		ТЦСервер.УдалитьКлиентов(ЗапущенныеАгенты);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Получает описание ошибки теста в виде строки
//
Функция GetErrorInfoByID(ClientUUID)
	
	Если ПустаяСтрока(ClientUUID) Тогда
		Возврат "Не задан UUID клиента";
	КонецЕсли;

	УИДКлиента = Новый УникальныйИдентификатор(ClientUUID);
	СпрСсылка = Справочники.ТЦУправлениеТестом.ПолучитьСсылку(УИДКлиента);
	Если Найти(СпрСсылка, "Объект не найден") > 0 Тогда
		Возврат "Неверное значение параметра ""ClientUUID"" (" + ClientUUID + ")";
	КонецЕсли;
	
	ОписаниеОшибок = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ТЦТест.Ссылка КАК Тест,
	               |	ТЦТест.ИнформацияОбОшибке,
	               |	ТЦТест.Результат
	               |ИЗ
	               |	Справочник.ТЦУправлениеТестом КАК ТЦУправлениеТестом
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТЦТест КАК ТЦТест
	               |		ПО ТЦУправлениеТестом.Сценарий = ТЦТест.СценарийСсылка
	               |			И ТЦУправлениеТестом.ДатаНачала <= ТЦТест.Дата
	               |			И ТЦУправлениеТестом.ДатаОкончания >= ТЦТест.Дата
	               |ГДЕ
	               |	ТЦУправлениеТестом.Ссылка = &СсылкаНаУправлениеТестом
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТЦТест.Дата УБЫВ";
				   
	Запрос.УстановитьПараметр("СсылкаНаУправлениеТестом", СпрСсылка);			   
	Результат = Запрос.Выполнить();
	
	ЭтоИнформацияПоПоследнемуТесту = Ложь;
	Если Результат.Пустой() Тогда
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ТЦТест.Ссылка КАК Тест,
		               |	ТЦТест.ИнформацияОбОшибке КАК ИнформацияОбОшибке,
		               |	ТЦТест.Результат КАК Результат
		               |ИЗ
		               |	Документ.ТЦТест КАК ТЦТест
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ТЦТест.Дата УБЫВ";
		
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			Возврат "Невозможно получить описание ошибки: тест не найден";
		Иначе
			ЭтоИнформацияПоПоследнемуТесту = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Тест = Выборка.Тест;
	
	Если ЭтоИнформацияПоПоследнемуТесту Тогда
		ОписаниеОшибок = ОписаниеОшибок + "Завершенный тест не был найден, приводится информация по последнему тесту (" + Тест + "):" + Символы.ПС;
	КонецЕсли;
	
	ЗначениеОшибки = Выборка.ИнформацияОбОшибке.Получить();
	Если ЗначениеОшибки <> Неопределено Тогда
		ОписаниеОшибок = ОписаниеОшибок + "Описание критической ошибки: " + Символы.ПС + ЗначениеОшибки.Описание;
		ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + Символы.ПС + "Подробнее о критической ошибке: "+ Символы.ПС
						+ ТЦОбщий.ИнформациюОбОшибкеВСтроку(ЗначениеОшибки);
	КонецЕсли;
					
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЦОшибки.Номер КАК НомерОшибки,
	               |	ТЦОшибки.НомерИтерации,
	               |	ТЦОшибки.Дата,
	               |	ТЦОшибки.Ошибка,
	               |	ТЦОшибки.ВесОшибки
	               |ИЗ
	               |	РегистрСведений.ТЦОшибки КАК ТЦОшибки
	               |ГДЕ
	               |	ТЦОшибки.Тест = &Тест
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТЦОшибки.Номер УБЫВ";
				   
	Запрос.УстановитьПараметр("Тест", Тест);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат ОписаниеОшибок;
	КонецЕсли;
	
	ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + Символы.ПС + "Список всех ошибок (номер ошибки, итерация, дата, ошибка):" + Символы.ПС;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОписаниеОшибок = ОписаниеОшибок + "Ошибка №" +  Выборка.НомерОшибки + ", итерация №" +
						 Выборка.НомерИтерации + ", " + Выборка.Дата + ", вес ошибки: " + Выборка.ВесОшибки + Символы.ПС + Выборка.Ошибка + Символы.ПС + Символы.ПС;
		
	КонецЦикла;
	
	Возврат ОписаниеОшибок;					

КонецФункции

// Получает информацию о результатах теста
//
Функция GetResultsByID(ClientUUID)
	
	Если ПустаяСтрока(ClientUUID) Тогда
		Возврат "Не задан UUID клиента";
	КонецЕсли;

	УИДКлиента = Новый УникальныйИдентификатор(ClientUUID);
	СпрСсылка = Справочники.ТЦУправлениеТестом.ПолучитьСсылку(УИДКлиента);
	Если Найти(СпрСсылка, "Объект не найден") > 0 Тогда
		Возврат "Неверное значение параметра ""ClientUUID"" (" + ClientUUID + ")";
	КонецЕсли;
	
	ОписаниеОшибок = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ТЦТест.Ссылка КАК Тест,
	               |	ТЦТест.ИнформацияОбОшибке,
	               |	ТЦТест.Результат
	               |ИЗ
	               |	Справочник.ТЦУправлениеТестом КАК ТЦУправлениеТестом
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТЦТест КАК ТЦТест
	               |		ПО ТЦУправлениеТестом.Сценарий = ТЦТест.СценарийСсылка
	               |			И ТЦУправлениеТестом.ДатаНачала <= ТЦТест.Дата
	               |			И ТЦУправлениеТестом.ДатаОкончания >= ТЦТест.Дата
	               |ГДЕ
	               |	ТЦУправлениеТестом.Ссылка = &СсылкаНаУправлениеТестом
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТЦТест.Дата УБЫВ";
				   
	Запрос.УстановитьПараметр("СсылкаНаУправлениеТестом", СпрСсылка);			   
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат "Невозможно получить описание ошибки: тест не найден";	
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Тест = Выборка.Тест;
	
	ТипРезультатыТеста = ФабрикаXDTO.Тип(
		"http://v8.1c.ru/testcenter/RemoteManagement/1.0.0.2","TestResults");
	РезультатыТеста = ФабрикаXDTO.Создать(ТипРезультатыТеста);
	
	ТипИтерации = ФабрикаXDTO.Тип(
		"http://v8.1c.ru/testcenter/RemoteManagement/1.0.0.2","IterationsList");
	Итерации = ФабрикаXDTO.Создать(ТипИтерации);
	
	ТипИтерация = ФабрикаXDTO.Тип(
		"http://v8.1c.ru/testcenter/RemoteManagement/1.0.0.2","Iteration");
		
	ТипОшибки = ФабрикаXDTO.Тип(
		"http://v8.1c.ru/testcenter/RemoteManagement/1.0.0.2","ErrorsList");
	Ошибки = ФабрикаXDTO.Создать(ТипОшибки);
		
	ТипОшибка = ФабрикаXDTO.Тип(
		"http://v8.1c.ru/testcenter/RemoteManagement/1.0.0.2","Error");
		
	НомерПоследнейИтерации = Тест.ТекущаяИтерация;
	КоличествоПользователейПоследнейИтерации = 0;
	
	Отбор = Новый Структура("НомерИтерации", НомерПоследнейИтерации);
	
	СтрокиИтерации = Тест.СтруктураИтераций.НайтиСтроки(Отбор);
	Для Каждого ТекСтрокаИтерации Из СтрокиИтерации Цикл
		КоличествоПользователейПоследнейИтерации = КоличествоПользователейПоследнейИтерации + ТекСтрокаИтерации.Количество;
	КонецЦикла;
	
	Для Каждого ТекИтерация Из Тест.ПроизводительностьИтераций Цикл
		
		Итерация = ФабрикаXDTO.Создать(ТипИтерация);
		Итерация.Number			= ТекИтерация.НомерСтроки;
		Итерация.OperationCount	= ТекИтерация.КоличествоОпераций;
		Итерация.UserCount		= ТекИтерация.КоличествоВРМ;
		Итерация.Apdex			= ТекИтерация.APDEX;
		
		Итерации.Items.Добавить(Итерация);
		
	КонецЦикла;
	
	РезультатыТеста.Iterations = Итерации;
		
	РезультатыТеста.StartDate					= Тест.Дата;
	РезультатыТеста.EndDate						= Тест.ДатаОкончания;
	РезультатыТеста.Result						= Строка(Тест.Результат);
	РезультатыТеста.Scenario					= Тест.Сценарий;
	РезультатыТеста.UserCount					= КоличествоПользователейПоследнейИтерации;
	РезультатыТеста.MaxIterationCount			= Тест.МаксимальноеКоличествоИтераций;
	РезультатыТеста.LastIteration				= НомерПоследнейИтерации;
	РезультатыТеста.IntensityFactor				= Тест.КоэффициентИнтенсивности;
	РезультатыТеста.APDEXThreshold				= Тест.ПороговыйAPDEX;
	РезультатыТеста.MaxErrorsCount				= Тест.КритическоеКоличествоОшибокТеста;
	РезультатыТеста.MaxErrorsCountPerIteration	= Тест.КритическоеКоличествоОшибокИтерации;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЦОшибки.Номер КАК НомерОшибки,
	               |	ТЦОшибки.НомерИтерации,
	               |	ТЦОшибки.Дата,
	               |	ТЦОшибки.Ошибка,
	               |	ТЦОшибки.ВесОшибки
	               |ИЗ
	               |	РегистрСведений.ТЦОшибки КАК ТЦОшибки
	               |ГДЕ
	               |	ТЦОшибки.Тест = &Тест
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТЦОшибки.Номер УБЫВ";
				   
	Запрос.УстановитьПараметр("Тест", Тест);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Ошибка = ФабрикаXDTO.Создать(ТипОшибка);
			
			Ошибка.Number			= Выборка.НомерОшибки;
			Ошибка.IterationNumber	= Выборка.НомерИтерации;
			Ошибка.Date				= Выборка.Дата;
			Ошибка.Text				= Выборка.Ошибка;
			Ошибка.Weight			= Выборка.ВесОшибки;
			
			Ошибки.Items.Добавить(Ошибка);
			
		КонецЦикла;	
		
	КонецЕсли;
	
	РезультатыТеста.Errors = Ошибки;

	Возврат РезультатыТеста;
	
КонецФункции

&НаКлиенте
Перем кКлиентТонкий1С;
&НаКлиенте
Перем кКлиентТонкийВеб;
&НаКлиенте
Перем кКлиентТолстыйУправляемый;
&НаКлиенте
Перем кКлиентТолстыйОбычный;
&НаКлиенте
Перем кКлиентВеб;
&НаКлиенте
Перем кБраузерПоУмолчанию;
&НаКлиенте
Перем кБраузерInternetExplorer;
&НаКлиенте
Перем кБраузерFirefox;
&НаКлиенте
Перем кБраузерChrome;
&НаКлиенте
Перем кБраузерSafari;
&НаКлиенте
Перем кПроксиРучной;
&НаКлиенте
Перем кПроксиАвто;
&НаКлиенте
Перем кПроксиНеИспользовать;
&НаКлиенте
Перем мЭтоВыбранныйКомпьютер;
&НаКлиенте
Перем кПараметрыАгента;
&НаКлиенте
Перем кСобственныеПараметры;
&НаКлиенте
Перем кТипВебИмяИПароль;


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

&НаКлиенте
// Обработчик открытия формы
//
Процедура ПриОткрытии(Отказ)
	
	Попытка
		ДатаНачала = ТекущаяДата();
		кКлиентТонкий1С = ПредопределенноеЗначение("Перечисление.ТЦТипКлиента.Тонкий1С");
		кКлиентТонкийВеб = ПредопределенноеЗначение("Перечисление.ТЦТипКлиента.ТонкийВеб");
		кКлиентТолстыйУправляемый = ПредопределенноеЗначение("Перечисление.ТЦТипКлиента.ТолстыйУправляемый");
		кКлиентТолстыйОбычный = ПредопределенноеЗначение("Перечисление.ТЦТипКлиента.ТолстыйОбычный");
		кКлиентВеб = ПредопределенноеЗначение("Перечисление.ТЦТипКлиента.Веб");
		кБраузерПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТЦТипБраузера.ПоУмолчанию");
		кБраузерInternetExplorer = ПредопределенноеЗначение("Перечисление.ТЦТипБраузера.InternetExplorer");
		кБраузерFirefox = ПредопределенноеЗначение("Перечисление.ТЦТипБраузера.Firefox");
		кБраузерChrome = ПредопределенноеЗначение("Перечисление.ТЦТипБраузера.Chrome");
		кБраузерSafari = ПредопределенноеЗначение("Перечисление.ТЦТипБраузера.Safari");
		кПроксиРучной = ПредопределенноеЗначение("Перечисление.ТЦТипПрокси.УказатьНастройки");
		кПроксиАвто = ПредопределенноеЗначение("Перечисление.ТЦТипПрокси.АвтоОпределение");
		кПроксиНеИспользовать = ПредопределенноеЗначение("Перечисление.ТЦТипПрокси.НеИспользовать");
		кПараметрыАгента = ПредопределенноеЗначение("Перечисление.ТЦТипЗапускаКлиента.ПараметрыАгента");
		кСобственныеПараметры = ПредопределенноеЗначение("Перечисление.ТЦТипЗапускаКлиента.СобственныеПараметры");
		кТипВебИмяИПароль = кСобственныеПараметры = ПредопределенноеЗначение("Перечисление.ТЦТипАутентификацииВеб.ИмяПароль");
		
		УстановитьДоступность();
		ОбновитьСтрокуЗапуска();
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ТЦОбщий.ЗаписатьВЖурнал(Ошибка);
		ТЦКлиент.СообщитьОбОшибке(Ошибка, ДатаНачала, ТекущаяДата());
	КонецПопытки;
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Обработчик изменения типа клиента
//
Процедура ТипКлиентаПриИзменении(Элемент)
	
	ЭтоТонкий = Объект.ТипКлиента = кКлиентТонкий1С Или Объект.ТипКлиента = кКлиентТонкийВеб;
	ЭтоТолстый = Объект.ТипКлиента = кКлиентТолстыйОбычный Или Объект.ТипКлиента = кКлиентТолстыйУправляемый;
	ЭтоВеб = Объект.ТипКлиента = кКлиентВеб;
	
	Если ЭтоТонкий Тогда
		Объект.ИмяФайла = "1cv8c";
	ИначеЕсли ЭтоТолстый Тогда
		Объект.ИмяФайла = "1cv8";
	ИначеЕсли ЭтоВеб Тогда
		
		УстановитьИсполняемыйФайлПоТипуБраузера();
		
	КонецЕсли;
	
	Если ЭтоТонкий ИЛИ ЭтоТолстый Тогда
		Элементы.ИмяКаталога.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	УстановитьДоступность();
	ОбновитьСтрокуЗапуска();
	
КонецПроцедуры // ТипКлиентаПриИзменении()

&НаКлиенте
// Обработчик изменения типа браузера
//
Процедура ТипБраузераПриИзменении(Элемент)
	
	УстановитьИсполняемыйФайлПоТипуБраузера();
	
	УстановитьДоступность();
	ОбновитьСтрокуЗапуска();
	
КонецПроцедуры // ТипБраузераПриИзменении()

&НаКлиенте
// Устанавливет имя исполяемого файла в зависимости от выбранного типа браузера
//
Процедура УстановитьИсполняемыйФайлПоТипуБраузера()
	
	Если Объект.ТипБраузера = кБраузерПоУмолчанию Тогда
		Объект.ИмяФайла = "";
	ИначеЕсли Объект.ТипБраузера = кБраузерInternetExplorer Тогда
		Объект.ИмяФайла = "iexplore";
	ИначеЕсли Объект.ТипБраузера = кБраузерFirefox Тогда
		Объект.ИмяФайла = "firefox";
	ИначеЕсли Объект.ТипБраузера = кБраузерChrome Тогда
		Объект.ИмяФайла = "chrome";
	ИначеЕсли Объект.ТипБраузера = кБраузерSafari Тогда
		Объект.ИмяФайла = "safari";
	КонецЕсли;
	
КонецПроцедуры // УстановитьИсполняемыеФайлыПоТипуБраузера()

&НаСервере
// Обработчик проверки заполнения реквизитов
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ЭтоВеб = Объект.ТипКлиента = Перечисления.ТЦТипКлиента.Веб;
	ЭтоТонкийВеб = Объект.ТипКлиента = Перечисления.ТЦТипКлиента.ТонкийВеб;
	БраузерПоУмолчанию = Объект.ТипБраузера = Перечисления.ТЦТипБраузера.ПоУмолчанию;
	ПроксиРучной = Объект.ТипПрокси = Перечисления.ТЦТипПрокси.УказатьНастройки;
	
	Отказ = Отказ Или ТЦСервер.РеквизитЗаполнен(
		Не ЗначениеЗаполнено(Объект.Наименование),
		"Объект.Наименование",
		"Не указано наименование.");
	
	Отказ = Отказ Или ТЦСервер.РеквизитЗаполнен(
		Не ЗначениеЗаполнено(Объект.Компьютер),
		"Объект.Компьютер",
		"Не указан компьютер.");
	
	Отказ = Отказ Или ТЦСервер.РеквизитЗаполнен(
		ЭтоВеб И Не ЗначениеЗаполнено(Объект.ТипБраузера),
		"Объект.ТипБраузера",
		"Не указан тип браузера.");
		
	Отказ = Отказ Или ТЦСервер.РеквизитЗаполнен(
		ЭтоВеб И НЕ БраузерПоУмолчанию И ПустаяСтрока(Объект.ИмяКаталога),
		"Объект.ИмяКаталога",
		"Не указан каталог запуска программы.");
	
	Отказ = Отказ Или ТЦСервер.РеквизитЗаполнен(
		Не ЗначениеЗаполнено(Объект.ТипКлиента),
		"Объект.ТипКлиента",
		"Не указан тип клиента.");
	
	Отказ = Отказ Или ТЦСервер.РеквизитЗаполнен(
		Не Объект.АвтоПуть И ЭтоВеб И Не ЗначениеЗаполнено(Объект.ИмяФайла) И Не БраузерПоУмолчанию,
		"Объект.ИмяФайла",
		"Не указано имя исполняемого файла клиента.");
	
	Отказ = Отказ Или ТЦСервер.РеквизитЗаполнен(
		(ЭтоВеб Или ЭтоТонкийВеб) И Не ЗначениеЗаполнено(Объект.АдресБраузера),
		"Объект.АдресБраузера",
		"Не указана строка адреса информационной базы.");
	
	Отказ = Отказ Или ТЦСервер.РеквизитЗаполнен(
		Объект.НачинатьОтладку И Не ЗначениеЗаполнено(Объект.АдресОтладчика),
		"Объект.АдресОтладчика",
		"Не указана строка адреса отладчика.");
	
	Отказ = Отказ Или ТЦСервер.РеквизитЗаполнен(
		ЭтоТонкийВеб И Не ЗначениеЗаполнено(Объект.ТипПрокси),
		"Объект.ТипПрокси",
		"Не указан вариант использования прокси.");
	
	Отказ = Отказ Или ТЦСервер.РеквизитЗаполнен(
		ЭтоТонкийВеб И ПроксиРучной И Не ЗначениеЗаполнено(Объект.АдресПрокси),
		"Объект.АдресПрокси",
		"Не указан адрес прокси сервера.");
	
	Отказ = Отказ Или ТЦСервер.РеквизитЗаполнен(
		ЭтоТонкийВеб И ПроксиРучной И Не ЗначениеЗаполнено(Объект.ПортПрокси),
		"Объект.ПортПрокси",
		"Не указан порт прокси сервера.");
	
	Отказ = Отказ Или ТЦСервер.РеквизитЗаполнен(
		(ЭтоВеб Или ЭтоТонкийВеб) И Не ЗначениеЗаполнено(Объект.ТипАутентификацииВеб),
		"Объект.ТипАутентификацииВеб",
		"Не указан способ аутентификации пользователя веб-сервера.");
	
КонецПроцедуры // ОбработкаПроверкиЗаполненияНаСервере()

&НаКлиенте
// Обработчик выбора каталога исполняемого файла
//
Процедура ИмяКаталогаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Каталог = Объект.ИмяКаталога;
	
	ОписаниеОповещенияВыбораКаталога = Новый ОписаниеОповещения("ОбработкаВыбораФайловИлиКаталога", ЭтотОбъект, "ВыборКаталогаПриложения");
	Диалог.Показать(ОписаниеОповещенияВыбораКаталога);
	
КонецПроцедуры // ИмяКаталогаНачалоВыбора()

&НаКлиенте
// Обработчик выбора имени исполняемого файла
//
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Разделитель = ТЦОбщий.ОпределитьРазделительПути(Объект.ИмяКаталога);
	Диалог.ПолноеИмяФайла = ТЦОбщий.СкорректироватьПуть(Объект.ИмяКаталога) + Разделитель + Объект.ИмяФайла;
	
	ОписаниеОповещенияВыбораФайла = Новый ОписаниеОповещения("ОбработкаВыбораФайловИлиКаталога", ЭтотОбъект, "ВыборИсполняемогоФайла");
	Диалог.Показать(ОписаниеОповещенияВыбораФайла);
	
КонецПроцедуры // ИмяФайлаНачалоВыбора()

&НаКлиенте
// Обработчик выбора файла служебных сообщений
//
Процедура ФайлСообщенийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.ПолноеИмяФайла = Объект.ФайлСообщений;
	
	ОписаниеОповещенияВыбораФайла = Новый ОписаниеОповещения("ОбработкаВыбораФайловИлиКаталога", ЭтотОбъект, "ВыборФайлаСообщений");
	Диалог.Показать(ОписаниеОповещенияВыбораФайла);
	
КонецПроцедуры // ФайлСообщенийНачалоВыбора()

// Процедура - Обработка выбора файлов или каталога
//
// Параметры:
//  ВыбранныеФайлы			 – массив выбранных имен файлов или Неопределено, если выбор не осуществлен.
//  ДополнительныеПараметры	 - значение, которое было указано при создании объекта ОписаниеОповещения.
//
&НаКлиенте
Процедура ОбработкаВыбораФайловИлиКаталога(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "ВыборКаталогаПриложения" Тогда
		
		Объект.ИмяКаталога = ВыбранныеФайлы[0];
		ОбновитьСтрокуЗапуска();
		
	ИначеЕсли ДополнительныеПараметры = "ВыборИсполняемогоФайла" Тогда
		
		КорректныйКаталог = ТЦОбщий.СкорректироватьПуть(Объект.ИмяКаталога);
		Объект.ИмяФайла = ТЦОбщий.ИмяФайла(ВыбранныеФайлы[0]);
		КорректныйКаталогФайла = ТЦОбщий.СкорректироватьПуть(ТЦОбщий.ИмяКаталога(ВыбранныеФайлы[0]));
		ВрегИмяКаталога = ВРег(КорректныйКаталог);
		ВрегИмяКаталогаФайла = ВРег(КорректныйКаталогФайла);
		
		Если ВрегИмяКаталога <> ВрегИмяКаталогаФайла Тогда
			Разделитель = ТЦОбщий.ОпределитьРазделительПути(Объект.ИмяФайла);
			Объект.ИмяКаталога = КорректныйКаталогФайла;
			ОбновитьСтрокуЗапуска();
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "ВыборФайлаСообщений" Тогда
		
		Объект.ФайлСообщений = ВыбранныеФайлы[0];
		УстановитьДоступность();
		ОбновитьСтрокуЗапуска();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбораФайловИлиКаталога()


///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
// Установить доступность элементов управления
//
Процедура УстановитьДоступность()
	
	ЭтоВеб = Объект.ТипКлиента = кКлиентВеб;
	ЭтоТонкийВеб = Объект.ТипКлиента = кКлиентТонкийВеб;
	ЭтоТонкий = ЭтоТонкийВеб Или Объект.ТипКлиента = кКлиентТонкий1С;
	ПроксиРучной = Объект.ТипПрокси = кПроксиРучной;
	
	Элементы.ТипБраузера.Доступность = ЭтоВеб;
	Элементы.АдресБраузера.Доступность = ЭтоВеб Или ЭтоТонкийВеб;
	Элементы.НачинатьОтладку.Доступность = Объект.РазрешатьОтладку;
	Элементы.ИмяКаталога.Доступность = Не Объект.АвтоПуть;
	Элементы.ИмяФайла.Доступность = Не Объект.АвтоПуть И ЭтоВеб;
	Элементы.ИмитироватьЗадержку.Доступность = Не ЭтоВеб;
	Элементы.ЗадержкаВызова.Доступность = Не ЭтоВеб И Объект.ИмитироватьЗадержку;
	Элементы.ЗадержкаПередачи.Доступность = Не ЭтоВеб И Объект.ИмитироватьЗадержку;
	Элементы.ЗадержкаПолучения.Доступность = Не ЭтоВеб И Объект.ИмитироватьЗадержку;
	Элементы.АдресОтладчика.Доступность = Объект.НачинатьОтладку И Объект.РазрешатьОтладку;
	Элементы.ФайлСообщений.Доступность = Не ЭтоВеб;
	Элементы.НеОчищатьСлужебныеСообщения.Доступность = Не ЭтоВеб;
	Элементы.НеОчищатьСлужебныеСообщения.Доступность = ЗначениеЗаполнено(Объект.ФайлСообщений);
	Элементы.ТипПрокси.Доступность = ЭтоТонкийВеб;
	Элементы.АдресПрокси.Доступность = ЭтоТонкийВеб И ПроксиРучной;
	Элементы.ПользовательПрокси.Доступность = ЭтоТонкийВеб И ПроксиРучной;
	Элементы.ПортПрокси.Доступность = ЭтоТонкийВеб И ПроксиРучной;
	Элементы.ПарольПрокси.Доступность = ЭтоТонкийВеб И ПроксиРучной;
	Элементы.ТипАутентификацииВеб.Доступность = ЭтоТонкийВеб Или ЭтоВеб;
	Элементы.НизкаяСкоростьСоединения.Доступность = ЭтоВеб Или ЭтоТонкий;
	Элементы.ОтображатьВсеФункции.Доступность = Объект.ТипКлиента <> кКлиентТолстыйОбычный;
	Элементы.ОтображатьПоказатели.Доступность = Объект.ТипКлиента <> кКлиентТолстыйОбычный;
	
	Если ПустаяСтрока(Объект.ИмяКаталога) 
		И Объект.ТипКлиента = кКлиентВеб
		И Объект.ТипБраузера <> кБраузерПоУмолчанию Тогда
		
		Элементы.ИмяКаталога.ОтметкаНезаполненного  = Истина;
	Иначе
		Элементы.ИмяКаталога.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступность()


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА СТРОКИ ЗАПУСКА

&НаКлиенте
Процедура ИзменитьДопПараметры(Команда)
	
	ТекстВопроса =
		"Редактировать дополнительные параметры в большинстве случаев не нужно, т.к. большинство параметров можно редактировать, используя графический интерфейс пользователя. Необходимость в редактировании дополнительных параметров может возникнуть, если требуется передать параметры клиенту, отличному от 1С:Предприятия (например, веб-браузеру).
		|
		|Вы уверены, что хотите изменить дополнительные параметры?";
		
	ОписаниеОповещенияРедактированияДопПараметров = Новый ОписаниеОповещения("ОбработатьВопросДопПараметров", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещенияРедактированияДопПараметров, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
// Обработка вопроса о редактировании дополнительных параметров
//
// Параметры:
//  РезультатВопроса- результат выбора пользователя: значение системного перечисления или значение, связанное с нажатой кнопкой.
//
//  ДополнительныеПараметры - значение, которое было указано при создании объекта ОписаниеОповещения
//
Процедура ОбработатьВопросДопПараметров(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Элементы.ДопПараметры.Доступность = Истина;
		Элементы.ИмяФайла.Доступность = Истина;
		Элементы.ИзменитьДопПараметры.Доступность = Ложь;
		ТекущийЭлемент = Элементы.ДопПараметры;
	КонецЕсли;

КонецПроцедуры // ОбработатьВопросДопПараметров()

&НаКлиенте
Процедура КомпьютерПриИзменении(Элемент)
	
	мЭтоВыбранныйКомпьютер = Неопределено;
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
// Определить, является ли выбранный компьютер текущим
// Вариант вызова с кешированием результата
//
// Параметры:
//  ИмяКомпьютера - Строка, имя компьютера на котором сейчас выполняется работа
//
// Возвращаемое значение:
//  Булево - Истина, работа выполняется на выбранном компьютере
//
Функция ЭтоВыбранныйКомпьютер()
	
	Если мЭтоВыбранныйКомпьютер = Неопределено Тогда
		Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
		ИмяКомпьютера = КипВнешнийКомпонент.ИмяЭтогоКомпьютера(Инструменты);
		мЭтоВыбранныйКомпьютер = ЭтоВыбранныйКомпьютерНаСервере(ИмяКомпьютера);
	КонецЕсли;
	
	Возврат мЭтоВыбранныйКомпьютер;
	
КонецФункции // ЭтоВыбранныйКомпьютер()

&НаСервере
// Определить, является ли выбранный компьютер текущим
//
// Параметры:
//  ИмяКомпьютера - Строка, имя компьютера на котором сейчас выполняется работа
//
// Возвращаемое значение:
//  Булево - Истина, работа выполняется на выбранном компьютере
//
Функция ЭтоВыбранныйКомпьютерНаСервере(ИмяКомпьютера)
	
	ИмяВыбранногоКомпьютера = ВРег(Объект.Компьютер.Наименование);
	ИмяЭтогоКомпьютера = ВРег(ИмяКомпьютера);
	
	Возврат ИмяВыбранногоКомпьютера = ИмяЭтогоКомпьютера;
	
КонецФункции // ЭтоВыбранныйКомпьютерНаСервере()

&НаСервере
// Обновить строку запуска
//
Процедура ОбновитьСтрокуЗапуска()
	
	Объект.СтрокаЗапуска = РеквизитФормыВЗначение("Объект").СобратьСтрокуЗапуска();
	
КонецПроцедуры // ОбновитьСтрокуЗапуска()

&НаКлиенте
Процедура ПриИзмененииОбновитьСтрокуЗапуска(Элемент)
	
	ОбновитьСтрокуЗапуска();
	
	Если ПустаяСтрока(Объект.ИмяКаталога) 
		И Объект.ТипКлиента = кКлиентВеб
		И Объект.ТипБраузера <> кБраузерПоУмолчанию Тогда
		
		Элементы.ИмяКаталога.ОтметкаНезаполненного  = Истина;
	Иначе
		Элементы.ИмяКаталога.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОбновитьСтрокуЗапускаИДоступность(Элемент)
	
	УстановитьДоступность();
	ОбновитьСтрокуЗапуска();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если РеквизитФормыВЗначение("Объект").ЭтоНовый() Тогда
		Объект.ЗадержкаВызова = 1.45;
		Объект.ЗадержкаПередачи = 0.45;
		Объект.ЗадержкаПолучения = 0.15;
		//Объект.АвтоПуть = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
// Заполнить таблицу разделителей
//
Процедура ЗаполнитьРазделители()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	Разделители = ТекущийОбъект.Разделители;
	НеИспользовать = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.НеИспользовать;
	
	Удаляемые = Новый Массив;
	
	Для каждого СтрокаРазделителя Из Разделители Цикл
		ОбщийРеквизит = Метаданные.ОбщиеРеквизиты.Найти(СтрокаРазделителя.Имя);
		Если ОбщийРеквизит = Неопределено Тогда
			Удаляемые.Добавить(СтрокаРазделителя);
		Иначе
			Если ТипЗнч(ОбщийРеквизит.Тип.ПривестиЗначение()) <> ТипЗнч(СтрокаРазделителя.Значение) Тогда
				Удаляемые.Добавить(СтрокаРазделителя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Удаляемый Из Удаляемые Цикл
		Разделители.Удалить(Удаляемый);
	КонецЦикла;
	
	Для каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Если ОбщийРеквизит.РазделениеДанных <> НеИспользовать Тогда
			Если Разделители.Найти(ОбщийРеквизит.Имя, "Имя") = Неопределено Тогда
				СтрокаРазделитея = Разделители.Добавить();
				СтрокаРазделитея.Используется = Истина;
				СтрокаРазделитея.Имя = ОбщийРеквизит.Имя;
				СтрокаРазделитея.Значение = ОбщийРеквизит.Тип.ПривестиЗначение();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
КонецПроцедуры // ЗаполнитьРазделители()

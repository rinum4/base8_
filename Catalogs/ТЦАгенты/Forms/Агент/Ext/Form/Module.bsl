&НаКлиенте
Перем мТаймаутПодключения;     // Время отведенное на подключение Агента
&НаКлиенте
Перем мНачалоПодключения;      // Время начала подключения
&НаКлиенте
Перем мАктивныйАгент;          // Ссылка на Агент, активность которого проверяется
&НаКлиенте
Перем мСсылка;                 // Ссылка на Агента
&НаКлиенте
Перем мЗапускОтменен;          // Состояние запуска
&НаКлиенте
Перем мАдресАгента;            // Адрес Агента для локальных сообщений
&НаКлиенте
Перем мПортАгента;             // Порт Агента для локальных сообщений
&НаКлиенте
Перем мЛокальныеСообщения;     // Очередь локальных сообщений
&НаКлиенте
Перем мНачалоОперации;         // Время начала текущей операции
&НаКлиенте
Перем мТаймаутОбработкиВРМ;    // Максимальное время выполнения операции
&НаКлиенте
Перем мСостояние;              // Текущее состояние тестирования
&НаКлиенте
Перем мСостояниеЗадания;       // Текущее состояние задания, возможные значения: кОжидениеОтветаВРМ, Неопределено
&НаКлиенте
Перем мИмяСостояния;           // Текущее состояние тестирования в виде строки
&НаКлиенте
Перем мОперацияВРМ;            // Текущее состояние тестирования в виде строки
&НаКлиенте
Перем мСостоянияВРМ;           // Список ВРМ, которые ответили, что активны
&НаКлиенте
Перем мПредставленияВРМ;       // Соответствие, ключ - ссылка на ВРМ, значение - представление ВРМ
&НаКлиенте
Перем мТест;                   // Текущий тест
&НаКлиенте
Перем мОграниченияТеста;       // Ограничения текущего теста (таймауты)
&НаКлиенте
Перем мСтарыйТест;             // Хранит предыдущий тест
&НаКлиенте
Перем мСценарий;               // Сценарий текущего теста
&НаКлиенте
Перем мЭтоДинамическийТест;    // Флаг, означающий, что текущий тест — динамический (ВРМ "старых" итераций не прекращают работу, когда ВРМ новой итерации подключаются к выполнению сценария)
&НаКлиенте
Перем мПродолжающиеРаботуВРМ;  // Массив ссылок на ВРМ, которые продолжают работу с предыдущих итераций
&НаКлиенте					   
Перем мВРМТаймаут;	 		   // Массив ВРМ, состоящий из ссылок на ВРМ, которые не успели ответить
&НаКлиенте
Перем мНомерИтерации;          // Номер текущей итерации теста
&НаКлиенте
Перем мКоэффициентИнтенсивности;
&НаКлиенте
Перем мКоличествоОдновременноЗапускаемыхВРМАгента;
&НаКлиенте
Перем мНомераВРМ;
&НаКлиенте
Перем мПортыВРМ;
&НаКлиенте
Перем мВРМСценария;
&НаКлиенте
Перем мВРМСценарияБезРезерва;
&НаКлиенте
Перем мВРМСценарияБезПродолжающихРаботу;
&НаКлиенте
Перем мЗапущенныеВРМ;
&НаКлиенте
Перем мВыполняетсяЗавершениеПоОбработчику;
&НаКлиенте
Перем кСтруктураВыполнения;
&НаКлиенте
Перем кПроверкаАктивности;
&НаКлиенте
Перем кПодготовка;
&НаКлиенте
Перем кИнициализация;
&НаКлиенте
Перем кВыполнение;
&НаКлиенте
Перем кЗаписьРезультатов;
&НаКлиенте
Перем кУдалениеДанных;
&НаКлиенте
Перем кЗапуститьВРМ;
&НаКлиенте
Перем кВРМЗапущены;
&НаКлиенте
Перем кГотовКработе;
&НаКлиенте
Перем кЗавершитьРаботу;
&НаКлиенте
Перем кОжидениеОтветаВРМ;
&НаКлиенте
Перем кОтключениеНерабочихВРМ;
&НаКлиенте
Перем кВыполнить;
&НаКлиенте
Перем кОтменить;
&НаКлиенте
Перем кВыполненоУспешно;
&НаКлиенте
Перем кВыполненоСОшибкой;
&НаКлиенте
Перем кВключен;
&НаКлиенте
Перем мПредыдущаяФорма;
&НаКлиенте
Перем мПопыткаЗапуска;
&НаКлиенте
Перем мИсходныйЗаголовокКлиента;
&НаКлиенте
Перем мИнструменты;
&НаКлиенте
Перем мСвойстваСеанса;

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Обработчик создания формы Агента Тест-центра
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	мРежимСовместимости = ТЦСервер.ПолучитьРежимСовместимостиКакСтроку();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик открытия формы агента Тест-центра
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Попытка
		мВыполняетсяЗавершениеПоОбработчику = Ложь;
		мИсходныйЗаголовокКлиента = ПолучитьЗаголовокПриложения();
		ИмяЗапуститьВРМ = "Перечисление.ТЦСообщение.ЗапуститьВРМ";
		кЗапуститьВРМ = ПредопределенноеЗначение(ИмяЗапуститьВРМ);
		ИмяВРМЗапущены = "Перечисление.ТЦСообщение.ВРМЗапущены";
		кВРМЗапущены = ПредопределенноеЗначение(ИмяВРМЗапущены);
		ИмяПроверкаАктивности = "Перечисление.ТЦСообщение.ПроверкаАктивности";
		кПроверкаАктивности = ПредопределенноеЗначение(ИмяПроверкаАктивности);
		ИмяГотовКработе = "Перечисление.ТЦСообщение.ГотовКработе";
		кГотовКработе = ПредопределенноеЗначение(ИмяГотовКработе);
		ИмяЗавершитьРаботу = "Перечисление.ТЦСообщение.ЗавершитьРаботу";
		кЗавершитьРаботу = ПредопределенноеЗначение(ИмяЗавершитьРаботу);
		
		ИмяВыполнить = "Перечисление.ТЦСообщение.Выполнить";
		кВыполнить = ПредопределенноеЗначение(ИмяВыполнить);
		ИмяОтменить = "Перечисление.ТЦСообщение.Отменить";
		кОтменить = ПредопределенноеЗначение(ИмяОтменить);
		ИмяВыполненоУспешно = "Перечисление.ТЦСообщение.ВыполненоУспешно";
		кВыполненоУспешно = ПредопределенноеЗначение(ИмяВыполненоУспешно);
		ИмяВыполненоСОшибкой = "Перечисление.ТЦСообщение.ВыполненоСОшибкой";
		кВыполненоСОшибкой = ПредопределенноеЗначение(ИмяВыполненоСОшибкой);
		
		ИмяПодготовка = "Перечисление.ТЦСостояние.Подготовка";
		кПодготовка = ПредопределенноеЗначение(ИмяПодготовка);
		ИмяИнициализация = "Перечисление.ТЦСостояние.Инициализация";
		кИнициализация = ПредопределенноеЗначение(ИмяИнициализация);
		ИмяВыполнение = "Перечисление.ТЦСостояние.Выполнение";
		кВыполнение = ПредопределенноеЗначение(ИмяВыполнение);
		ИмяЗаписьРезультатов = "Перечисление.ТЦСостояние.ЗаписьРезультатов";
		кЗаписьРезультатов = ПредопределенноеЗначение(ИмяЗаписьРезультатов);
		ИмяУдалениеДанных = "Перечисление.ТЦСостояние.УдалениеДанных";
		кУдалениеДанных = ПредопределенноеЗначение(ИмяУдалениеДанных);
		мПредыдущаяФорма = Параметры.ПредыдущаяФорма;
		кОжидениеОтветаВРМ = 1;
		
		Начало = ТекущаяДата();
		кВключен = Ложь;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВключениеАгента", ЭтотОбъект);
		КипВнешнийКомпонент.НачатьПолучениеИнструментов(ОписаниеОповещения);
		
	Исключение
		
		Ошибка = ИнформацияОбОшибке();
		ТЦОбщий.ЗаписатьВЖурнал(Ошибка, "Агент");
		ТЦКлиент.СообщитьОбОшибке(Ошибка, Начало, ТекущаяДата());
		
		Если Не ПустаяСтрока(мИсходныйЗаголовокКлиента)Тогда
			УстановитьЗаголовокПриложения(мИсходныйЗаголовокКлиента);
		КонецЕсли;
		
		ЗакрытьФормуАгента();
	КонецПопытки;
	
КонецПроцедуры // ПриОткрытии()

// Начинает включение агента
//
// Параметры:
//  Инструменты				 - Объект "Addin.ETP.Tools" или ИнформацияОбОшибке
//  ДополнительныеПараметры	 - произвольный
//
&НаКлиенте
Процедура НачатьВключениеАгента(Инструменты, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Инструменты) = Тип("ИнформацияОбОшибке") Тогда
		
		Ошибка = Инструменты;
		ТЦОбщий.ЗаписатьВЖурнал(Ошибка, "Агент");
		ТЦКлиент.СообщитьОбОшибке(Ошибка, ТекущаяДата() - 5, ТекущаяДата());
		
	Иначе
		
		мИнструменты = Инструменты;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьВключениеАгента", ЭтотОбъект, ДополнительныеПараметры);
		КипВнешнийКомпонент.НачатьПолучениеСвойствСеанса(ОписаниеОповещения, мИнструменты);
		
	КонецЕсли;
	
КонецПроцедуры // НачатьВключениеАгента()

// Процедура - Продолжить включение агента
//
// Параметры:
//  СвойстваСеанса			 - Структура или ИнформацияОбОшибке
//  ДополнительныеПараметры	 - Произвольный
//
&НаКлиенте
Процедура ПродолжитьВключениеАгента(СвойстваСеанса, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(СвойстваСеанса) = Тип("ИнформацияОбОшибке") Тогда
		
		Ошибка = СвойстваСеанса;
		ТЦОбщий.ЗаписатьВЖурнал(Ошибка, "Агент");
		ТЦКлиент.СообщитьОбОшибке(Ошибка, ТекущаяДата() - 5, ТекущаяДата());
		
	Иначе
		
		мСвойстваСеанса = СвойстваСеанса;
		ВключитьРежимАгента();
		
	КонецЕсли;

КонецПроцедуры // ПродолжитьВключениеАгента()

// Закрыть форму Агента
//
// Параметры:
//  Команда - необязательный
//
&НаКлиенте
Процедура ЗакрытьФормуАгента(Команда = Неопределено)
	  
	Попытка
		
		Закрыть();
		
		Если Открыта() Тогда
			
			Форма = ПолучитьФорму(мПредыдущаяФорма,,,, ТЦКлиент.ОсновноеОкно());
			
			Если Форма.Открыта() Тогда
				Форма.Закрыть();
			КонецЕсли;
			
			Форма = ОткрытьФорму(мПредыдущаяФорма,,,, ТЦКлиент.ОсновноеОкно());
			Форма.ОбновитьОтображениеДанных();
			
		КонецЕсли;
		
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "Агент", ПредопределенноеЗначение("Перечисление.ТЦСтатусСообщения.Предупреждение"));
	КонецПопытки;
	
КонецПроцедуры // ЗакрытьФормуАгента()

// Обработчик перед закрытием формы
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка8_3_7ИЛИЗавершениеРаботы8_3_8, ТекстПредупреждения = "", СтандартнаяОбработка8_3_8 = "")
	
	Если мВыполняетсяЗавершениеПоОбработчику Тогда
		Возврат;
	КонецЕсли;
	
	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПлатформы = СисИнфо.ВерсияПриложения;
	
	// Проверим, нужно ли выполнить завершение работы через отказ от закрытия формы
	// (по причине запрета серверных вызовов при завершении работы в 8.3.8 и выше)
	Если ( мРежимСовместимости = "DontUse" И ТЦОбщий.СравнитьВерсии(ВерсияПлатформы, "8.3.8") >= 0
		ИЛИ ТЦОбщий.СравнитьВерсии(мРежимСовместимости, "8.3.8") >= 0 )
		И СтандартнаяОбработка8_3_7ИЛИЗавершениеРаботы8_3_8 = Истина Тогда
		
		Отказ = Истина;
		мВыполняетсяЗавершениеПоОбработчику = Истина;
		
		ТекстПредупреждения = "Для удаления текущего агента из списка активных нажмите кнопку ""Продолжить работу""."
							  "Агент выполнит необходимые действия и завершит работу приложения автоматически.";
							  
		ПодключитьОбработчикОжидания("ЗавершитьРаботуАгентаПоОбработчику", 0.1, Истина);
		Возврат;
		
	КонецЕсли;	

	Попытка
		
		Если кВключен Тогда
			ЗакрытьАгента();
		КонецЕсли;
		
		ТЦСервер.УдалитьКлиентскоеПриложениеИзСписка();
		
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "Агент");
	КонецПопытки;
		
	Если Не Отказ И Не ПустаяСтрока(мИсходныйЗаголовокКлиента)Тогда
		УстановитьЗаголовокПриложения(мИсходныйЗаголовокКлиента);
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

// Завершает работу агента, вызывается через обработчик ожидания после отказа в закрытии формы
//
&НаКлиенте
Процедура ЗавершитьРаботуАгентаПоОбработчику()

	Если кВключен Тогда
		ЗакрытьАгента(Истина);
	КонецЕсли;
	
КонецПроцедуры // ЗавершитьРаботуАгентаПоОбработчику()

// Обработка сообщений, адресуемых Агенту от фонового задания управления тестом
// Обработка выполняется каждую секунду
//
&НаКлиенте
Процедура ОбработкаСообщений()
	
	Попытка
		
		Пока Истина Цикл
			Пакет = ТЦСервер.ПолучитьСообщение(Объект.Ссылка);
			
			Если Пакет = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Сообщение = Пакет.Сообщение;
			
			Если Сообщение = кВыполнить Тогда
				мСостояние = Пакет.Параметры.Состояние;
				мИмяСостояния = ТЦСервер.ИмяПеречисления(мСостояние);
				РезультатВычисления = Вычислить(мИмяСостояния + "Выполнить(Пакет.Параметры)");
			ИначеЕсли Сообщение = кОтменить Тогда
				Если ЗначениеЗаполнено(мИмяСостояния) Тогда
					РезультатВычисления = Вычислить(мИмяСостояния + "Отменить(Пакет.Параметры)");
					ТЦСервер.УстановитьСтатусВыполненияТеста(Ложь);
				КонецЕсли;
			ИначеЕсли Сообщение = кЗавершитьРаботу Тогда
				
				Если ТипЗнч(Пакет.Параметры) = Тип("Массив") Тогда
					НачатьЗавершениеРаботы(, Пакет.Параметры);
				Иначе
					ЗакрытьАгента(Истина);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "Агент");
		
		ТекстОшибки = "Агенту не удалось обработать сообщение от Тест-центра: " + Символы.ПС + ТЦОбщий.ИнформациюОбОшибкеВСтроку(ИнформацияОбОшибке());
		ТЦСервер.ОтправитьСообщение(мТест, Объект.Ссылка, кВыполненоСОшибкой, "Агенту не удалось обработать сообщение от Тест-центра");
		
		ТЦСервер.УстановитьСтатусВыполненияТеста(Ложь);
		
	КонецПопытки;
	
КонецПроцедуры // ОбработкаСообщений()

// Обработчик приема локальных сообщений
//
&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Попытка
		Пакет = ТЦСервер.РаспаковатьЛокальноеСообщение(Данные);
		Сообщение = Пакет.Сообщение;
		
		Если Сообщение = кГотовКработе Или Сообщение = кВыполненоУспешно Тогда
			
			// Игнорируем сообщения, относящиеся к отличным состояниям ВРМ.
			Если мСостояние <> Пакет.Параметры.Состояние И Сообщение <> кГотовКработе Тогда
				Возврат;
			КонецЕсли;
			
			ВРМ = Пакет.Параметры.ВРМ;
			
			// Выгружаем ВРМ, которое ответило о готовности, но после таймаута (считаем такие ВРМ неработоспособными).
			Если Сообщение = кГотовКработе Тогда
				
				ПортВРМ = Пакет.Параметры.РезультатВыполнения;
				Если ЗначениеЗаполнено(ПортВРМ) Тогда
					мПортыВРМ.Вставить(ВРМ, ПортВРМ);
				КонецЕсли;
				
				Индекс = мВРМТаймаут.Найти(ВРМ);
				Если Индекс <> Неопределено Тогда
					ЗавершаемоеВРМ = Новый Массив;
					ЗавершаемоеВРМ.Добавить(мВРМТаймаут[Индекс]);
					НачатьЗавершениеРаботы(, ЗавершаемоеВРМ);
					Возврат;					
				КонецЕсли;				
			КонецЕсли;
			
			// Обрабатываем ответ ВРМ
			Если мСостояниеЗадания = кОжидениеОтветаВРМ Тогда
				ОписаниеВРМ = мСостоянияВРМ[ВРМ];
				
				Если ОписаниеВРМ <> Неопределено Тогда
					Если Сообщение = кГотовКработе Тогда
						мЗапущенныеВРМ.Вставить(ВРМ);
						
						Если ОписаниеВРМ.Свойство("Запуск") Тогда
							ТЦСервер.ОтметитьЗапускВыполнен(ОписаниеВРМ.Запуск);
						КонецЕсли;
					КонецЕсли;
					
					ОписаниеВРМ.Выполнено = Истина;
					ОписаниеВРМ.Результат = Пакет.Параметры.Результат;
					
					// Добавим ВРМ в список продолжающих работу
					Если мСостояние = кВыполнение И мЭтоДинамическийТест Тогда
						
						Индекс = мПродолжающиеРаботуВРМ.Найти(ВРМ);
						Если Индекс = Неопределено Тогда
							мПродолжающиеРаботуВРМ.Добавить(ВРМ);
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Сообщение = кВыполненоСОшибкой Тогда
			
			// Отправляем данные об ошибке 
			ТЦСервер.ОтправитьСообщение(мТест, Объект.Ссылка, кВыполненоСОшибкой, Пакет.Параметры);
			
			// Отметим что ВРМ уже выполнил задание (несмотря на ошибку — успешность теста будет определять фоновое задание теста)
			Если мСостоянияВРМ[Пакет.Параметры.ВРМ] <> Неопределено Тогда
				мСостоянияВРМ[Пакет.Параметры.ВРМ].Выполнено = Истина;				
			КонецЕсли;
			
		КонецЕсли;
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "Агент");
		ТекстОшибки = "Агенту не удалось обработать сообщение ВРМ." + Символы.ПС + "Подробности: " + Символы.ПС + ТЦОбщий.ИнформациюОбОшибкеВСтроку(ИнформацияОбОшибке());
		ТЦСервер.ОтправитьСообщение(мТест, Объект.Ссылка, кВыполненоСОшибкой, ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры // ВнешнееСобытие()

// Обработка завершения ожидания проверки работоспособности Агента
// Обработка выполняется каждую секунду
//
&НаКлиенте
Процедура ОжиданиеОтветаАктивногоАгента()
	
	ПроизошлаОшибка = Ложь;
	
	Попытка
		
		Сообщение = ТЦСервер.ПолучитьСообщение(мАктивныйАгент, мСсылка, Ложь);
		Если Сообщение = Неопределено Тогда
			
			ОтключитьОбработчикОжидания("ОжиданиеОтветаАктивногоАгента");
			Состояние = "Агент уже запущен. Запуск отменен.";
			Элементы.Завершено.Видимость = Ложь;
			мЗапускОтменен = Истина;
			
		Иначе
			
			Если ТекущаяДата() - мНачалоПодключения > мТаймаутПодключения Тогда
				
				ОтключитьОбработчикОжидания("ОжиданиеОтветаАктивногоАгента");
				ТЦСервер.ПолучитьСообщение(мАктивныйАгент, мСсылка);
				ДеактивироватьАгента(мАктивныйАгент);
				кВключен = Ложь;
				
				ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВключениеАгента", ЭтотОбъект);
				КипВнешнийКомпонент.НачатьПолучениеИнструментов(ОписаниеОповещения);
				
			Иначе
				Завершено = Завершено + 1;
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		ПроизошлаОшибка = Истина;
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "Агент");
		ОтключитьОбработчикОжидания("ОжиданиеОтветаАктивногоАгента");
		ТЦСервер.ОтправитьСообщение(мТест, Объект.Ссылка, кВыполненоСОшибкой, "Агенту не удалось инициализироваться");
	КонецПопытки;
	
	Если мЗапускОтменен ИЛИ ПроизошлаОшибка Тогда
		УстановитьЗаголовокПриложения(мИсходныйЗаголовокКлиента);
	КонецЕсли;
	
КонецПроцедуры // ОжиданиеОтветаАктивногоАгента()


///////////////////////////////////////////////////////////////////////////////
// РАБОТА С АГЕНТОМ

// Закрыть Агента
//
// Параметры:
//  
//
&НаКлиенте
Процедура ЗакрытьАгента(ЗавершитьРаботуПриложения = Ложь) Экспорт
	
	Если Не мЗапускОтменен Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьЗакрытиеАгента", ЭтотОбъект, ЗавершитьРаботуПриложения);
		НачатьЗавершениеРаботы(ОписаниеОповещения, ТЦОбщий.СоответствиеВМассив(мЗапущенныеВРМ));
		
	КонецЕсли;
	
КонецПроцедуры // ЗакрытьАгента()

// Продолжить закрытие агента
//
&НаКлиенте
Процедура ПродолжитьЗакрытиеАгента(Результат, ЗавершитьРаботуПриложения) Экспорт
	
	ОтключитьРежимАгента();
	ТЦКлиент.ПереключитьРежимОпроса(Ложь);
	кВключен = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьЗакрытиеАгента", ЭтотОбъект, ЗавершитьРаботуПриложения, "ЗавершитьЗакрытиеАгента", ЭтотОбъект);
	ТЦКлиент.НачатьОтключениеЛокальныхСообщений(ОписаниеОповещения, мЛокальныеСообщения);

КонецПроцедуры

// Завершить закрытие агента
//
&НаКлиенте
Процедура ЗавершитьЗакрытиеАгента(Результат, ЗавершитьРаботуПриложения) Экспорт
	
	мЛокальныеСообщения = Неопределено;

	Попытка
		ТЦСервер.УдалитьКлиентскоеПриложениеИзСписка();
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "Агент");
	КонецПопытки;

	Если ЗавершитьРаботуПриложения Тогда
		ЗавершитьРаботуСистемы(Ложь, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Инициализировать Агента
//
// Параметры:
//  ИмяКомпьютера - Строка, имя компьютера на котором запускается Агент
//
// Возвращаемое значение:
//  СправочникСсылка.ТЦАгенты - ссылка на создаваемый агент
//
&НаСервере
Функция Инициализировать(ИмяКомпьютера, НомерСессии)
	
	ТекущийОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.ТЦАгенты"));
	ТекущийОбъект.Наименование = ИмяКомпьютера + "." + Формат(НомерСессии, "ЧГ=0");
	ТекущийОбъект.Компьютер = ТЦСервер.НайтиКомпьютер(ИмяКомпьютера);
	ТекущийОбъект.НомерСессии = НомерСессии;
	Ссылка = Справочники.ТЦАгенты.ПолучитьСсылку(Новый УникальныйИдентификатор);
	ТекущийОбъект.УстановитьСсылкуНового(Ссылка);
	ЗначениеВДанныеФормы(ТекущийОбъект, Объект);
	Возврат Ссылка;
	
КонецФункции // Инициализировать()

// Зарегистрировать Агента в информационной базе
//
&НаКлиенте
Процедура ЗарегистрироватьАгента()
	
	Записать();
	ПодключитьОбработчикОжидания("ОбработкаСообщений", 3);
	Состояние		= "Подключен";
	Элементы.Завершено.Видимость = Ложь;
	Завершено		= 0;
	мАдресАгента	= Объект.Ссылка;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьРегистрациюАгента", ЭтотОбъект);
	ТЦКлиент.НачатьПодключениеЛокальныхСообщений(ОписаниеОповещения, мЛокальныеСообщения, мПортАгента);
	
КонецПроцедуры // ЗарегистрироватьАгента()

// Продолжить регистрацию агента
//
// Параметры:
//  Результат				 - Структура или ИнформацияОбОшибке
//  ДополнительныеПараметры	 - Произвольный
//
&НаКлиенте
Процедура ПродолжитьРегистрациюАгента(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("ИнформацияОбОшибке") Тогда
		
		Ошибка = Результат;
		ТЦОбщий.ЗаписатьВЖурнал(Ошибка, "Агент");
		ТЦКлиент.СообщитьОбОшибке(Ошибка, ТекущаяДата() - 5, ТекущаяДата());
		Возврат;
		
	КонецЕсли;	
	
	мЛокальныеСообщения = Результат.Сообщения;
	мПортАгента = Результат.Порт;
	
	ТЦСервер.ЗаписатьПортАгента(Объект.Ссылка, мПортАгента);
	Объект.Порт		= мПортАгента;
	мЗапущенныеВРМ	= Новый Соответствие;
	мПортыВРМ		= Новый Соответствие;
	кВключен		= Истина;
	
	#Если Не ВебКлиент Тогда
		ИмяКомпьютера = ИмяКомпьютера();
	#Иначе
		СистИнфо = Новый СистемнаяИнформация;
		ИмяКомпьютера = СистИнфо.ИдентификаторКлиента;
	#КонецЕсли

	УстановитьТипАгентаИСтатусВыполненияТеста(ИмяКомпьютера, ТЦКлиент.ПолучитьТекущуюСредуВыполнения());
	УстановитьЗаголовокПриложения("Агент");	
	
	ТЦКлиент.ПереключитьРежимОпроса(Истина);
	
КонецПроцедуры // ПродолжитьРегистрациюАгента()

// Устанавливает тип приложения и статус выполнения теста в справочнике ТЦУправлениеТестом
//
// Параметры:
//  ИмяКомпьютера	 - Строка 
//  ТипКлиента		 - Перечисление.ТЦТипКлиента
//
&НаСервереБезКонтекста
Процедура УстановитьТипАгентаИСтатусВыполненияТеста(ИмяКомпьютера, ТипКлиента)
	
	ЭлементУправлениеТестом = ТЦСервер.ПолучитьЗаписьУправленияТестомПоИдентификатору();
	Если Не ЗначениеЗаполнено(ЭлементУправлениеТестом) Тогда
		
		ПараметрыСеанса.ТЦТипКлиентскогоПриложения = Перечисления.ТЦТипКлиентскогоПриложения.АгентТЦ;
		ТЦСервер.ИнициализироватьУправлениеТестом(ИмяКомпьютера, ТипКлиента, Ложь);
		
	Иначе
		
		ТЦСервер.УстановитьТипКлиентскогоПриложения(Перечисления.ТЦТипКлиентскогоПриложения.АгентТЦ);
		
	КонецЕсли;
	
	ТЦСервер.УстановитьСтатусВыполненияТеста(Ложь);
	
КонецПроцедуры // УстановитьТипАгентаИСтатусВыполненияТеста()

// Удалить регистрацию Агента из справочника
//
// Параметры:
//  СправочникСсылка.ТЦАгенты - ссылка на удаляемого Агента
//
&НаСервере
Процедура ДеактивироватьАгента(Агент)
	
	ТекущийОбъект = Агент.ПолучитьОбъект();
	
	Если ТекущийОбъект <> Неопределено Тогда
		ТЦСервер.УдалитьСообщенияАдресата(ТекущийОбъект.Ссылка);
		ТекущийОбъект.ОбменДанными.Загрузка = Истина;
		
		Попытка
			ТекущийОбъект.Удалить();
		Исключение
			ТекстОписания = ТЦОбщий.ИнформациюОбОшибкеВСтроку(ИнформацияОбОшибке());
			ТекстОписания = "Некритичная ошибка при удалении агента: " + Символы.ПС + ТекстОписания;
			ТЦОбщий.ЗаписатьВЖурнал(ТекстОписания, "Агент", ПредопределенноеЗначение("Перечисление.ТЦСтатусСообщения.Предупреждение"));
		КонецПопытки;
		
		//При завершении агента сбросить тип приложения в справочнике ТЦуправлениеТестированием
		Попытка
			ОчиститьТипКлиентскогоПриложения();
		Исключение
			ТекстОписания = ТЦОбщий.ИнформациюОбОшибкеВСтроку(ИнформацияОбОшибке());
			ТекстОписания = "Некритичная ошибка при удалении агента: " + Символы.ПС + ТекстОписания;
			ТЦОбщий.ЗаписатьВЖурнал(ТекстОписания, "Агент", ПредопределенноеЗначение("Перечисление.ТЦСтатусСообщения.Предупреждение"));
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры // ДеактивироватьАгента()

// Включить режим агента в текущем клиенте
//
&НаКлиенте
Процедура ВключитьРежимАгента()
	
	мТаймаутПодключения = 5;
	мЗапускОтменен = Ложь;
	Элементы.Завершено.МаксимальноеЗначение = мТаймаутПодключения;
	Элементы.Завершено.Видимость = Истина;
	Завершено = 0;
	Состояние = "Подключение...";
	
	мСсылка = Инициализировать(мСвойстваСеанса.ИмяКомпьютера, мСвойстваСеанса.НомерСессии);
	мНачалоПодключения = ТекущаяДата();
	
	мАктивныйАгент = ТЦСервер.АгентЗапущен(мСвойстваСеанса.ИмяКомпьютера, мСвойстваСеанса.НомерСессии);
	
	Если мАктивныйАгент <> Неопределено Тогда
		ИмяЗначения = "Перечисление.ТЦСообщение.ПроверкаАктивности";
		Сообщение = ПредопределенноеЗначение(ИмяЗначения);
		ТЦСервер.ОтправитьСообщение(мАктивныйАгент, мСсылка, Сообщение);
		ПодключитьОбработчикОжидания("ОжиданиеОтветаАктивногоАгента", 3);
	Иначе
		ЗарегистрироватьАгента();
	КонецЕсли;
	
КонецПроцедуры // ВключитьРежимАгента()

// Отключить режим агента в текущем клиенте
//
&НаСервере
Процедура ОтключитьРежимАгента()
	
	ДеактивироватьАгента(Объект.Ссылка);
	
КонецПроцедуры // ОтключитьРежимАгента()

// Сбросить тип клиентского приложения и очистить признак выполнения теста
&НаСервереБезКонтекста
Процедура ОчиститьТипКлиентскогоПриложения()
	
	ТЦСервер.УстановитьТипКлиентскогоПриложения(Перечисления.ТЦТипКлиентскогоПриложения.ПустаяСсылка());
	ТЦСервер.УстановитьСтатусВыполненияТеста(Ложь);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРМ

// Инициирует отправку сообщей для массива ВРМ (используется только при завершении работы ВРМ).
//
// Параметры:
//  ОписаниеОповещения	 - ОписаниеОповещения
//  Сообщения			 - Произвольный
//  Порты				 - Массив
//  Пакет				 - Строка (см. ТЦСервер.ЗапаковатьЛокальноеСообщение)
//
&НаКлиенте
Процедура НачатьОтправкуСообщенийМассивуВРМ(ОписаниеОповещения, Сообщения, Порты, Пакет) Экспорт
	
	Если Порты.Количество() = 0 И ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	Иначе
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОписаниеОповещенияПослеОтправкиСообщений", ОписаниеОповещения);
		
		ДополнительныеПараметры.Вставить("Порты", Порты);
		ДополнительныеПараметры.Вставить("Пакет", Пакет);
		ДополнительныеПараметры.Вставить("Сообщения", Сообщения);
		
		ОписаниеОповещенияПродолжения = Новый ОписаниеОповещения("ВыполнитьОтправкуСообщенийМассивуВРМ", ЭтотОбъект, ДополнительныеПараметры);
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПродолжения, Неопределено)
		
	КонецЕсли;
	
КонецПроцедуры //НачатьОтправкуСообщенийМассивуВРМ()

// Выполняет отправку конкретному ВРМ из массива ВРМ
//
// Параметры:
//  Результат				 - Неопределено или ИнформацияОбОшибке
//  ДополнительныеПараметры	 - Структура
//
&НаКлиенте
Процедура ВыполнитьОтправкуСообщенийМассивуВРМ(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("ИнформацияОбОшибке") Тогда
		
		Если ДополнительныеПараметры.Свойство("ТекущийПорт") Тогда
			 
			ТЦОбщий.ЗаписатьВЖурнал("Описание ошибки: " + ТЦОбщий.ИнформациюОбОшибкеВСтроку(Результат) + Символы.ПС +
			                        "Локальный адрес агента: " + мАдресАгента + Символы.ПС +
				                    "Порт: " + ДополнительныеПараметры.ТекущийПорт + Символы.ПС
									, "ИсключениеПриОтправкеСообщенияАгентом", ПредопределенноеЗначение("Перечисление.ТЦСтатусСообщения.Предупреждение"));

		Иначе
			ТЦОбщий.ЗаписатьВЖурнал(Результат, "ИсключениеПриОтправкеСообщенияАгентом");
		КонецЕсли;
						
	КонецЕсли;

	Если ДополнительныеПараметры.Порты.Количество() = 0 Тогда
		Если ДополнительныеПараметры.ОписаниеОповещенияПослеОтправкиСообщений <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияПослеОтправкиСообщений, ДополнительныеПараметры);
		КонецЕсли;
	Иначе
		Индекс = ДополнительныеПараметры.Порты.ВГраница();
		Порт = ДополнительныеПараметры.Порты[Индекс];
		ДополнительныеПараметры.Порты.Удалить(Индекс);
		ДополнительныеПараметры.Вставить("ТекущийПорт", Порт);
	
		ОписаниеОповещенияПродолжения = Новый ОписаниеОповещения("ВыполнитьОтправкуСообщенийМассивуВРМ", ЭтотОбъект, ДополнительныеПараметры);
		КипВнешнийКомпонент.НачатьОтправкуСообщения(ОписаниеОповещенияПродолжения, ДополнительныеПараметры.Сообщения, Порт, ДополнительныеПараметры.Пакет);
	КонецЕсли;
		
КонецПроцедуры // ВыполнитьОтправкуСообщенийМассивуВРМ()

// Завершить работу ВРМ или Агента
//
// Параметры:
//  СписокВРМ
//
&НаКлиенте
Процедура НачатьЗавершениеРаботы(ОписаниеОповещения = Неопределено, СписокВРМ = Неопределено) Экспорт
	
	Если СписокВРМ = Неопределено Тогда
		// Завершить работу Агента
		ЗакрытьАгента();
		ТЦСервер.УдалитьКлиентскоеПриложениеИзСписка();
		ЗавершитьРаботуСистемы(Ложь);
	Иначе
		
		// Завершить работу ВРМ
		Если СписокВРМ.Количество() > 0 Тогда
			
			УдалитьВРМИзМассивов(СписокВРМ);
			Порты = Новый Массив;
			Для каждого ВРМ Из СписокВРМ Цикл
				
				Порт = ПолучитьПортВРМ(ВРМ, мПортыВРМ);
				Порты.Добавить(Порт);
				
				Попытка
					
					мЗапущенныеВРМ.Удалить(ВРМ);
					мПортыВРМ.Удалить(ВРМ);
					мСостоянияВРМ.Удалить(ВРМ);
					ТЦСервер.ВыгрузитьВРМ(ВРМ);
						
				Исключение
				КонецПопытки;
				
			КонецЦикла;
			
			Пакет = ТЦСервер.ЗапаковатьЛокальноеСообщение(мАдресАгента, кЗавершитьРаботу);
			НачатьОтправкуСообщенийМассивуВРМ(ОписаниеОповещения, мЛокальныеСообщения, Порты, Пакет);
			Возврат;
			
		Иначе
			Если ОписаниеОповещения <> Неопределено Тогда
				ВыполнитьОбработкуОповещения(ОписаниеОповещения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗавершитьРаботу()

&НаКлиенте
// Выполнить подготовку ВРМ
//
// Параметры:
//  Параметры - Структура
//
Функция ПодготовкаВыполнить(ПараметрыСообщения)
	
	мСценарий	= ПараметрыСообщения.Сценарий;
	мТест		= ПараметрыСообщения.Тест;
	мПопыткаЗапуска = 1;
	
	мЭтоДинамическийТест	= ПараметрыСообщения.ЭтоДинамическийТест;
	мНомерИтерации			= ПараметрыСообщения.НомерИтерации;
	мКоэффициентИнтенсивности = ПараметрыСообщения.КоэффициентИнтенсивности;
	мКоличествоОдновременноЗапускаемыхВРМАгента = ПараметрыСообщения.КоличествоОдновременноЗапускаемыхВРМАгента;
	
	ОтключитьОбработчикОжидания("ЗапуститьКлиентыВРМ");
	
	Если мСтарыйТест <> мТест Тогда
		мОграниченияТеста = ПолучитьОграниченияТеста(мТест);
		мСтарыйТест = мТест;
		мВРМТаймаут = Новый Массив;
		Если мПредставленияВРМ = Неопределено Тогда
			мПредставленияВРМ = Новый Соответствие;
		КонецЕсли;
		
		// Инициализируем массив ВРМ, продолжающих работу
		Если мЭтоДинамическийТест Тогда
			мПродолжающиеРаботуВРМ = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	мНомераВРМ		= Новый Соответствие;

	// Получить список неподходящих ВРМ и выгрузить их
	ВыгружаемыеВРМ = ТЦСервер.ВРМВнеСценария(мСвойстваСеанса.ИмяКомпьютера, мСвойстваСеанса.НомерСессии);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодготовкаПродолжить", ЭтотОбъект);
	НачатьЗавершениеРаботы(ОписаниеОповещения, ВыгружаемыеВРМ);
	
КонецФункции // ПодготовкаВыполнить()

&НаКлиенте
// Продолжить подготовку
//
//
Процедура ПодготовкаПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	ЗапущенныеВРМ	= ТЦСервер.ЗапущенныеВРМ(мСвойстваСеанса.ИмяКомпьютера, мСвойстваСеанса.НомерСессии, мВРМТаймаут);
	ТЦСервер.УстановитьСтатусВыполненияТеста(Истина);
	ОбработатьВРМ(ЗапущенныеВРМ, "ОпросВРМ",, мОграниченияТеста.ТаймаутОпросаКлиента);
	
КонецПроцедуры

&НаКлиенте
// Отменить подготовку ВРМ
//
// Параметры:
//  Параметры - Структура
//
Функция ПодготовкаОтменить(ПараметрыСообщения)
	
	

КонецФункции // ПодготовкаОтменить()

&НаКлиенте
// Отправить сообщение ВРМ с параметрами
//
// Параметры:
//  ВРМ - СправочникСсылка.ТЦВП
//  Сообщение - ПеречислениеСсылка.ТЦСообщение
//
Процедура ОтправитьСообщениеВРМ(ВРМ, Сообщение, Параметры = Неопределено)
	
	Пакет = ТЦСервер.ЗапаковатьЛокальноеСообщение(мАдресАгента, Сообщение, Параметры);
	Порт = ПолучитьПортВРМ(ВРМ, мПортыВРМ);
	
	Попытка 
		КипВнешнийКомпонент.ОтправитьСообщение(мЛокальныеСообщения, Порт, Пакет);
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал("Описание ошибки: " + ОписаниеОшибки() + Символы.ПС +
		                        "Локальный адрес агента: " + мАдресАгента + Символы.ПС +
		                        "Адрес получателя: " + ВРМ + Символы.ПС
								, "ИсключениеПриОтправкеСообщенияАгентом");
	КонецПопытки;
	
КонецПроцедуры // ОтправитьСообщениеВРМ()

&НаКлиенте
// Начать отправку сообщения сообщение ВРМ с параметрами
//
// Параметры:
//  ВРМ - СправочникСсылка.ТЦВП
//  Сообщение - ПеречислениеСсылка.ТЦСообщение
//
Процедура НачатьОтправкуСообщенияВРМ(ОписаниеОповещения, ВРМ, Сообщение, Параметры = Неопределено)
	
	Пакет = ТЦСервер.ЗапаковатьЛокальноеСообщение(мАдресАгента, Сообщение, Параметры);
	Порт = ПолучитьПортВРМ(ВРМ, мПортыВРМ);
	
	Если ТипЗнч(ОписаниеОповещения.ДополнительныеПараметры) = Тип("Структура") Тогда
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ТекущийПорт",	Порт);
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ТекущийВРМ",	ВРМ);
	КонецЕсли;
	
	Попытка 
		КипВнешнийКомпонент.НачатьОтправкуСообщения(ОписаниеОповещения, мЛокальныеСообщения, Порт, Пакет);
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал("Описание ошибки: " + ОписаниеОшибки() + Символы.ПС +
		                        "Локальный адрес агента: " + мАдресАгента + Символы.ПС +
		                        "Адрес получателя: " + ВРМ + Символы.ПС
								, "ИсключениеПриОтправкеСообщенияАгентом");
	КонецПопытки;
	
КонецПроцедуры // НачатьОтправкуСообщенияВРМ()

&НаКлиенте
// Получает порт ВРМ по ссылке на ВРМ
//
// Параметры:
//  ВРМ  - СправочникСсылка.ТЦВП - ссылка на ВРМ
//  КэшПортовВРМ  - Соответствие
//
// Возвращаемое значение:
//   Число   - порт ВРМ
//
Функция ПолучитьПортВРМ(ВРМ, КэшПортовВРМ)

	Порт = КэшПортовВРМ[ВРМ];
	
	Если Не ЗначениеЗаполнено(Порт) Тогда
		Порт = ТЦСервер.ЛокальныйПортВРМ(ВРМ);
		КэшПортовВРМ.Вставить(ВРМ, Порт);
	КонецЕсли;
	
	Возврат Порт;

КонецФункции // ПолучитьПортВРМ(ВРМ, КэшПортовВРМ)

&НаКлиенте
// Выполнить опрос ВРМ
//
// Параметры:
//  ПараметрыОпроса - Структура
//    ВРМ - СправочникСсылка.ТЦВП
//    Параметры - Произвольный
//
Функция ОпросВРМ(ОписаниеОповещения, ПараметрыОпроса)
	
	 НачатьОтправкуСообщенияВРМ(ОписаниеОповещения, ПараметрыОпроса.ВРМ, кПроверкаАктивности);
	
КонецФункции // ОпросВРМ()

&НаКлиенте
// Обработчик выполнения опроса ВРМ
//
Функция ОпросВРМВыполнено()
	
	ПодготовитьКлиентыВРМ();
	ЗапуститьКлиентыВРМ();
	
КонецФункции // ОпросВРМВыполнено()

&НаКлиенте
// Обработчик выполнения опроса ВРМ
//
Функция ОпросВРМТаймаут(ВРМНеЗавершившиеОперацию = Неопределено)
	
	Для каждого ВРМ Из мСостоянияВРМ Цикл
		Если Не ВРМ.Значение.Выполнено Тогда
			ТЦСервер.УдалитьВРМ(ВРМ.Ключ);
			
			// Удаляем неответивший ВРМ из списка ВРМ, продолжающих выполнение в динамическом тесте
			Если мЭтоДинамическийТест Тогда
				Индекс = мПродолжающиеРаботуВРМ.Найти(ВРМ.Ключ);
				Если Индекс <> Неопределено Тогда
					мПродолжающиеРаботуВРМ.Удалить(Индекс);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПодготовитьКлиентыВРМ();
	ЗапуститьКлиентыВРМ();
	
КонецФункции // ОпросВРМТаймаут()

&НаКлиенте
// Запустить ВРМ
//
// Параметры:
//  ПараметрыОпроса - Структура
//    ВРМ - СправочникСсылка.ТЦВП
//    Параметры - Произвольный
//
Функция ЗапускВРМ(ОписаниеОповещения, ПараметрыЗапуска)
	
	ВРМ = ПараметрыЗапуска.ВРМ;
	Ид = Строка(ВРМ.УникальныйИдентификатор());
	ПараметрыВРМ = ПараметрыЗапуска.Параметры[ВРМ];
	
	ТЦКлиент.НачатьЗапускКлиента(ОписаниеОповещения, мИнструменты, ПараметрыВРМ.Клиент, ПараметрыВРМ.ПользовательЗапуска, Ид);
	
КонецФункции // ЗапускВРМ()

&НаКлиенте
// Запустить ВРМ
//
Функция ЗапускВРМВыполнено()
	
	Для каждого СостояниеВРМ Из мСостоянияВРМ Цикл
		ТЦСервер.АктивироватьВРМ(СостояниеВРМ.Ключ);
	КонецЦикла;
	
	ЗапуститьКлиентыВРМ();
	
КонецФункции // ЗапускВРМВыполнено()

&НаСервереБезКонтекста
// Формирование описания таймаута ВРМ
//
// Параметры:
//  СостоянияВРМ - Соответствие
//  Тест - ДокументСсылка.ТЦТест
//  мПредставленияВРМ - Соответствие
//  Сообщение - Строка
//  ИмяКомпьютераАгента - Строка
//  ВРМНеЗавершившиеРаботу - Массив - в него будут записаны ссылки на ВРМ,
//									  которым не удалось закончить операцию за отведенное время
//
// Возвращаемое значение:
//  Строка - описание таймаута и списка ВРМ
//
Функция ОписаниеТаймаутаВРМ(СостоянияВРМ, мПредставленияВРМ, Тест, Знач Сообщение, ИмяКомпьютераАгента, ВРМНеЗавершившиеОперацию)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ВРМ", Новый ОписаниеТипов("СправочникСсылка.ТЦВП"));
	
	Для каждого СостояниеВРМ Из СостоянияВРМ Цикл
		СтрокаТаблицы = Таблица.Добавить();
		СтрокаТаблицы.ВРМ = СостояниеВРМ.Ключ;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаВРМ", Таблица);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаСсылокВРМ.ВРМ КАК ВРМ
	               |ПОМЕСТИТЬ ТаблицаВРМ
	               |ИЗ
	               |	&ТаблицаВРМ КАК ТаблицаСсылокВРМ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаВРМ.ВРМ КАК ВРМ,
	               |	ПРЕДСТАВЛЕНИЕ(ТаблицаВРМ.ВРМ) КАК ПредставлениеВРМ,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ТЦВП.Ссылка, ИСТИНА) = ИСТИНА
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК НеНайден
	               |ИЗ
	               |	ТаблицаВРМ КАК ТаблицаВРМ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТЦВП КАК ТЦВП
	               |		ПО ТаблицаВРМ.ВРМ = ТЦВП.Ссылка";
				   
	ВРМНеЗавершившиеОперацию = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	ВесОшибки = 0;
	Пока Выборка.Следующий() Цикл
		ВРМ = СостоянияВРМ[Выборка.ВРМ];
		Если Не ВРМ.Выполнено Тогда
			ВРМНеЗавершившиеОперацию.Добавить(Выборка.ВРМ);
			ВесОшибки = ВесОшибки + 1;
			
			ПредставлениеВРМ = мПредставленияВРМ.Получить(Выборка.ВРМ);
			Если Выборка.НеНайден = Ложь ИЛИ ПредставлениеВРМ = Неопределено Тогда
				ПредставлениеВРМ = Выборка.ПредставлениеВРМ;
			Иначе
				ПредставлениеВРМ = ПредставлениеВРМ + " (ВРМ было выгружено, или не смогло запуститься)";
			КонецЕсли;
			
			Сообщение = Сообщение + "
				| - " + ПредставлениеВРМ;
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеОшибки = Новый Структура;
	ОписаниеОшибки.Вставить("Результат", Сообщение);
	ОписаниеОшибки.Вставить("ВесОшибки", ВесОшибки);
	
	Возврат ОписаниеОшибки;
	
КонецФункции // ОписаниеТаймаутаВРМ()

&НаКлиенте
// Запустить ВРМ
//
// Параметры:
//  ПараметрыОпроса - Структура
//    ВРМ - СправочникСсылка.ТЦВП
//    Параметры - Произвольный
//
Функция ЗапускВРМТаймаут(ВРМНеЗавершившиеОперацию)
	
	// Добавим неответившие ВРМ в массив
	Для Каждого ЭлементСостояния Из мСостоянияВРМ Цикл
		Если ЭлементСостояния.Значение.Выполнено = Ложь Тогда
			мВРМТаймаут.Добавить(ЭлементСостояния.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Если мПопыткаЗапуска < мОграниченияТеста.ПопытокЗапускаКлиентов Тогда
		ЗапуститьКлиентыВРМ();
		мПопыткаЗапуска = мПопыткаЗапуска + 1;
	Иначе
		Сообщение = "Следующие ВРМ не удалось запустить до истечения таймаута запуска клиента (" + мОграниченияТеста.ТаймаутЗапускаКлиента + " с):";
		ИмяКомпьютера = мСвойстваСеанса.ИмяКомпьютера;
		
		ПараметрыСообщения  = ПараметрыСообщенияОТаймауте();
		ЗаполнитьЗначенияСвойств(ПараметрыСообщения, ОписаниеТаймаутаВРМ(мСостоянияВРМ, мПредставленияВРМ, мТест, Сообщение, ИмяКомпьютера, ВРМНеЗавершившиеОперацию));
		Возврат ПараметрыСообщения;
	КонецЕсли;
	
КонецФункции // ЗапускВРМТаймаут()

&НаКлиенте
// Загрузить сценарий для ВРМ
//
// Параметры:
//  
//
Функция ЗагрузкаВРМ(ОписаниеОповещения, ПараметрыЗагрузки)
	
	ПараметрыВРМ = Новый Структура;
	ПараметрыВРМ.Вставить("НомерВРМ", мНомераВРМ[ПараметрыЗагрузки.ВРМ]);
	ПараметрыВРМ.Вставить("Сценарий", мСценарий);
	ПараметрыВРМ.Вставить("Тест", мТест);
	ПараметрыВРМ.Вставить("Сценарий", мСценарий);
	ПараметрыВРМ.Вставить("КоэффициентИнтенсивности", мКоэффициентИнтенсивности);
	ПараметрыВРМ.Вставить("ПродолжатьРаботуМеждуИтерациями", мЭтоДинамическийТест);
	ПараметрыСообщения = ПараметрыСообщенияДляВРМ(кПодготовка, ПараметрыВРМ);
	
	НачатьОтправкуСообщенияВРМ(ОписаниеОповещения, ПараметрыЗагрузки.ВРМ, кВыполнить, ПараметрыСообщения);
	
КонецФункции // ЗагрузкаВРМ()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция ЗагрузкаВРМВыполнено()
	
	мВРМСценарияБезРезерва = ТЦСервер.ЗапущенныеВРМБезРезерва(мСвойстваСеанса.ИмяКомпьютера, мСвойстваСеанса.НомерСессии, мВРМТаймаут, ТЦОбщий.СоответствиеВМассив(мЗапущенныеВРМ));
	ТЦСервер.ОбновитьПредставленияВРМ(мПредставленияВРМ, мСвойстваСеанса.ИмяКомпьютера, мСвойстваСеанса.НомерСессии);
	ТЦСервер.ОтправитьСообщение(мТест, Объект.Ссылка, кВыполненоУспешно);
	
КонецФункции // ЗагрузкаВРМВыполнено()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция ЗагрузкаВРМТаймаут(ВРМНеЗавершившиеОперацию)
	
	Сообщение = "Следующие ВРМ не удалось настроить до истечения таймаута загрузки сценария клиентом (" + мОграниченияТеста.ТаймаутЗагрузкиСценарияКлиентом + " с):";
	
	ПараметрыСообщения  = ПараметрыСообщенияОТаймауте();
	ЗаполнитьЗначенияСвойств(ПараметрыСообщения, ОписаниеТаймаутаВРМ(мСостоянияВРМ, мПредставленияВРМ, мТест, Сообщение, мСвойстваСеанса.ИмяКомпьютера, ВРМНеЗавершившиеОперацию));
	Возврат ПараметрыСообщения;
	
КонецФункции // ЗагрузкаВРМТаймаут()

&НаКлиенте
// Выполнить инициализацию ВП
//
// Параметры:
//  Параметры - Структура
//
Функция ИнициализацияВыполнить(ПараметрыСообщения)
	
	Если Не мЭтоДинамическийТест Тогда
		ОбработатьВРМ(мВРМСценария, "ИнициализироватьВРМ",, мОграниченияТеста.ТаймаутИнициализации);
	Иначе
		
		// Если текущий тест — динамический, то команду инициализации дадим только новым ВРМ
		мВРМСценарияБезПродолжающихРаботу = Новый Массив;
		
		Для Каждого ТекущийВРМ Из мВРМСценария Цикл
			
			Индекс = мПродолжающиеРаботуВРМ.Найти(ТекущийВРМ);
			Если Индекс = Неопределено Тогда
				мВРМСценарияБезПродолжающихРаботу.Добавить(ТекущийВРМ);
			КонецЕсли;
			
		КонецЦикла;
		
		ОбработатьВРМ(мВРМСценарияБезПродолжающихРаботу, "ИнициализироватьВРМ",, мОграниченияТеста.ТаймаутИнициализации);
		
	КонецЕсли;
	
КонецФункции // ВыполнитьИнициализацию()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция ИнициализироватьВРМ(ОписаниеОповещения, ПараметрыИнициализации)
	
	ПараметрыВРМ = ПараметрыСообщенияДляВРМ(кИнициализация);
	НачатьОтправкуСообщенияВРМ(ОписаниеОповещения, ПараметрыИнициализации.ВРМ, кВыполнить, ПараметрыВРМ);
	
КонецФункции // ИнициализироватьВРМ()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция ИнициализироватьВРМВыполнено()
	
	ТЦСервер.ОтправитьСообщение(мТест, Объект.Ссылка, кВыполненоУспешно);
	
КонецФункции // ИнициализироватьВРМ()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция ИнициализироватьВРМТаймаут(ВРМНеЗавершившиеОперацию)
	
	Сообщение = "Следующие ВРМ не удалось инициализировать до истечения таймаута инициализации (" + мОграниченияТеста.ТаймаутИнициализации + " с):";
	
	ПараметрыСообщения  = ПараметрыСообщенияОТаймауте();
	ЗаполнитьЗначенияСвойств(ПараметрыСообщения, ОписаниеТаймаутаВРМ(мСостоянияВРМ, мПредставленияВРМ, мТест, Сообщение, мСвойстваСеанса.ИмяКомпьютера, ВРМНеЗавершившиеОперацию));
	Возврат ПараметрыСообщения;
	
КонецФункции // ИнициализироватьВРМТаймаут()

&НаКлиенте
// Отменить инициализацию ВП
//
// Параметры:
//  Параметры - Структура
//
Функция ИнициализацияОтменить(ПараметрыСообщения)
	
	
	
КонецФункции // ИнициализацияОтменить()

&НаКлиенте
// Выполнить процесс тестирования
//
// Параметры:
//  Параметры - Структура
//
Функция ВыполнениеВыполнить(ПараметрыВыполнения)
	
	ОбработатьВРМ(мВРМСценарияБезРезерва, "ВыполнитьВРМ",, мОграниченияТеста.ТаймаутВыполнения);
	
КонецФункции // ВыполнениеВыполнить()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция ВыполнитьВРМ(ОписаниеОповещения, ПараметрыВыполнения)
	
	ПараметрыВРМ = ПараметрыСообщенияДляВРМ(кВыполнение);
	НачатьОтправкуСообщенияВРМ(ОписаниеОповещения, ПараметрыВыполнения.ВРМ, кВыполнить, ПараметрыВРМ);
	
КонецФункции // ВыполнитьВРМ()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция ВыполнитьВРМВыполнено()
	
	ТЦСервер.ОтправитьСообщение(мТест, Объект.Ссылка, кВыполненоУспешно);
	
КонецФункции // ВыполнитьВРМВыполнено()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция ВыполнитьВРМТаймаут(ВРМНеЗавершившиеОперацию)
	
	Сообщение = "Следующим ВРМ не удалось выполнить действия до истечения таймаута выполнения (" + мОграниченияТеста.ТаймаутВыполнения + " с):";
	
	ПараметрыСообщения  = ПараметрыСообщенияОТаймауте();
	ЗаполнитьЗначенияСвойств(ПараметрыСообщения, ОписаниеТаймаутаВРМ(мСостоянияВРМ, мПредставленияВРМ, мТест, Сообщение, мСвойстваСеанса.ИмяКомпьютера, ВРМНеЗавершившиеОперацию));
	Возврат ПараметрыСообщения;
	
КонецФункции // ВыполнитьВРМТаймаут()

&НаКлиенте
// Отменить процесс тестирования
//
// Параметры:
//  Параметры - Структура
//
Функция ВыполнениеОтменить(ПараметрыСообщения)
	
	
	
КонецФункции // ВыполнениеОтменить()

&НаКлиенте
// Выполнить запись результатов
//
// Параметры:
//  Параметры - Структура
//
Функция ЗаписьРезультатовВыполнить(ПараметрыСообщения)
	
	ОбработатьВРМ(мВРМСценария, "ЗаписатьВРМ",, мОграниченияТеста.ТаймаутЗаписиРезультатов);
	
КонецФункции // ЗаписьРезультатовВыполнить()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция ЗаписатьВРМ(ОписаниеОповещения, ПараметрыЗаписи)
	
	ПараметрыВРМ = ПараметрыСообщенияДляВРМ(кЗаписьРезультатов);
	НачатьОтправкуСообщенияВРМ(ОписаниеОповещения, ПараметрыЗаписи.ВРМ, кВыполнить, ПараметрыВРМ);
	
КонецФункции // ЗаписатьВРМ()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция ЗаписатьВРМВыполнено()
	
	ТЦСервер.ОтправитьСообщение(мТест, Объект.Ссылка, кВыполненоУспешно, мСостоянияВРМ);
	
КонецФункции // ЗаписатьВРМВыполнено()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция ЗаписатьВРМТаймаут(ВРМНеЗавершившиеОперацию)
	
	Сообщение = "Следующим ВРМ не удалось записать результаты до истечения таймаута записи результатов (" + мОграниченияТеста.ТаймаутЗаписиРезультатов + " с):";
	
	ПараметрыСообщения  = ПараметрыСообщенияОТаймауте();
	ЗаполнитьЗначенияСвойств(ПараметрыСообщения, ОписаниеТаймаутаВРМ(мСостоянияВРМ, мПредставленияВРМ, мТест, Сообщение, мСвойстваСеанса.ИмяКомпьютера, ВРМНеЗавершившиеОперацию));
	Возврат ПараметрыСообщения;
	
КонецФункции // ЗаписатьВРМТаймаут()

&НаКлиенте
// Отменить запись  результатов
//
// Параметры:
//  Параметры - Структура
//
Функция ЗаписьРезультатовОтменить(ПараметрыСообщения)
	
	
	
КонецФункции // ЗаписьРезультатовОтменить()

&НаКлиенте
// Выполнить удаление ранее созданных данных
//
// Параметры:
//  Параметры - Структура
//
Функция УдалениеДанныхВыполнить(ПараметрыСообщения)
	
	ОбработатьВРМ(мВРМСценария, "УдалитьДанные",, мОграниченияТеста.ТаймаутУдаленияДанных);
	
КонецФункции // УдалениеДанныхВыполнить()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция УдалитьДанные(ОписаниеОповещения, ПараметрыУдаления)
	
	ПараметрыВРМ = ПараметрыСообщенияДляВРМ(кУдалениеДанных);
	НачатьОтправкуСообщенияВРМ(ОписаниеОповещения, ПараметрыУдаления.ВРМ, кВыполнить, ПараметрыВРМ);
	
КонецФункции // УдалитьДанные()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция УдалитьДанныеВыполнено()
	
	УдалитьДанныеВыполненоНаСервере(мТест, Объект.Ссылка, кВыполненоУспешно);
	
КонецФункции // УдалитьДанныеВыполнено()

&НаСервереБезКонтекста
Функция УдалитьДанныеВыполненоНаСервере(Получатель, Отправитель, Сообщение)
	
	ТЦСервер.ОтправитьСообщение(Получатель, Отправитель, Сообщение);
	ТЦСервер.УстановитьСтатусВыполненияТеста(Ложь);
	
КонецФункции

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция УдалитьДанныеТаймаут(ВРМНеЗавершившиеОперацию)
	
	Сообщение = "Следующим ВРМ не удалось удалить данные до истечения таймаута удаления данных (" + мОграниченияТеста.ТаймаутУдаленияДанных + " с):";

	ПараметрыСообщения  = ПараметрыСообщенияОТаймауте();
	ЗаполнитьЗначенияСвойств(ПараметрыСообщения, ОписаниеТаймаутаВРМ(мСостоянияВРМ, мПредставленияВРМ, мТест, Сообщение, мСвойстваСеанса.ИмяКомпьютера, ВРМНеЗавершившиеОперацию));
	Возврат ПараметрыСообщения;
	
КонецФункции // УдалитьДанныеТаймаут()

&НаКлиенте
// Отменить удаление ранее созданных данных
//
// Параметры:
//  Параметры - Структура
//
Функция УдалениеДанныхОтменить(ПараметрыСообщения)
	
	
	
КонецФункции // УдалениеДанныхОтменить()

&НаСервереБезКонтекста
// Функция получает ограничения теста по ссылке на документ ТЦТест
//
// Параметры:
//  Тест  - ДокументСсылка.ТЦТест - документ теста
//
// Возвращаемое значение:
//   Структура   - содержит ограничения теста
//
&НаСервереБезКонтекста
Функция ПолучитьОграниченияТеста(Тест)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЦТест.ПопытокЗапускаКлиентов,
	               |	ТЦТест.ТаймаутЗапускаКлиента,
	               |	ТЦТест.ТаймаутОпросаКлиента,
	               |	ТЦТест.ТаймаутЗагрузкиСценарияКлиентом,
	               |	ТЦТест.ТаймаутИнициализации,
	               |	ТЦТест.ТаймаутВыполнения,
	               |	ТЦТест.ТаймаутЗаписиРезультатов,
	               |	ТЦТест.ТаймаутУдаленияДанных
	               |ИЗ
	               |	Документ.ТЦТест КАК ТЦТест
	               |ГДЕ
	               |	ТЦТест.Ссылка = &Ссылка";
				   
	Запрос.УстановитьПараметр("Ссылка", Тест);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ВызватьИсключение "Не удалось прочитать ограничения теста " + Тест;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	СтруктураОграничений = Новый Структура;
	Для Каждого ТекКолонка Из Результат.Колонки Цикл
		СтруктураОграничений.Вставить(ТекКолонка.Имя, Выборка[ТекКолонка.Имя]);
	КонецЦикла;
	
	Возврат СтруктураОграничений;

КонецФункции // ПолучитьОграниченияТеста(Тест)

&НаСервереБезКонтекста
// Получить максимальное число попыток запуска клиентов из настроек теста
//
// Параметры:
//  Тест
//
// Возвращаемое значение:
//  Число - число попыток
//
Функция ПопытокЗапускаКлиентов(Тест)
	
	НачатьТранзакцию();
	Значение = Тест.ПопытокЗапускаКлиентов;
	ЗафиксироватьТранзакцию();
	Возврат Значение;
	
КонецФункции // ПопытокЗапускаКлиентов

&НаСервереБезКонтекста
// Получить таймаут подготовки из настроек теста
//
// Параметры:
//  Тест
//
// Возвращаемое значение:
//  Число - таймаут подготовки
//
Функция ТаймаутЗапускаКлиента(Тест)
	
	НачатьТранзакцию();
	Значение = Тест.ТаймаутЗапускаКлиента;
	ЗафиксироватьТранзакцию();
	Возврат Значение;
	
КонецФункции // ТаймаутЗапускаКлиента()

&НаСервереБезКонтекста
// Получить таймаут опроса клиента
//
// Параметры:
//  Тест
//
// Возвращаемое значение:
//  Число - таймаут опроса
//
Функция ТаймаутОпросаКлиента(Тест)
	
	НачатьТранзакцию();
	Значение = Тест.ТаймаутОпросаКлиента;
	ЗафиксироватьТранзакцию();
	Возврат Значение;
	
КонецФункции // ТаймаутОпросаКлиента()

&НаСервереБезКонтекста
// Получить таймаут загрузки сценария клиентом
//
// Параметры:
//  Тест
//
// Возвращаемое значение:
//  Число - таймаут загрузки сценария
//
Функция ТаймаутЗагрузкиСценарияКлиентом(Тест)
	
	НачатьТранзакцию();
	Значение = Тест.ТаймаутЗагрузкиСценарияКлиентом;
	ЗафиксироватьТранзакцию();
	Возврат Значение;
	
КонецФункции // ТаймаутЗагрузкиСценарияКлиентом()

&НаСервереБезКонтекста
// Получить таймаут инициализации
//
// Параметры:
//  Тест
//
// Возвращаемое значение:
//  Число - таймаут загрузки сценария
//
Функция ТаймаутИнициализации(Тест)
	
	НачатьТранзакцию();
	Значение = Тест.ТаймаутИнициализации;
	ЗафиксироватьТранзакцию();
	Возврат Значение;
	
КонецФункции // ТаймаутИнициализации()

&НаСервереБезКонтекста
// Получить таймаут выполнения
//
// Параметры:
//  Тест
//
// Возвращаемое значение:
//  Число - таймаут загрузки сценария
//
Функция ТаймаутВыполнения(Тест)
	
	НачатьТранзакцию();
	Значение = Тест.ТаймаутВыполнения;
	ЗафиксироватьТранзакцию();
	Возврат Значение;
	
КонецФункции // ТаймаутВыполнения()

&НаСервереБезКонтекста
// Получить таймаут записи результатов
//
// Параметры:
//  Тест
//
// Возвращаемое значение:
//  Число - таймаут загрузки сценария
//
Функция ТаймаутЗаписиРезультатов(Тест)
	
	НачатьТранзакцию();
	Значение = Тест.ТаймаутЗаписиРезультатов;
	ЗафиксироватьТранзакцию();
	Возврат Значение;
	
КонецФункции // ТаймаутЗаписиРезультатов()

&НаСервереБезКонтекста
// Получить таймаут удаления данных
//
// Параметры:
//  Тест
//
// Возвращаемое значение:
//  Число - таймаут загрузки сценария
//
Функция ТаймаутУдаленияДанных(Тест)
	
	НачатьТранзакцию();
	Значение = Тест.ТаймаутУдаленияДанных;
	ЗафиксироватьТранзакцию();
	Возврат Значение;
	
КонецФункции // ТаймаутУдаленияДанных()

&НаКлиенте
// Подготовить виртуальных пользователей к запуску
//
Процедура ПодготовитьКлиентыВРМ()
	
	// Получить список подходящих ВРМ и отметить, как уже запущенные
	мНомераВРМ = ТЦСервер.ПереиспользоватьВРМ(мСвойстваСеанса.ИмяКомпьютера, мСвойстваСеанса.НомерСессии, мПродолжающиеРаботуВРМ);
	
КонецПроцедуры // ПодготовитьКлиентыВРМ()

&НаКлиенте
// Запустить клиентские приложения ВРМ
//
// Параметры:
//  
//
Процедура ЗапуститьКлиентыВРМ()
	
	СтруктураЗапуска = ТЦСервер.НеЗапущенныеВРМ(мСвойстваСеанса.ИмяКомпьютера, мСвойстваСеанса.НомерСессии, мКоличествоОдновременноЗапускаемыхВРМАгента);
	
	ГотовыеКЗапуску		= СтруктураЗапуска.ГотовыеКЗапуску;
	КоличествоНеготовыхКЗапуску	= СтруктураЗапуска.КоличествоНеготовыхКЗапуску;
	
	// Если все ВРМ запущены и отвечают
	Если ГотовыеКЗапуску.Количество() = 0 И КоличествоНеготовыхКЗапуску = 0 Тогда
		ТЦСервер.ОбновитьПредставленияВРМ(мПредставленияВРМ, мСвойстваСеанса.ИмяКомпьютера, мСвойстваСеанса.НомерСессии);
		ЗагрузитьВРМ();
		Возврат;
	КонецЕсли;
	
	Если ГотовыеКЗапуску.Количество() > 0 Тогда
		
		СписокВРМ = Новый Массив;
		ПараметрыЗапуска = Новый Соответствие;
		
		Для каждого ВРМ Из ГотовыеКЗапуску Цикл
			Ид = Строка(Новый УникальныйИдентификатор);
			Ссылка = ТЦСервер.СсылкаПоИдентификатору(Ид, "Справочники", "ТЦВП");
			СписокВРМ.Добавить(Ссылка);
			
			мПредставленияВРМ[Ссылка] = ТЦКлиент.ПолучитьНачальноеПредставлениеВРМ(ВРМ.Пользователь, ВРМ.Клон, ВРМ.Клиент, мСвойстваСеанса.ИмяКомпьютера, мСвойстваСеанса.НомерСессии, ВРМ.Номер);
			
			мНомераВРМ[Ссылка] = ВРМ.Номер;
			
			ОписаниеПараметров = Новый Структура;
			ОписаниеПараметров.Вставить("Клиент", ВРМ.Клиент);
			ОписаниеПараметров.Вставить("Пользователь", ВРМ.Пользователь);
			ОписаниеПараметров.Вставить("ПользовательЗапуска", ВРМ.Клон);
			ОписаниеПараметров.Вставить("Запуск", ВРМ.Запуск);
			ПараметрыЗапуска.Вставить(Ссылка, ОписаниеПараметров);
		КонецЦикла;
		
		ОбработатьВРМ(СписокВРМ, "ЗапускВРМ", ПараметрыЗапуска, мОграниченияТеста.ТаймаутЗапускаКлиента);
		
	Иначе
		
		// Следующая попытка запуска ВРМ через 3 секунды
		ПодключитьОбработчикОжидания("ЗапуститьКлиентыВРМ", 3, Истина);
		
	КонецЕсли;

КонецПроцедуры // ЗапуститьКлиентыВРМ()

&НаКлиенте
// Загрузить ВРМ сценария
//
Процедура ЗагрузитьВРМ()
	
	МассивЗапущенныхВРМ = ТЦОбщий.СоответствиеВМассив(мЗапущенныеВРМ);	
	
	мВРМСценария = ТЦСервер.ЗапущенныеВРМ(мСвойстваСеанса.ИмяКомпьютера, мСвойстваСеанса.НомерСессии, мВРМТаймаут, МассивЗапущенныхВРМ);
	ТЦСервер.ЗагрузитьВРМ(мСвойстваСеанса.ИмяКомпьютера, мСвойстваСеанса.НомерСессии, мПродолжающиеРаботуВРМ);
	
	ОбработатьВРМ(мВРМСценария, "ЗагрузкаВРМ",, мОграниченияТеста.ТаймаутЗагрузкиСценарияКлиентом);
	
КонецПроцедуры // ЗагрузитьВРМ()

&НаКлиенте
// Запускает процесс выполнения указанной операции для всех ВРМ.
//
// Параметры:
//  СписокВРМ - Массив (СправочникСсылка.ТЦВП)
//  ОперацияВРМ - Строка, наименование операции
//  ПараметрыОперацииВРМ - Произвольный
//  ТаймаутОбработкиВРМ - Число, максимальное время ожидания ответа
//
Процедура ОбработатьВРМ(СписокВРМ,
                        ОперацияВРМ,
                        ПараметрыОперацииВРМ = Неопределено,
                        ТаймаутОбработкиВРМ)
						
	мСостоянияВРМ = Новый Соответствие;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СписокВРМ", СписокВРМ);
	ДополнительныеПараметры.Вставить("ОперацияВРМ", ОперацияВРМ);
	ДополнительныеПараметры.Вставить("ПараметрыОперацииВРМ", ПараметрыОперацииВРМ);
	ДополнительныеПараметры.Вставить("ТаймаутОбработкиВРМ", ТаймаутОбработкиВРМ);
	ДополнительныеПараметры.Вставить("ИндексВРМКОбработке", 0);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОбработкуВРМ", ЭтотОбъект, ДополнительныеПараметры);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
	
КонецПроцедуры // ОбработатьВРМ()

// Выполняет операцию, указанную в ДополнительныеПараметры.ОперацияВРМ для всех ВРМ.
//
// Параметры:
//
//  Результат				- Неопределено/ИнформацияОбОшибке - Результат обработки конкретного ВРМ.
//  ДополнительныеПараметры - Структура
//
&НаКлиенте
Процедура ВыполнитьОбработкуВРМ(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("ИнформацияОбОшибке") Тогда
		
		Если ДополнительныеПараметры.Свойство("ТекущийПорт")
			 И ДополнительныеПараметры.Свойство("ТекущийВРМ") Тогда
			 
			ТЦОбщий.ЗаписатьВЖурнал("Описание ошибки: " + ТЦОбщий.ИнформациюОбОшибкеВСтроку(Результат) + Символы.ПС +
			                        "Локальный адрес агента: " + мАдресАгента + Символы.ПС +
			                        "Адрес получателя: " + ДополнительныеПараметры.ТекущийВРМ + Символы.ПС +
				                    "Порт: " + ДополнительныеПараметры.ТекущийПорт + Символы.ПС
									, "ИсключениеПриОтправкеСообщенияАгентом", ПредопределенноеЗначение("Перечисление.ТЦСтатусСообщения.Ошибка"));

		Иначе
			ТЦОбщий.ЗаписатьВЖурнал(Результат, "Агент");
		КонецЕсли;

	КонецЕсли;
	
	Если ДополнительныеПараметры.ИндексВРМКОбработке <= ДополнительныеПараметры.СписокВРМ.ВГраница() Тогда
		
		ВРМ = ДополнительныеПараметры.СписокВРМ[ДополнительныеПараметры.ИндексВРМКОбработке];
		ОперацияВРМ = ДополнительныеПараметры.ОперацияВРМ;
		ПараметрыОперацииВРМ = ДополнительныеПараметры.ПараметрыОперацииВРМ;
		
		ПараметрыВызова = Новый Структура;
		ПараметрыВызова.Вставить("ВРМ", ВРМ);
		ПараметрыВызова.Вставить("Параметры", ДополнительныеПараметры.ПараметрыОперацииВРМ);
		
		СостояниеВРМ = Новый Структура;
		СостояниеВРМ.Вставить("Выполнено", Ложь);
		СостояниеВРМ.Вставить("Результат");
		СостояниеВРМ.Вставить("НомерВРМ", мНомераВРМ[ВРМ]);
		
		Если ОперацияВРМ = "ЗапускВРМ" Тогда
			СостояниеВРМ.Вставить("Пользователь", ПараметрыОперацииВРМ[ВРМ].Пользователь);
			СостояниеВРМ.Вставить("Запуск", ПараметрыОперацииВРМ[ВРМ].Запуск);
		КонецЕсли;
		
		мСостоянияВРМ.Вставить(ВРМ, СостояниеВРМ);
		
		ДополнительныеПараметры.ИндексВРМКОбработке = ДополнительныеПараметры.ИндексВРМКОбработке + 1;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОбработкуВРМ", ЭтотОбъект, ДополнительныеПараметры);
		РезультатВычисления = Вычислить(ОперацияВРМ + "(ОписаниеОповещения, ПараметрыВызова)");
		
	Иначе
		
		мНачалоОперации = ТекущаяДата();
		мТаймаутОбработкиВРМ = ДополнительныеПараметры.ТаймаутОбработкиВРМ;
		мОперацияВРМ = ДополнительныеПараметры.ОперацияВРМ;
		мСостояниеЗадания = кОжидениеОтветаВРМ;
		ПодключитьОбработчикОжидания("ОжиданиеОтветаВРМ", 1);
		
	КонецЕсли;

КонецПроцедуры // ВыполнитьОбработкуВРМ()

&НаКлиенте
// Удаляет ссылки на неответившие ВРМ из различных массивов ВРМ
Процедура УдалитьВРМИзМассивов(ВРМНеЗавершившиеОперацию)
	
	НаборМассивов = Новый Массив;
	НаборМассивов.Добавить(мВРМСценария);
	НаборМассивов.Добавить(мВРМСценарияБезРезерва);
	НаборМассивов.Добавить(мВРМСценарияБезПродолжающихРаботу);
	НаборМассивов.Добавить(мПродолжающиеРаботуВРМ);
	
	Для Каждого ТекущийМассив Из НаборМассивов Цикл
		
		Если ТекущийМассив = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого НеответившийВРМ Из ВРМНеЗавершившиеОперацию Цикл
			Индекс = ТекущийМассив.Найти(НеответившийВРМ);
			Если Индекс <> Неопределено Тогда
				ТекущийМассив.Удалить(Индекс);
			КонецЕсли;			
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
// Ожидать ответа от ВРМ на посланное ранее сообщение
//
Процедура ОжиданиеОтветаВРМ()
	
	ПараметрыСообщенияОТаймауте = Неопределено;
	ВРМНеЗавершившиеОперацию	= Новый Массив;
	
	Попытка
		Если ВсеВРМОтветили(мСостоянияВРМ) Тогда
			ОтключитьОбработчикОжидания("ОжиданиеОтветаВРМ");
			мСостояниеЗадания = Неопределено;
			РезультатВычисления = Вычислить(мОперацияВРМ + "Выполнено()");
		Иначе

			Если ТекущаяДата() - мНачалоОперации > мТаймаутОбработкиВРМ Тогда
				мСостояниеЗадания = Неопределено;
				ПараметрыСообщенияОТаймауте = Вычислить(мОперацияВРМ + "Таймаут(ВРМНеЗавершившиеОперацию)");
			КонецЕсли;
		КонецЕсли;
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "Агент");
		ТекстОшибки = "Агент получил ошибку при взаимодействии с ВРМ:" + Символы.ПС + ТЦОбщий.ИнформациюОбОшибкеВСтроку(ИнформацияОбОшибке());
		ТЦСервер.ОтправитьСообщение(мТест, Объект.Ссылка, кВыполненоСОшибкой, ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	Если ПараметрыСообщенияОТаймауте <> Неопределено Тогда
		
		ОтключитьОбработчикОжидания("ОжиданиеОтветаВРМ");
		ТЦСервер.ОтправитьСообщение(мТест, Объект.Ссылка, кВыполненоСОшибкой, ПараметрыСообщенияОТаймауте);
		
		// Попытаемся выгрузить ВРМ, которым не удалось завершить операцию
		НачатьЗавершениеРаботы(, ВРМНеЗавершившиеОперацию);
		
	КонецЕсли;
	
КонецПроцедуры // ОжиданиеОтветаВРМ()

&НаКлиенте
// Определить, все ли ВРМ ответили на сообщение
//
// Параметры:
//  СписокВРМ - Массив, список результатов ответов ВРМ
//
// Возвращаемое значение:
//  Булево - Истина, если все ВРМ ответили
//
Функция ВсеВРМОтветили(СписокВРМ)
	
	Для каждого ВРМ Из СписокВРМ Цикл
		Если ВРМ.Значение.Выполнено = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ВсеВРМОтветили()

&НаКлиенте
// Получить параметры сообщения для ВРМ
//
// Параметры:
//  	Состояние - ПеречислениеСсылка.ТЦСостояние
//      ПараметрыВРМ - Произвольный
//
// Возвращаемое значение:
//  	ПараметрыСообщения - Структура
//      	Состояние - ПеречислениеСсылка.ТЦСостояние
//          Параметры - Произвольный
//
Функция ПараметрыСообщенияДляВРМ(Состояние, ПараметрыВРМ = Неопределено)
	
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Состояние", Состояние);
	ПараметрыСообщения.Вставить("Параметры", ПараметрыВРМ);
	
	Возврат ПараметрыСообщения;
	
КонецФункции // ПараметрыСообщенияДляВРМ()

&НаКлиенте
// Получить параметры сообщения для описания таймаута
//
// Параметры:
//  	Сообщение - Строка
//      ИмяКомпьютера - Строка
//
// Возвращаемое значение:
//  	ПараметрыСообщенияОбОшибке - Структура
//      	Результат - Произвольный
//          Состояние - ПеречислениеСсылка.ТЦСостояние
//			ВесОшибки - Число
//
Функция ПараметрыСообщенияОТаймауте()
	
	ПараметрыСообщенияОТаймауте = ТЦКлиент.ПараметрыСообщенияАгентаОбОшибке(мСостояние);
	ПараметрыСообщенияОТаймауте.Вставить("ЭтоТаймаут", Истина);
	Возврат ПараметрыСообщенияОТаймауте;
	
КонецФункции

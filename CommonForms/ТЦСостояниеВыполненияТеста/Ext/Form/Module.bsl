&НаКлиенте
Перем мТест;
&НаКлиенте
Перем кНеопределено;
&НаКлиенте
Перем кУспешно;
&НаКлиенте
Перем кПредупреждение;
&НаКлиенте
Перем кОшибка;
&НаКлиенте
Перем мОстановлен;
&НаКлиенте
Перем мВыполняетсяМониторинг;
&НаКлиенте
Перем мЗакрытьОкно;


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

&НаКлиенте
// Обработчик открытия формы
//
Процедура ПриОткрытии(Отказ)
	
	мЗакрытьОкно = Ложь;
	ИнициализироватьМониторингТеста();
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	мЗакрытьОкно = Ложь;
	Если Не мВыполняетсяМониторинг Тогда
		ИнициализироватьМониторингТеста();
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ФОРМОЙ

&НаКлиенте
// Инициализирует процесс наблюдения за состоянием теста
//
//
Процедура ИнициализироватьМониторингТеста()

	мВыполняетсяМониторинг = Ложь;
	Попытка
		ДатаНачала = ТекущаяДата();
		Инициализировать();
		//При запуске теста взвести статус
		ТЦСервер.УстановитьСтатусВыполненияТеста(Истина);
		ПриВыполненииТестирования();
	Исключение
		мВыполняетсяМониторинг = Ложь;
		Ошибка = ИнформацияОбОшибке();
		ТЦОбщий.ЗаписатьВЖурнал(Ошибка);
		ТЦКлиент.СообщитьОбОшибке(Ошибка, ДатаНачала, ТекущаяДата());
	КонецПопытки;

КонецПроцедуры // ИнициализироватьМониторингТеста()

&НаКлиенте
// Обработчик выполнения тестирования
//
Процедура ПриВыполненииТестирования()
	
	Попытка
		ДатаНачала = ТекущаяДата();
		СостояниеТеста = ПриВыполненииТестированияНаСервере(мТест);
		
		Если СостояниеТеста.МаксимальноеКоличествоИтераций < 2 ИЛИ НЕ ОценкаПроизводительностиИспользуется Тогда
			Элементы.ДиаграммаПроизводительности.Видимость = Ложь;
		Иначе
			Элементы.ДиаграммаПроизводительности.Видимость = Истина;
		КонецЕсли;

		Если ВРМОсталосьЗапустить = 0 И ВРМЗапущено = 0 Тогда
			Элементы.ДекорацияКлонированиеИРасчет.Видимость = Истина;
			Элементы.ДекорацияКлонированиеИРасчет.Заголовок = "Идет клонирование пользователей и подготовка сценария запуска";
		Иначе
			Элементы.ДекорацияКлонированиеИРасчет.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ДекорацияЗапущеноВРМТекст.Заголовок = ВРМЗапущеноСтрока;
		Элементы.ДекорацияТекущаяИтерацияТекст.Заголовок = Формат(СостояниеТеста.ТекущаяИтерация, "ЧДЦ=; ЧРГ=' '; ЧН=0") + " из " + Формат(СостояниеТеста.МаксимальноеКоличествоИтераций, "ЧДЦ=; ЧРГ=' '; ЧН=0");
		
		Элементы.ДекорацияВсегоОшибокТекст.Заголовок = Формат(СостояниеТеста.ОбщееКоличествоОшибок, "ЧДЦ=; ЧРГ=' '; ЧН=0");
		Если СостояниеТеста.КритическоеКоличествоОшибокТеста = 0 Тогда
			Элементы.ДекорацияВсегоОшибокПорог.Заголовок = "(порог не установлен)";
		Иначе
			Элементы.ДекорацияВсегоОшибокПорог.Заголовок = "(порог = " + Формат(СостояниеТеста.КритическоеКоличествоОшибокТеста, "ЧДЦ=; ЧРГ=' '; ЧН=0") + ")";
		КонецЕсли;
		
		Элементы.ДекорацияОшибкиТекущейИтерацииТекст.Заголовок = Формат(СостояниеТеста.ТекущееКоличествоОшибок, "ЧДЦ=; ЧРГ=' '; ЧН=0");
		Если СостояниеТеста.КритическоеКоличествоОшибокИтерации = 0 Тогда
			Элементы.ДекорацияОшибкиТекущейИтерацииПорог.Заголовок = "(порог не установлен)";
		Иначе
			Элементы.ДекорацияОшибкиТекущейИтерацииПорог.Заголовок = "(порог = " + Формат(СостояниеТеста.КритическоеКоличествоОшибокИтерации, "ЧДЦ=; ЧРГ=' '; ЧН=0") + ")";
		КонецЕсли;

		Если СостояниеТеста.ПаузаПослеЗапускаВРМ И СостояниеТеста.ВРМЗапущены Тогда
			ОтключитьОбработчикОжидания("ПриВыполненииТестирования");
			ТЦСервер.УстановитьСтатусВыполненияТеста(Ложь);
			
			ОписаниеОповещенияДляПродолженияТеста = Новый ОписаниеОповещения("ПродолжитьВыполнениеТеста", ЭтотОбъект);
			ПоказатьПредупреждение(ОписаниеОповещенияДляПродолженияТеста, "ВРМ запущены. Нажмите ""ОК"", для продолжения выполнения теста.");
			Возврат;
			
		КонецЕсли;
		
		РезультатТеста = СостояниеТеста.Результат;
		
		Если РезультатТеста = кНеопределено Тогда
			ПодключитьОбработчикОжидания("ПриВыполненииТестирования", 3);
			Возврат;
		Иначе
			ОтключитьОбработчикОжидания("ПриВыполненииТестирования");
			Элементы.Стоп.Доступность = Ложь;
			ЕстьОшибки = РезультатТеста = кОшибка Или РезультатТеста = кПредупреждение;
			
			Если ЕстьОшибки Тогда
				ТЦКлиент.СообщитьОбОшибке(
					СостояниеТеста.ИнформацияОбОшибке,
					СостояниеТеста.ДатаНачала,
					СостояниеТеста.ДатаОкончания);
				мОстановлен = Истина;
				ТЦКлиент.ВыполнитьТестирование();
			КонецЕсли;
			
			мОстановлен = Истина;
			ТЦКлиент.ПоказатьРезультатыТеста(мТест);
			мВыполняетсяМониторинг = Ложь;
			Оповестить("ТестОкончен");
			
			//При остановке теста записать результат и дату окончания в справочник ТЦУправлениеТестом
			ТЦСервер.УстановитьРезультатТеста(РезультатТеста);
		КонецЕсли;
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ТЦОбщий.ЗаписатьВЖурнал(Ошибка);
		ТЦКлиент.СообщитьОбОшибке(Ошибка, ДатаНачала, ТекущаяДата());
		мВыполняетсяМониторинг = Ложь;
		мОстановлен = Истина;
		ТЦКлиент.ВыполнитьТестирование();
		ОтключитьОбработчикОжидания("ПриВыполненииТестирования");
	КонецПопытки;
	
КонецПроцедуры // ПриВыполненииТестирования()

&НаКлиенте
Процедура ПродолжитьВыполнениеТеста(ДополнительныеПараметры) Экспорт
	
	ТЦСервер.ПродолжитьТестПослеПаузыВРМ(мТест);
	ПодключитьОбработчикОжидания("ПриВыполненииТестирования", 1);
	
КонецПроцедуры

&НаСервере
// Обновить информацию о состоянии теста на стороне сервера
//
// Параметры:
//  Тест - ДокументСсылка.ТЦТест
//
// Возвращаемое значение:
//  Структура - описание состояния тестирования
//
Функция ПриВыполненииТестированияНаСервере(Тест)
	
	СостояниеТеста = ТЦСервер.СостояниеТеста(Тест);
	ЗапущенныеИОставшиесяВРМ = ТЦСервер.ПолучитьКоличествоЗапущенныхИНезапущенных();
	Если СостояниеТеста <> Неопределено Тогда
	
		НужноОбновитьДиаграмму = Ложь;
		Если СостояниеТеста.МаксимальноеКоличествоИтераций > 1 И ОценкаПроизводительностиИспользуется Тогда
			
			НужноОбновитьДиаграмму = (ТекущаяИтерация = 0);
			
			Если ТекущаяИтерация <> СостояниеТеста.ТекущаяИтерация И СостояниеТеста.ЭтоДинамическийТест Тогда
				НужноОбновитьДиаграмму = Истина;
			КонецЕсли;
			
			Если СостояниеТеста.Состояние = Перечисления.ТЦСостояние.ЗаписьРезультатов
				Или СостояниеТеста.Состояние = Перечисления.ТЦСостояние.УдалениеДанных
				И НЕ БылоОбновлениеПриЗаписи Тогда
				НужноОбновитьДиаграмму = Истина;
				БылоОбновлениеПриЗаписи = Истина;
			КонецЕсли;
			
		КонецЕсли;

		Если ТекущаяИтерация <> СостояниеТеста.ТекущаяИтерация Тогда
			ТекущаяИтерация = СостояниеТеста.ТекущаяИтерация;
			БылоОбновлениеПриЗаписи = Ложь;
		КонецЕсли;
		
		НомерСостояния = ТЦСервер.НомерСостояния(СостояниеТеста.Состояние);
		ОбновитьСостояние(НомерСостояния);
		ОбновитьИндикаторы(СостояниеТеста, НомерСостояния, ЗапущенныеИОставшиесяВРМ.ВРМЗапущено, ЗапущенныеИОставшиесяВРМ.ВРМОсталосьЗапустить);
		
		Если НужноОбновитьДиаграмму Тогда
			НастроитьДиаграмму();
			ОбновитьДиаграмму(Тест);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СостояниеТеста;
	
КонецФункции // ПриВыполненииТестированияНаСервере()

&НаСервере
// Обновить индикаторы прогресса выполнения теста
//
// Параметры:
//  Состояние - Число, номер текущего состояния
//
Процедура ОбновитьИндикаторы(СостояниеТеста, НомерСостояния, КоличествоВРМЗапущено, КоличествоВРМОсталосьЗапустить)
	
	Состояние	= СостояниеТеста.Состояние;
	Прошло		= ТекущаяДата() - СостояниеТеста.НачалоСостояния;
	МаксимальноеКоличествоИтераций	= СостояниеТеста.МаксимальноеКоличествоИтераций;
	ВРМЗапущено			= КоличествоВРМЗапущено;
	ВРМОсталосьЗапустить= КоличествоВРМОсталосьЗапустить;
	
	ВсегоВРМ = ВРМЗапущено + ВРМОсталосьЗапустить;
	Если ВсегоВРМ <> 0 Тогда
		ВРМЗапущеноПрогресс = Окр(ВРМЗапущено * 100 / ВсегоВРМ);
	Иначе
		ВРМЗапущеноПрогресс = 0;
	КонецЕсли;
	
	Если ВсегоВРМ <> 0 Тогда
		ВРМЗапущеноСтрока = Формат(ВРМЗапущено, "ЧДЦ=; ЧРГ=' '; ЧН=0") + " из " + Формат(ВсегоВРМ, "ЧДЦ=; ЧРГ=' '; ЧН=0");
	Иначе
		ВРМЗапущеноСтрока = "      ";
	КонецЕсли;
	
	Если Состояние = Перечисления.ТЦСостояние.Подготовка Тогда
		ЛокальныйПрогресс = ?(Прошло > СостояниеТеста.ТаймаутПодготовки
			Или СостояниеТеста.ТаймаутПодготовки = 0, 1,
			Прошло / СостояниеТеста.ТаймаутПодготовки);
	ИначеЕсли Состояние = Перечисления.ТЦСостояние.Инициализация Тогда
		ЛокальныйПрогресс = ?(Прошло > СостояниеТеста.ТаймаутИнициализации
			Или СостояниеТеста.ТаймаутИнициализации = 0, 1,
			Прошло / СостояниеТеста.ТаймаутИнициализации);
	ИначеЕсли Состояние = Перечисления.ТЦСостояние.Выполнение Тогда
		ЛокальныйПрогресс = ?(Прошло > СостояниеТеста.ТаймаутВыполнения
			Или СостояниеТеста.ТаймаутВыполнения = 0, 1,
			Прошло / СостояниеТеста.ТаймаутВыполнения);
	ИначеЕсли Состояние = Перечисления.ТЦСостояние.ЗаписьРезультатов Тогда
		ЛокальныйПрогресс = ?(Прошло > СостояниеТеста.ТаймаутЗаписиРезультатов
			Или СостояниеТеста.ТаймаутЗаписиРезультатов = 0, 1,
			Прошло / СостояниеТеста.ТаймаутЗаписиРезультатов);
	ИначеЕсли Состояние = Перечисления.ТЦСостояние.УдалениеДанных Тогда
		ЛокальныйПрогресс = ?(Прошло > СостояниеТеста.ТаймаутУдаленияДанных
			Или СостояниеТеста.ТаймаутУдаленияДанных = 0, 1,
			Прошло / СостояниеТеста.ТаймаутУдаленияДанных);
	ИначеЕсли Состояние = Перечисления.ТЦСостояние.Неактивен Тогда
		ЛокальныйПрогресс = 1;
	КонецЕсли;
	
	Прогресс = (ЛокальныйПрогресс + НомерСостояния - 1) * 100;
	
КонецПроцедуры // ОбновитьИндикаторы()

&НаСервере
// Процедура настраивает диаграмму производительности
//
Процедура НастроитьДиаграмму()
	
	ДиаграммаПроизводительности = Новый Диаграмма;
	ДиаграммаПроизводительности.ЦветФона	= Новый  Цвет(255, 255, 255);
	ДиаграммаПроизводительности.Рамка		= Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
	ДиаграммаПроизводительности.ТипДиаграммы        = ТипДиаграммы.Гистограмма;
	ДиаграммаПроизводительности.ВидПодписей         = ВидПодписейКДиаграмме.Значение;
	ДиаграммаПроизводительности.ПоложениеПодписей   = ПоложениеПодписейКДиаграмме.Край;
	ДиаграммаПроизводительности.ОтображатьЛегенду   = Ложь;
	ДиаграммаПроизводительности.ФорматЗначенийВПодписях = "ЧН=' '";
	ДиаграммаПроизводительности.ОбластьПостроения.ФорматШкалыЗначений = "ЧЦ=3; ЧДЦ=2";
	
	ДиаграммаПроизводительности.ОбластьЗаголовка.Текст	= "Производительность (количество ВРМ, APDEX)";
	ДиаграммаПроизводительности.ОбластьЗаголовка.Шрифт	= Новый Шрифт(ДиаграммаПроизводительности.ШрифтПодписей,,12);
	ДиаграммаПроизводительности.ОбластьЗаголовка.Верх	= 0;
	ДиаграммаПроизводительности.ОбластьЗаголовка.Низ	= 0.1;
	ДиаграммаПроизводительности.ОбластьЗаголовка.Лево	= 0.3;
	ДиаграммаПроизводительности.ОбластьЗаголовка.Право	= 0.7;
	ДиаграммаПроизводительности.ОтображатьЗаголовок		= Истина;
	
	ДиаграммаПроизводительности.ОбластьПостроения.Шрифт	= Новый Шрифт(ДиаграммаПроизводительности.ШрифтПодписей,,10);
	ДиаграммаПроизводительности.ОбластьПостроения.Право = 0.975;
	ДиаграммаПроизводительности.ОбластьПостроения.Лево	= 0.025;
	ДиаграммаПроизводительности.ОбластьПостроения.Верх	= 0.1;
	ДиаграммаПроизводительности.ОбластьПостроения.Низ	= 1;
	
	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПлатформы = СисИнфо.ВерсияПриложения;
	
	Если ТЦОбщий.СравнитьВерсии(ВерсияПлатформы, "8.3.5") >= 0 Тогда
		Анимация = Вычислить("АнимацияДиаграммы");
		ДиаграммаПроизводительности.Анимация = Анимация.НеИспользовать;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура обновляет диаграмму производительности
//
Процедура ОбновитьДиаграмму(Тест)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЦТестПроизводительностьИтераций.APDEX,
	               |	ТЦТестПроизводительностьИтераций.КоличествоВРМ,
	               |	ТЦТестПроизводительностьИтераций.Ссылка.ПороговыйAPDEX КАК ПороговыйAPDEX,
	               |	ТЦТестПроизводительностьИтераций.НомерИтерации
	               |ИЗ
	               |	Документ.ТЦТест.ПроизводительностьИтераций КАК ТЦТестПроизводительностьИтераций
	               |ГДЕ
	               |	ТЦТестПроизводительностьИтераций.Ссылка = &Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТЦТестПроизводительностьИтераций.НомерИтерации";
				   
	Запрос.УстановитьПараметр("Ссылка", Тест);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВсегоТочек = 0;
	ТаблицаРезультатов = РезультатЗапроса.Выгрузить();
	Для Каждого Результат Из ТаблицаРезультатов Цикл
		
		НоваяТочка = ДиаграммаПроизводительности.Точки.Добавить(Строка(Результат.КоличествоВРМ));
		НоваяТочка.Текст = Строка(Результат.КоличествоВРМ);
		НоваяТочка.Значение = "Количество ВРМ: " + Результат.КоличествоВРМ + "; APDEX: " + Строка(Результат.APDEX);
		ВсегоТочек = ВсегоТочек + 1;		
		
	КонецЦикла;
	
	Если ВсегоТочек > 0 и ВсегоТочек < 10 Тогда
		Для Сч = ВсегоТочек + 1 По 10 Цикл
			НоваяТочка = ДиаграммаПроизводительности.Точки.Добавить("");
		КонецЦикла;
	КонецЕсли;
	
	НоваяСерия = ДиаграммаПроизводительности.Серии.Добавить("");
	
	Индекс = 0;
	Для Каждого Точка Из ДиаграммаПроизводительности.Точки Цикл
		
		Если Индекс = ТаблицаРезультатов.Количество() Тогда
			Прервать;
		КонецЕсли;
		
		ДиаграммаПроизводительности.УстановитьЗначение(ДиаграммаПроизводительности.Точки[Индекс],
													ДиаграммаПроизводительности.Серии[0],
													Окр(ТаблицаРезультатов[Индекс].APDEX,3),,
													"Итерация №" + ТаблицаРезультатов[Индекс].НомерИтерации
													+ Символы.ПС + "Количество ВРМ: " + ТаблицаРезультатов[Индекс].КоличествоВРМ
													+ Символы.ПС + "APDEX: " + ТаблицаРезультатов[Индекс].APDEX);
		
		Точка.ПриоритетЦвета = Истина;
		Если ТаблицаРезультатов[Индекс].APDEX < ТаблицаРезультатов[Индекс].ПороговыйAPDEX Тогда
			Точка.Цвет = Новый Цвет(200, 19, 33);
		Иначе
			Точка.Цвет = Новый Цвет(32, 162, 68);
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Обновить состояние шага
//
// Параметры:
//  Состояние - Число, номер текущего состояния
//
Процедура ОбновитьСостояние(НомерСостояния)

	Б = БиблиотекаКартинок;
	Н = ?(НомерСостояния = 1, 2, ?(НомерСостояния > 1, 3, 1));
	Элементы.КартинкаПодготовка.Картинка = Б["ТЦПодготовка" + Н];
	Н = ?(НомерСостояния = 2, 2, ?(НомерСостояния > 2, 3, 1));
	Элементы.КартинкаИнициализация.Картинка = Б["ТЦИнициализация" + Н];
	Н = ?(НомерСостояния = 3, 2, ?(НомерСостояния > 3, 3, 1));
	Элементы.КартинкаВыполнение.Картинка = Б["ТЦВыполнение" + Н];
	Н = ?(НомерСостояния = 4, 2, ?(НомерСостояния > 4, 3, 1));
	Элементы.КартинкаЗаписьРезультатов.Картинка = Б["ТЦЗаписьРезультатов" + Н];
	Н = ?(НомерСостояния = 5, 2, ?(НомерСостояния > 5, 3, 1));
	Элементы.КартинкаУдалениеДанных.Картинка = Б["ТЦУдалениеДанных" + Н];
	
КонецПроцедуры // ОбновитьСостояние()

&НаКлиенте
// Инициализация данных
//
Процедура Инициализировать()
	
	мОстановлен = Ложь;
	мВыполняетсяМониторинг = Истина;
	ТекущаяИтерация = 0;
	БылоОбновлениеПриЗаписи = Ложь;
	ТестИСценарий = ТЦСервер.ТекущийТестИСценарий();
	
	Если ТестИСценарий = Неопределено Тогда
		ТестИСценарий = ТЦСервер.ПоследнийТестИСценарий();
	КонецЕсли;
	
	Если ТестИСценарий = Неопределено Тогда
		ПоказатьПредупреждение(, "Текущий тест не обнаружен", , "Ошибка");
		Закрыть();
	КонецЕсли;
	
	мТест = ТестИСценарий.Тест;
	ЭтаФорма.Заголовок = "Состояние теста по сценарию """ + СокрЛП(ТестИСценарий.Сценарий) + """";
	Элементы.Стоп.Доступность = Истина;
	
	ИмяНеопределено = "Перечисление.ТЦРезультатВыполнения.Неопределено";
	ИмяУспешно = "Перечисление.ТЦРезультатВыполнения.Успешно";
	ИмяОшибка = "Перечисление.ТЦРезультатВыполнения.Ошибка";
	ИмяПредупреждение = "Перечисление.ТЦРезультатВыполнения.Предупреждение";
	кНеопределено = ПредопределенноеЗначение(ИмяНеопределено);
	кУспешно = ПредопределенноеЗначение(ИмяУспешно);
	кПредупрежедение = ПредопределенноеЗначение(ИмяПредупреждение);
	кОшибка = ПредопределенноеЗначение(ИмяОшибка);
	
КонецПроцедуры // Инициализировать()

&НаКлиенте
Процедура Стоп(Команда)
	
	Текст = "Прервать выполняющийся тест?";
	
	ОписаниеОповещенияПрерывания = Новый ОписаниеОповещения("ОбработатьОтветПрерывания", ЭтотОбъект);
	
	ПоказатьВопрос(ОписаниеОповещенияПрерывания,
		Текст,
		РежимДиалогаВопрос.ДаНет,,
		КодВозвратаДиалога.Нет,
		"Тест-центр");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветПрерывания(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если ТЦСервер.ТестВыполняется(мТест) Тогда
		мОстановлен = Истина;
		ТЦСервер.ПрерватьВыполнениеТеста(мТест);
		Элементы.Стоп.Доступность = Ложь;
		мВыполняетсяМониторинг = Ложь;
		ТЦКлиент.ВыполнитьТестирование();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если мЗакрытьОкно
		ИЛИ (ЗавершениеРаботы <> Неопределено И ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не мОстановлен И Не ЗавершениеРаботы Тогда
		
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		
		Текст =
			"Закрытие окна состояния выполнения теста не завершит выполнение "
			"процесса тестирования, который будет продолжаться на стороне "
			"сервера в отдельном фоновом задании. Если тестирование все еще "
			"будет выполняться во время повторного открытия окна состояния "
			"выполнения теста, то будет отображен текущий процесс тестирования.
			|
			|Продолжить?";
			
		ОписаниеОповещенияВопросаЗакрытия = Новый ОписаниеОповещения("ОбработатьЗакрытиеОкна", ЭтотОбъект);
			
		ПоказатьВопрос(
			ОписаниеОповещенияВопросаЗакрытия,
			Текст,
			РежимДиалогаВопрос.ДаНет,,
			КодВозвратаДиалога.Нет,
			"Тест-центр");
		
	КонецЕсли;
	
	мОстановлен = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеОкна(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	мЗакрытьОкно = Истина;
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОценкаПроизводительностиИспользуется = ТЦСервер.ОценкаПроизводительностиИспользуется();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧЕНИЕ

// Получить объект инструментов (см. раздел ИНСТРУМЕНТЫ)
//
// Возвращаемое значение:
//  Объект "Addin.ETP.Tools"
//
Функция ПолучитьИнструменты() Экспорт
	
	ПодключитьВнешнийКомпонент();
	Возврат СоздатьИнструменты();
	
КонецФункции // ПолучитьИнструменты()

// Начать получение объекта инструментов (см. раздел ИНСТРУМЕНТЫ)
//
&НаКлиенте
Процедура НачатьПолучениеИнструментов(ОписаниеОповещения) Экспорт
	
	НачатьПолучениеОбъектаВК(ОписаниеОповещения, "Addin.ETP.Tools");
	
КонецПроцедуры

// Получить объект обработки сообщений (см. раздел СООБЩЕНИЯ)
//
// Возвращаемое значение:
//  Объект "Addin.ETP.Messenger"
//
Функция ПолучитьОбработчикСообщений() Экспорт
	
	ПодключитьВнешнийКомпонент();
	Возврат СоздатьОбработчикСообщений();
	
КонецФункции // ПолучитьОбработчикСообщений()

// Начать получение объекта обработки сообщений (см. раздел СООБЩЕНИЯ)
//
&НаКлиенте
Процедура НачатьПолучениеСообщений(ОписаниеОповещения) Экспорт
	
	НачатьПолучениеОбъектаВК(ОписаниеОповещения, "Addin.ETP.Messenger");
	
КонецПроцедуры

// Получить инструмент работы с SQL Server (см. раздел MICROSOFT SQL SERVER)
//
// Возвращаемое значение:
//  Объект "Addin.ETP.MSSQL"
//
Функция ПолучитьMSSQL() Экспорт
	
	ПодключитьВнешнийКомпонент();
	Возврат СоздатьMSSQL();
	
КонецФункции // ПолучитьMSSQL()

// Получить инструмент чтения технологического журнала
// (см. раздел ТЕХНОЛОГИЧЕСКИЙ ЖУРНАЛ)
//
// Возвращаемое значение:
//  Объект "Addin.ETP.TechLog"
//
Функция ПолучитьТЖ() Экспорт
	
	ПодключитьВнешнийКомпонент();
	Возврат СоздатьТЖ();
	
КонецФункции // ПолучитьТЖ()

// Получить инструмент работы со счетчиками производительности
// (см. раздел СЧЕТЧИКИ ПРОИЗВОДИТЕЛЬНОСТИ)
//
// Возвращаемое значение:
//  Объект "Addin.ETP.Counters"
//
Функция ПолучитьСчетчики() Экспорт
	
	ПодключитьВнешнийКомпонент();
	Возврат СоздатьСчетчики();
	
КонецФункции // ПолучитьСчетчики()

// Создать объект инструментов (см. раздел ИНСТРУМЕНТЫ)
//
// Возвращаемое значение:
//  Объект "Addin.ETP.Tools"
//
Функция СоздатьИнструменты()
	
	Возврат Новый("Addin.ETP.Tools");
	
КонецФункции // СоздатьИнструменты()

// Создать объект обработки сообщений (см. раздел СООБЩЕНИЯ)
//
// Возвращаемое значение:
//  Объект "Addin.ETP.Messenger"
//
Функция СоздатьОбработчикСообщений()
	
	Возврат Новый("Addin.ETP.Messenger");
	
КонецФункции // СоздатьОбработчикСообщений()

// Создать инструмент работы с SQL Server (см. раздел MICROSOFT SQL SERVER)
//
// Возвращаемое значение:
//  Объект "Addin.ETP.MSSQL"
//
Функция СоздатьMSSQL()
	
	Возврат Новый("Addin.ETP.MSSQL");
	
КонецФункции // СоздатьMSSQL()

// Создать инструмент чтения технологического журнала
// (см. раздел ТЕХНОЛОГИЧЕСКИЙ ЖУРНАЛ)
//
// Возвращаемое значение:
//  Объект "Addin.ETP.TechLog"
//
Функция СоздатьТЖ()
	
	Возврат Новый("Addin.ETP.TechLog");
	
КонецФункции // СоздатьТЖ()

// Создать инструмент работы со счетчиками производительности
// (см. раздел СЧЕТЧИКИ ПРОИЗВОДИТЕЛЬНОСТИ)
//
// Возвращаемое значение:
//  Объект "Addin.ETP.Counters"
//
Функция СоздатьСчетчики()
	
	Возврат Новый("Addin.ETP.Counters");
	
КонецФункции // СоздатьСчетчики()

// Подключить внешнюю компоненту КИП
//
Процедура ПодключитьВнешнийКомпонент()
	
	ОтладкаРазрешена = Ложь;
	
	Если Не ОтладкаРазрешена Тогда
		ИмяКомпонента = "ОбщийМакет.КипВнешнийКомпонент";
	
		Если Не ПодключитьВнешнююКомпоненту(ИмяКомпонента, "ETP") Тогда
			#Если Клиент Тогда
				УстановитьВнешнююКомпоненту(ИмяКомпонента);
			#КонецЕсли
			
			Если Не ПодключитьВнешнююКомпоненту(ИмяКомпонента, "ETP") Тогда
				ВызватьИсключение "Ошибка подключения внешнего компонента.";
			КонецЕсли;
		КонецЕсли;
	Иначе
		УспешноПодключено = ПодключитьВнешнююКомпоненту(
		#Если Клиент Тогда
			"C:\Projects\ETPAddin\Bin\Debug-Win32\AddInNative\AddInNative.dll",
		#Иначе
			"C:\Projects\ETPAddin\Bin\Debug-x64\AddInNative\AddInNative.dll",
		#КонецЕсли
			"ETP",
			ТипВнешнейКомпоненты.Native);
		
		Если Не УспешноПодключено Тогда
			ВызватьИсключение "Ошибка подключения внешнего компонента.";
		КонецЕсли;
	КонецЕсли;
	
	Инструменты = СоздатьИнструменты();
	ПодключеннаяВерсия = ВерсияКомпонента(Инструменты);
	ТребуемаяВерсия = "2.0.5.48";
	
	Если ПодключеннаяВерсия <> ТребуемаяВерсия Тогда
		//ВызватьИсключение
		//	"Версия подключенного внешнего компонента ("
		//	+ ПодключеннаяВерсия
		//	+ ") не совпадает с требуемой версией ("
		//	+ ТребуемаяВерсия
		//	+ "). Для устранения несоответствия версий, выгрузите всех клиентов"
		//	" и перезагрузите сервер 1С:Предприятия этой информационной базы.";
	КонецЕсли;
	
КонецПроцедуры // ПодключитьВнешнийКомпонент()

// Начать подключение внешней компоненты КИП
//
//	ОписаниеОповещения - ОписаниеОповещения
//
&НаКлиенте
Процедура НачатьПодключениеВК(ОписаниеОповещения)

	ОтладкаРазрешена = Ложь;
	ИмяКомпонента = "ETP";
	МестоположениеКомпонента = "ОбщийМакет.КипВнешнийКомпонент";
	ДополнительныеПараметры = Новый Структура("ПервоеПодключение,ОписаниеОповещенияОкончания,ИмяКомпонента,МестоположениеКомпонента", Истина, ОписаниеОповещения, ИмяКомпонента, МестоположениеКомпонента);
	
	ОписаниеОповещенияОбработкиПодключенияВК = Новый ОписаниеОповещения("ЗакончитьПодключениеКомпоненты", ЭтотОбъект, ДополнительныеПараметры, "ЗакончитьПодключениеКомпонентыСОшибкой", ЭтотОбъект);
	
	Если Не ОтладкаРазрешена Тогда
		
		НачатьПодключениеВнешнейКомпоненты(ОписаниеОповещенияОбработкиПодключенияВК, МестоположениеКомпонента, ИмяКомпонента);
		
	Иначе
		
		НачатьПодключениеВнешнейКомпоненты(ОписаниеОповещенияОбработкиПодключенияВК,
			"C:\Projects\ETPAddin\Bin\Debug-Win32\AddInNative\AddInNative.dll",
			ИмяКомпонента,
			ТипВнешнейКомпоненты.Native);
		
	КонецЕсли;

КонецПроцедуры

// Выполнить метод внешнего компонента
//
// Параметры:
//  Объект - "Addin.ETP.*", экземпляр класса внешнего компонента
//  Имя - Строка, имя выполняемого метода
//  Параметры - Структура, содержит имена и значения параметров
//
// Возвращаемое значение:
//   Произвольный - результат, возвращаемый методом
//
Функция ВыполнитьМетод(Объект, Имя, Параметры = Неопределено)
	
	ИменаПараметров = "";
	
	Если Параметры <> Неопределено Тогда
		Для каждого Параметр Из Параметры Цикл
			Если Не ПустаяСтрока(ИменаПараметров) Тогда
				ИменаПараметров = ИменаПараметров + ", ";
			КонецЕсли;
			
			ИменаПараметров = ИменаПараметров + "Параметры." + Параметр.Ключ;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		Возврат Вычислить("Объект." + Имя + "(" + ИменаПараметров + ")");
	Исключение
		Если Объект <> Неопределено И Объект.ЕстьОшибка() Тогда
			ВызватьИсключение Объект.ОписаниеОшибки();
		Иначе
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
КонецФункции // ВыполнитьМетод()

// Выполнить метод внешнего компонента асинхронно
//
// Параметры:
//  Объект - "Addin.ETP.*", экземпляр класса внешнего компонента
//  Имя - Строка, имя выполняемого метода
//  Параметры - Структура, содержит имена и значения параметров
//	ОписаниеОповещения - описание оповещения
//
&НаКлиенте
Процедура ВыполнитьМетодАсинхронно(Объект, Имя, ОписаниеОповещения, ПараметрыВызова = Неопределено)
	
	ДополнительныеПараметры = Новый Структура("ОписаниеОповещенияОкончанияВызова,Имя,ПараметрыВызова,Объект", ОписаниеОповещения, Имя, ПараметрыВызова, Объект);
	ОписаниеОповещенияОкончанияВызова = Новый ОписаниеОповещения("ЗакончитьВызовВК", ЭтотОбъект, ДополнительныеПараметры, "ЗакончитьВызовВКСОшибкой", ЭтотОбъект);
	
	ИменаПараметров = "";
	Если ПараметрыВызова <> Неопределено Тогда
		Для каждого Параметр Из ПараметрыВызова Цикл
			Если Не ПустаяСтрока(ИменаПараметров) Тогда
				ИменаПараметров = ИменаПараметров + ", ";
			КонецЕсли;
			
			ИменаПараметров = ИменаПараметров + "ПараметрыВызова." + Параметр.Ключ;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		
		Если Не ПустаяСтрока(ИменаПараметров) Тогда
			ИменаПараметров = ", " + ИменаПараметров;
		КонецЕсли;
		
		Результат = Вычислить("Объект." + "НачатьВызов" + Имя + "(" + "ОписаниеОповещенияОкончанияВызова" + ИменаПараметров + ")");
		
	Исключение
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры // ВыполнитьМетодАсинхронно()

// Заканчивает вызов внешей компоненты КИП
//
// Параметры:
//  Результат				 - Произвольный
//  ПараметрыВызова			 - Массив
//  ДополнительныеПараметры	 - Произвольный
//
&НаКлиенте
Процедура ЗакончитьВызовВК(Результат, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры.ОписаниеОповещенияОкончанияВызова.ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.ОписаниеОповещенияОкончанияВызова.ДополнительныеПараметры.Вставить("ВозвращенныеПараметрыВызова", ПараметрыВызова);
	КонецЕсли;
	
	Попытка
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОкончанияВызова, Результат);
	Исключение
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОкончанияВызова, ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры // ЗакончитьВызовВК()

// Заканчивает вызов внешей компоненты КИП с ошибкой
//
// Параметры:
//  Ошибка					 - 	ИнформацияОбОшибке
//  СтандартнаяОбработка	 - 	Булево
//  ДополнительныеПараметры	 - 	Произвольный
//
&НаКлиенте
Процедура ЗакончитьВызовВКСОшибкой(Ошибка, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	                                                   
	Попытка
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьВызовВКДиагностикойОшибки", ЭтотОбъект, ДополнительныеПараметры, "ЗакончитьВызовВКДиагностикойОшибки", ЭтотОбъект);
		ДополнительныеПараметры.Объект.НачатьВызовОписаниеОшибки(ОписаниеОповещения);
	Исключение
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОкончанияВызова, Ошибка);
	КонецПопытки;
	
КонецПроцедуры // ЗакончитьВызовВКСОшибкой()

// Выполняет вызов для диагности ошибки внешней компоненты КИП
//
// Параметры:
//  Результат				 -	Строка или ИнформацияОбОшибке
//  ПараметрыВызова			 - 	Массив
//  ДополнительныеПараметры	 - 	Произвольный
//
&НаКлиенте
Процедура ЗакончитьВызовВКДиагностикойОшибки(Результат, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("ИнформацияОбОшибке") Тогда
		
		Попытка
			ВызватьИсключение Результат;
		Исключение
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОкончанияВызова, ИнформацияОбОшибке());
		КонецПопытки;
		
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОкончанияВызова, Результат);
	КонецЕсли;
	
КонецПроцедуры // ЗакончитьВызовВКДиагностикойОшибки()


///////////////////////////////////////////////////////////////////////////////
// ИНСТРУМЕНТЫ

// Получить значение таймера для замера интервала времени
//
// Параметры:
//  Инструменты - Объект внешнего компонента (см. ПолучитьИнструменты())
//
// Возвращаемое значение:
//  Число - текущее значение таймара в миллисекундах
//
Функция ЗначениеТаймера(Инструменты) Экспорт
	
	Возврат ВыполнитьМетод(Инструменты, "ЗначениеТаймера");
	
КонецФункции // ЗначениеТаймера()

// Приостановить текущий поток на указанное количество миллисекунд
//
// Параметры:
//  Инструменты - Объект внешнего компонента (см. ПолучитьИнструменты())
//  Длительность - Число, количество миллисекунд, на которое приостановить поток
//
Процедура Пауза(Инструменты, Длительность) Экспорт
	
	Параметры = Новый Структура("Длительность", Длительность);
	ВыполнитьМетод(Инструменты, "Пауза", Параметры);
	
КонецПроцедуры // Пауза()

// Начать паузу на указанное количество миллисекунд
//
// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения
//  Инструменты - Объект внешнего компонента (см. ПолучитьИнструменты())
//  Длительность - Число, количество миллисекунд, на которое приостановить поток
//
&НаКлиенте
Процедура НачатьПаузу(ОписаниеОповещения, Инструменты, Длительность) Экспорт
	
	Параметры = Новый Структура("Длительность", Длительность);
	ВыполнитьМетодАсинхронно(Инструменты, "Пауза", ОписаниеОповещения, Параметры);
	
КонецПроцедуры // НачатьПаузу()

// Получить хеш строки данных
//
// Параметры:
//  Инструменты - Объект внешнего компонента (см. ПолучитьИнструменты())
//  Данные - Строка, данные, хеш которых необходимо вычислить
//
Функция ПолучитьХеш(Инструменты, Данные) Экспорт
	
	Возврат ВыполнитьМетод(Инструменты, "ПолучитьХеш",
		Новый Структура("Данные", Данные));
	
КонецФункции // ПолучитьХеш()

// Получить хеш строки Sql
//
// Параметры:
//  Инструменты - Объект внешнего компонента (см. ПолучитьИнструменты())
//  Данные - Строка, данные, хеш которых необходимо вычислить
//
Функция ПолучитьХешSql(Инструменты, Данные) Экспорт
	
	Возврат ВыполнитьМетод(Инструменты, "ПолучитьХешSql",
		Новый Структура("Данные", Данные));
	
КонецФункции // ПолучитьХешSql()

// Получить хеш строки Sdbl
//
// Параметры:
//  Инструменты - Объект внешнего компонента (см. ПолучитьИнструменты())
//  Данные - Строка, данные, хеш которых необходимо вычислить
//
Функция ПолучитьХешSdbl(Инструменты, Данные) Экспорт
	
	Возврат ВыполнитьМетод(Инструменты, "ПолучитьХешSdbl",
		Новый Структура("Данные", Данные));
	
КонецФункции // ПолучитьХешSdbl()

// Получить полный хеш строки Sql
//
// Параметры:
//  Инструменты - Объект внешнего компонента (см. ПолучитьИнструменты())
//  Данные - Строка, данные, хеш которых необходимо вычислить
//  Sql - Строка, по которой рассчитан хеш (возвращаемая)
//
Функция ПолучитьПолныйХешSql(Инструменты, Данные, Sql) Экспорт
	
	Параметры = Новый Структура("Данные, Sql", Данные, Sql);
	Результат = ВыполнитьМетод(Инструменты, "ПолучитьПолныйХешSql", Параметры);
	Sql = Параметры.Sql;
	Возврат Результат;
	
КонецФункции // ПолучитьПолныйХешSql()

// Получить полный хеш строки Sdbl
//
// Параметры:
//  Инструменты - Объект внешнего компонента (см. ПолучитьИнструменты())
//  Данные - Строка, данные, хеш которых необходимо вычислить
//  Sdbl - Строка, по которой рассчитан хеш (возвращаемая)
//
Функция ПолучитьПолныйХешSdbl(Инструменты, Данные, Sdbl) Экспорт
	
	Параметры = Новый Структура("Данные, Sdbl", Данные, Sdbl);
	Результат = ВыполнитьМетод(Инструменты, "ПолучитьПолныйХешSdbl", Параметры);
	Sdbl = Параметры.Sdbl;
	Возврат Результат;
	
КонецФункции // ПолучитьПолныйХешSdbl()

// Объединить два хеша
//
// Параметры:
//  Инструменты - Объект внешнего компонента (см. ПолучитьИнструменты())
//  Хеш1 - Число, значение первого хеша
//  Хеш2 - Число, значение второго хеша
//
Функция ОбъединитьХеш(Инструменты, Хеш1, Хеш2) Экспорт
	
	Параметры = Новый Структура("Хеш1, Хеш2", Хеш1, Хеш2);
	Возврат ВыполнитьМетод(Инструменты, "ОбъединитьХеш", Параметры);
	
КонецФункции // ОбъединитьХеш()

// Запустить указанную программу от имени указанного пользователя, при
// необходимости
//
// Параметры:
//  Инструменты - Объект внешнего компонента (см. ПолучитьИнструменты())
//  СтрокаЗапуска - Строка, путь и параметры запускаемого приложения
//  Имя - Строка, имя пользователя, от имени которого запускать приложение
//  Домен - Строка, домен пользователя, от имени которого запускать приложение
//  Пароль - Строка, пароль пользователя, от имени которого запускать приложение
//
Процедура ЗапуститьПрограмму(Инструменты,
                    СтрокаЗапуска,
                    Имя = "",
                    Домен = "",
                    Пароль = "") Экспорт
	
	Параметры = Новый Структура("СтрокаЗапуска, Имя, Домен, Пароль",
		СтрокаЗапуска, Имя, Домен, Пароль);
		
	ВыполнитьМетод(Инструменты, "Запустить", Параметры);
	
КонецПроцедуры // ЗапуститьПрограмму()

// Начать асинхронный запуск программы от имени указанного пользователя
//
// Параметры:
//	ОписаниеОповещения - описание оповещения
//  Инструменты - Объект внешнего компонента (см. ПолучитьИнструменты())
//  СтрокаЗапуска - Строка, путь и параметры запускаемого приложения
//  Имя (необязательный) -  Строка, имя пользователя, от имени которого запускать приложение
//  Домен (необязательный) - Строка, домен пользователя, от имени которого запускать приложение
//  Пароль (необязательный) - Строка, пароль пользователя, от имени которого запускать приложение
//
&НаКлиенте
Процедура НачатьЗапускПрограммы(ОписаниеОповещения, Инструменты,
                    СтрокаЗапуска,
                    Имя = "",
                    Домен = "",
                    Пароль = "") Экспорт
	
	Параметры = Новый Структура("СтрокаЗапуска, Имя, Домен, Пароль",
		СтрокаЗапуска, Имя, Домен, Пароль);
		
	ВыполнитьМетодАсинхронно(Инструменты, "Запустить", ОписаниеОповещения, Параметры);
	
КонецПроцедуры // НачатьЗапускПрограммы()

// Получить имя текущего компьютера.
// Реализована из-за невозможности получения имени компьютера стандартным
// способом на веб-клиенте
//
// Возвращаемое значение:
//  Строка - имя текущего компьютера
//
Функция ИмяЭтогоКомпьютера(Инструменты) Экспорт
	
	Возврат ВыполнитьМетод(Инструменты, "ИмяКомпьютера");
	
КонецФункции // ИмяЭтогоКомпьютера()

// Начать получение имени текущего компьютера
//
// Возвращаемое значение:
//  Строка - имя текущего компьютера
//
&НаКлиенте
Процедура НачатьПолучениеИмениЭтогоКомпьютера(ОписаниеОповещения, Инструменты) Экспорт
	
	ВыполнитьМетодАсинхронно(Инструменты, "ИмяКомпьютера", ОписаниеОповещения);
	
КонецПроцедуры // НачатьПолучениеИмениЭтогоКомпьютера()

// Получить версию текущего компонента.
// Реализована из-за невозможности получения имени компьютера стандартным
// способом на веб-клиенте
//
// Возвращаемое значение:
//  Строка - имя текущего компьютера
//
Функция ВерсияКомпонента(Инструменты) Экспорт
	
	Возврат ВыполнитьМетод(Инструменты, "ПолучитьВерсию");
	
КонецФункции // ВерсияКомпонента()

// Отметить завершение выполнения работы ВП.
//
Процедура ЗавершитьВыполнение(Инструменты, АдресАгента, Порт) Экспорт
	
	Адрес = "localhost";
	Сообщение = ТЦСервер.ЗапаковатьЛокальноеСообщение(АдресАгента, ПредопределенноеЗначение("Перечисления.ТЦСообщение.ЗавершитьРаботу"));
	Параметры = Новый Структура("Порт,Сообщение", Адрес, Сообщение);
	ВыполнитьМетод(Инструменты, "ЗавершитьВыполнение", Параметры);
	
КонецПроцедуры // ЗавершитьВыполнение()

// Отметить завершение выполнения работы ВП.
//
Функция КоличествоИсключений(Инструменты, Путь, Начало, Конец) Экспорт
	
	Параметры = Новый Структура("Путь, Начало, Конец", Путь, Начало, Конец);
	Возврат ВыполнитьМетод(Инструменты, "КоличествоИсключений", Параметры);
	
КонецФункции // КоличествоИсключений()

// Получить имя текущего пользователя
//
// Возвращаемое значение:
//  Строка, имя пользователя
//
Функция ИмяТекущегоПользователя(Инструменты) Экспорт
	
	Возврат ВыполнитьМетод(Инструменты, "ИмяТекущегоПользователя");
	
КонецФункции // ИмяТекущегоПользователя()

// Получить домен текущего пользователя
//
// Возвращаемое значение:
//  Строка, домен пользователя
//
Функция ДоменТекущегоПользователя(Инструменты) Экспорт
	
	Возврат ВыполнитьМетод(Инструменты, "ДоменТекущегоПользователя");
	
КонецФункции // ДоменТекущегоПользователя()

// Получить номер сессии операционной системы
//
// Возвращаемое значение:
//  Число, номер текущей сессии
//
Функция НомерСессии(Инструменты) Экспорт
	
	Возврат ВыполнитьМетод(Инструменты, "ПолучитьНомерСессии");
	
КонецФункции // НомерСессии()

// Начать получение номера сессии операционной системы
//
// Возвращаемое значение:
//  Число, номер текущей сессии
//
&НаКлиенте
Процедура НачатьПолучениеНомераСессии(ОписаниеОповещения, Инструменты) Экспорт
	
	ВыполнитьМетодАсинхронно(Инструменты, "ПолучитьНомерСессии", ОписаниеОповещения);
	
КонецПроцедуры // НачатьПолучениеНомераСессии()

// Получить номер процесса (PID)
//
// Возвращаемое значение:
//  Число, номер текущего процесса
//
Функция НомерПроцесса(Инструменты) Экспорт
 
	Возврат ВыполнитьМетод(Инструменты, "ПолучитьНомерПроцесса");
 
КонецФункции // НомерПроцесса()

// Начать получение номера процесса (PID)
//
// Возвращаемое значение:
//  Число, номер текущего процесса
//
&НаКлиенте
Процедура НачатьПолучениеНомераПроцесса(ОписаниеОповещения, Инструменты) Экспорт
 
	ВыполнитьМетодАсинхронно(Инструменты, "ПолучитьНомерПроцесса", ОписаниеОповещения);
 
КонецПроцедуры // НачатьПолучениеНомераПроцесса()

// Получить путь по которому располагается зарегистрированный comcntr.dll
//
// Возвращаемое значение:
//  Строка
//
Функция ПутьCOMСоединителя(Инструменты) Экспорт
	
	Возврат ВыполнитьМетод(Инструменты, "ПолучитьПутьCOMСоединителя");
	
КонецФункции // ПутьCOMСоединителя()

// Получить номер версии указанного файла
//
// Возвращаемое значение:
//  Строка в формате X.X.X.X
//
Функция ВерсияФайла(Инструменты, Путь) Экспорт
	
	Параметры = Новый Структура("Путь", Путь);
	Возврат ВыполнитьМетод(Инструменты, "ПолучитьНомерВерсииФайла", Параметры);
	
КонецФункции // ВерсияФайла()

// Начать получение свойств сеанса
//
&НаКлиенте
Процедура НачатьПолучениеСвойствСеанса(ОписаниеОповещения, Инструменты) Экспорт
	
	ДополнительныеПараметры = Новый Структура("РезультирующееОповещениеДляСвойствСеанса", ОписаниеОповещения);
	ОписаниеОповещенияОкончанияПолученияСвойствСеанса =  Новый ОписаниеОповещения("КИПЗакончитьПолучениеСвойствСеанса", ЭтотОбъект, ДополнительныеПараметры);
	
	ВыполнитьМетодАсинхронно(Инструменты, "ПолучитьСвойстваСеанса", ОписаниеОповещенияОкончанияПолученияСвойствСеанса);
	
КонецПроцедуры // НачатьПолучениеНомераСессии()

// Заканчивает вызов получения свойств сеанса
//
// Параметры:
//  Результат				 - 	Строка или ИнфомацияОбОшибке
//  ДополнительныеПараметры	 -  Произвольный
//
&НаКлиенте
Процедура КИПЗакончитьПолучениеСвойствСеанса(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		
		ВозвращаемыйРезультат = Новый Структура("НомерСессии,НомерПроцесса,ИмяКомпьютера");
		
		Массив = СтрРазделить(Результат, ";");
		Если Массив.Количество() = 3 Тогда
			
			ОписаниеЧисла = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный));
			
			ВозвращаемыйРезультат.НомерСессии		= ОписаниеЧисла.ПривестиЗначение(Массив[0]);
			ВозвращаемыйРезультат.НомерПроцесса		= ОписаниеЧисла.ПривестиЗначение(Массив[1]);
			ВозвращаемыйРезультат.ИмяКомпьютера		= Массив[2];
			
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.РезультирующееОповещениеДляСвойствСеанса, ВозвращаемыйРезультат);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.РезультирующееОповещениеДляСвойствСеанса, Результат);
		
	КонецЕсли;
	
КонецПроцедуры // КИПЗакончитьПолучениеСвойствСеанса()

// Начинает получение заданного объекта внешней компоненты КИП
//
// Параметры:
//  ОписаниеОповещения	 - 	ОписаниеОповещения
//  ИмяОбъекта			 - 	Строка
//
&НаКлиенте
Процедура НачатьПолучениеОбъектаВК(ОписаниеОповещения, ИмяОбъекта)
	
	ДополнительныеПараметры = Новый Структура("РезультирующееОповещениеДляПолученияОбъектаВК,ОбъектВК", ОписаниеОповещения, ИмяОбъекта);
	ОписаниеОповещенияОкончанияПолученияИнструментов = Новый ОписаниеОповещения("КИПЗакончитьПолучениеОбъектаВК", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПодключениеВК(ОписаниеОповещенияОкончанияПолученияИнструментов);

КонецПроцедуры // НачатьПолучениеОбъектаВК()

// Заканчивает получение объекта внешней компоненты КИП
//
// Параметры:
//  Результат				 - заданный объект внешней компоненты КИП или ИнформацияОбОшибке
//  ДополнительныеПараметры	 - Произвольный
//
&НаКлиенте
Процедура КИПЗакончитьПолучениеОбъектаВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("ИнформацияОбОшибке") Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.РезультирующееОповещениеДляПолученияОбъектаВК, Результат);
		
	ИначеЕсли Результат = ЛОЖЬ Тогда
		
		ТекстОшибки = "Не удалось подключить внешнюю компоненту";
		Попытка
			ВызватьИсключение ТекстОшибки;
		Исключение
			Ошибка = ИнформацияОбОшибке();
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.РезультирующееОповещениеДляПолученияОбъектаВК, Ошибка);
		КонецПопытки;
		
	ИначеЕсли Результат = ИСТИНА Тогда
		
		Попытка
			ОбъектВК = Новый(ДополнительныеПараметры.ОбъектВК);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.РезультирующееОповещениеДляПолученияОбъектаВК, ОбъектВК);
		Исключение
			Ошибка = ИнформацияОбОшибке();
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.РезультирующееОповещениеДляПолученияОбъектаВК, Ошибка);
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры // КИПЗакончитьПолучениеОбъектаВК()

// Заканчивает подключение внешней компоненты КИП
//
// Параметры:
//  Подключено				 - Булево
//  ДополнительныеПараметры	 - Произвольный
//
&НаКлиенте
Процедура ЗакончитьПодключениеКомпоненты(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено
		ИЛИ (НЕ Подключено И НЕ ДополнительныеПараметры.ПервоеПодключение) Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОкончания, Подключено);
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры.ПервоеПодключение = Ложь;
	
	ОписаниеЗавершенияУстановки = Новый ОписаниеОповещения("ЗавершитьУспешнуюУстановкуКомпоненты", ЭтотОбъект, ДополнительныеПараметры, "ЗавершитьНеудачнуюУстановкуКомпоненты", ЭтотОбъект);
	НачатьУстановкуВнешнейКомпоненты(ОписаниеЗавершенияУстановки, ДополнительныеПараметры.МестоположениеКомпонента);

КонецПроцедуры // ЗакончитьПодключениеКомпоненты()

// Заканчивает подключение внешней компоненты КИП с ошибкой
//
// Параметры:
//  Ошибка					 - ИнформацияОбОшибке
//  СтандартнаяОбработка	 - Булево
//  ДополнительныеПараметры	 - Произвольный
//
&НаКлиенте
Процедура ЗакончитьПодключениеКомпонентыСОшибкой(Ошибка, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОкончания, Ошибка);

КонецПроцедуры // ЗакончитьПодключениеКомпонентыСОшибкой()

// Заканчивает установку внешней компоненты КИП
//
//
//  ДополнительныеПараметры	 - произвольный
//
&НаКлиенте
Процедура ЗавершитьУспешнуюУстановкуКомпоненты(ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещенияОбработкиПодключенияВК = Новый ОписаниеОповещения("ЗакончитьПодключениеКомпоненты", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПодключениеВнешнейКомпоненты(ОписаниеОповещенияОбработкиПодключенияВК, ДополнительныеПараметры.МестоположениеКомпонента, ДополнительныеПараметры.ИмяКомпонента);
	
КонецПроцедуры

// Завевршает неудачную установку компоненты
//
// Параметры:
//  Ошибка					 - ИнформацияОбОшибке
//  СтандартнаяОбработка	 - Булево
//  ДополнительныеПараметры	 - Произвольный
//
&НаКлиенте
Процедура ЗавершитьНеудачнуюУстановкуКомпоненты(Ошибка, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт

	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОкончания, Ошибка);
	
КонецПроцедуры // ЗавершитьНеудачнуюУстановкуКомпоненты()


///////////////////////////////////////////////////////////////////////////////
// ОЧЕРЕДЬ СООБЩЕНИЙ

// Подключить обработчик сообщений
//
// Параметры:
//  Сообщения - Объект внешнего компонента (см. ПолучитьОбработчикСообщений())
//  Порт      - Начальный номер порта
//
Функция ПодключитьСообщения(Сообщения, Порт) Экспорт
	
	//Параметры = Новый Структура("Порт, ДиапазонПортов", Порт, "<Начало1-Конец1;Начало2-Конец2>");
	Параметры = Новый Структура("Порт, ДиапазонПортов", Порт, "5000-65000");
	Результат = ВыполнитьМетод(Сообщения, "Подключить", Параметры);
	
	Возврат Результат;
	
КонецФункции // ПодключитьСообщения()

// Начать подключение обработчика сообщений
//
// Параметры:
//	ОписаниеОповещения - ОписаниеОповещения
//  Сообщения - Объект внешнего компонента (см. ПолучитьОбработчикСообщений())
//  Порт      - Начальный номер порта
//
&НаКлиенте
Процедура НачатьПодключениеСообщений(ОписаниеОповещения, Сообщения, Порт) Экспорт
	
	Если Порт = Неопределено Тогда
		Порт = 0;
	КонецЕсли;
		
	Параметры = Новый Структура("Порт, ДиапазонПортов", Порт, "5000-65000");
	ВыполнитьМетодАсинхронно(Сообщения, "Подключить", ОписаниеОповещения, Параметры);
	
КонецПроцедуры // НачатьПодключениеСообщений()

// Отключить обработчик сообщений
//
// Параметры:
//  Сообщения - Объект внешнего компонента (см. ПолучитьОбработчикСообщений())
//
Процедура ОтключитьСообщения(Сообщения) Экспорт
	
	ВыполнитьМетод(Сообщения, "Отключить");
	
КонецПроцедуры // ОтключитьСообщения()

// Начать отключение обработчика сообщений
//
// Параметры:
//  Сообщения - Объект внешнего компонента (см. ПолучитьОбработчикСообщений())
//
&НаКлиенте
Процедура НачатьОтключениеСообщений(ОписаниеОповещения, Сообщения) Экспорт
	
	ВыполнитьМетодАсинхронно(Сообщения, "Отключить", ОписаниеОповещения);
	
КонецПроцедуры // ОтключитьСообщения()

// Отправить сообщение адресату
//
// Параметры:
//  Сообщения - Объект внешнего компонента (см. ПолучитьОбработчикСообщений())
//  Порт  - Число
//  Сообщение - Строка
//
Процедура ОтправитьСообщение(Сообщения, Порт, Сообщение) Экспорт
	
	Параметры = Новый Структура("Порт, Сообщение", Порт, Сообщение);
	ВыполнитьМетод(Сообщения, "Отправить", Параметры);
	
КонецПроцедуры // ОтправитьСообщение()

// Начать отправку сообщения адресату
//
// Параметры:
//
//  Сообщения - Объект внешнего компонента (см. ПолучитьОбработчикСообщений())
//  Порт  - Число
//  Сообщение - Строка
//
&НаКлиенте
Процедура НачатьОтправкуСообщения(ОписаниеОповещения, Сообщения, Порт, Сообщение) Экспорт
	
	Параметры = Новый Структура("Порт, Сообщение", Порт, Сообщение);
	ВыполнитьМетодАсинхронно(Сообщения, "Отправить", ОписаниеОповещения, Параметры);
	
КонецПроцедуры // НачатьОтправкуСообщения()

///////////////////////////////////////////////////////////////////////////////
// MICROSOFT SQL SERVER

// Подключиться к указанному SQL Server'у
//
// Параметры:
//  СерверMSSQL - Объект MSSQL (см. ПолучитьMSSQL())
//  ИмяСервера - Строка, имя SQL Server
//  ИмяБазы - Строка, имя базы к которой подключиться
//
Процедура ПодключитьMSSQL(СерверMSSQL, ИмяСервера, ИмяБазы = "") Экспорт
	
	Параметры = Новый Структура("ИмяСервера, ИмяБазы", ИмяСервера, ИмяБазы);
	ВыполнитьМетод(СерверMSSQL, "Подключить", Параметры);
	
КонецПроцедуры // ПодключитьMSSQL()

// Разорвать текущее соединение с SQL Server
//
// Параметры:
//  СерверMSSQL - Объект MSSQL (см. ПолучитьMSSQL())
//
Процедура ОтключитьMSSQL(СерверMSSQL) Экспорт
	
	ВыполнитьМетод(СерверMSSQL, "Отключить");
	
КонецПроцедуры // ОтключитьMSSQL()

// Выполнить запрос к SQL Server
//
// Параметры:
//  СерверMSSQL - Объект MSSQL (см. ПолучитьMSSQL())
//  ТекстЗапроса - Строка, текст запроса
//
Процедура ВыполнитьЗапросMSSQL(СерверMSSQL, ТекстЗапроса) Экспорт
	
	Параметры = Новый Структура("ТекстЗапроса", ТекстЗапроса);
	ВыполнитьМетод(СерверMSSQL, "Выполнить", Параметры);
	
КонецПроцедуры // ВыполнитьЗапросMSSQL()

// Узнать, есть ли записи в результате запроса
//
// Параметры:
//  СерверMSSQL - Объект MSSQL (см. ПолучитьMSSQL())
//
// Возвращаемое значение:
//  Булево - Истина, следующая запись получена;
//           Ложь, достигнут конец результата
//
Функция ЕстьЗаписьMSSQL(СерверMSSQL) Экспорт
	
	Возврат ВыполнитьМетод(СерверMSSQL, "ЕстьЗапись");
	
КонецФункции // ЕстьЗаписьMSSQL()

// Перейти к следующей записи результата запроса SQL Server
//
// Параметры:
//  СерверMSSQL - Объект MSSQL (см. ПолучитьMSSQL())
//
// Возвращаемое значение:
//  Булево - Истина, следующая запись получена;
//           Ложь, достигнут конец результата
//
Функция СледующаяЗаписьMSSQL(СерверMSSQL) Экспорт
	
	Возврат ВыполнитьМетод(СерверMSSQL, "СледующаяЗапись");
	
КонецФункции // СледующаяЗаписьMSSQL()

// Перейти к следующему результату запроса SQL Server
//
// Параметры:
//  СерверMSSQL - Объект MSSQL (см. ПолучитьMSSQL())
//
// Возвращаемое значение:
//  Булево - Истина, следующая запись получена;
//           Ложь, достигнут конец результата
//
Функция СледующийРезультатMSSQL(СерверMSSQL) Экспорт
	
	Возврат ВыполнитьМетод(СерверMSSQL, "СледующийРезультат");
	
КонецФункции // СледующийРезультатMSSQL()

// Узнать, есть ли результат запроса
//
// Параметры:
//  СерверMSSQL - Объект MSSQL (см. ПолучитьMSSQL())
//
// Возвращаемое значение:
//  Булево - Истина, следующая запись получена;
//           Ложь, достигнут конец результата
//
Функция ЕстьРезультатMSSQL(СерверMSSQL) Экспорт
	
	Возврат ВыполнитьМетод(СерверMSSQL, "ЕстьРезультат");
	
КонецФункции // ЕстьРезультатMSSQL()

// Получить значение поля записи результата запроса к SQL Server
//
// Параметры:
//  СерверMSSQL - Объект MSSQL (см. ПолучитьMSSQL())
//  ИмяПоля - Строка, имя поля записи
//
// Возвращаемое значение:
//  Строка - значение поля записи результата запроса
//
Функция ЗначениеПоляMSSQL(СерверMSSQL, ИмяПоля) Экспорт
	
	Параметры = Новый Структура("ИмяПоля", ИмяПоля);
	Возврат ВыполнитьМетод(СерверMSSQL, "ЗначениеПоля", Параметры);
	
КонецФункции // ЗначениеПоляMSSQL()


///////////////////////////////////////////////////////////////////////////////
// ТЕХНОЛОГИЧЕСКИЙ ЖУРНАЛ

// Открыть исходые каталоги технологического журнала
//
// Параметры:
//  ТЖ - Объект внешнего компонента (см. ПолучитьТЖ())
//  Каталоги - Строка, каталоги технологического журнала, перечисленные через
//             разделитель (; - для Windows, : - для Linux)
//  МаскаПроцессов - Число, младшие биты которого определяют набор
//                   процессов, журналы которых будут прочитаны.
//                   Биты (числа) и их значения:
//                     0 (1) - 1cv8, клиент 1С:Предприятия
//                     1 (2) - rmngr, сервер
//                     2 (4) - ragent, агент сервера
//                     3 (8) - rphost, рабочий процесс
//  Компактно - Булево, Ложь - выходной формат удобный для чтения
//              человеком с переносами строк, Истина - компактный
//              формат для машшинного разбора без переноса строк
//
Процедура ОткрытьТЖ(ТЖ, Каталоги, МаскаПроцессов, Компактно = Истина) Экспорт
	
	КаталогиТЖ = "";
	
	Для каждого Каталог Из Каталоги Цикл
		Если Не ПустаяСтрока(КаталогиТЖ) Тогда
			КаталогиТЖ = КаталогиТЖ + КипОбщий.РазделительПути();
		КонецЕсли;
		
		КаталогиТЖ = КаталогиТЖ + Каталог;
	КонецЦикла;
	
	Параметры = Новый Структура("КаталогиТЖ, МаскаПроцессов, Компактно",
		КаталогиТЖ, МаскаПроцессов, Компактно);
	ВыполнитьМетод(ТЖ, "Открыть", Параметры);
	
КонецПроцедуры // ОткрытьТЖ()

// Прочитать 
//
// Параметры:
//  ТЖ - Объект внешнего компонента (см. ПолучитьТЖ())
//  КоличествоСобытий - Число, количество читаемых событий
//
// Возвращаемое значение:
//  
//
Функция ПрочитатьТЖ(ТЖ, КоличествоСобытий = 5000) Экспорт
	
	Параметры = Новый Структура("КоличествоСобытий", КоличествоСобытий);
	Возврат ВыполнитьМетод(ТЖ, "Прочитать", Параметры);
	
КонецФункции // ПрочитатьТЖ()

// Опредлить, достигнут ли конец технологического журнала
//
// Параметры:
//  ТЖ - Объект внешнего компонента (см. ПолучитьТЖ())
//
// Возвращаемое значение:
//  Булево - Истина, конец достигнут, Ложь - конец не достигнут
//
Функция КонецТЖ(ТЖ) Экспорт
	
	Возврат ВыполнитьМетод(ТЖ, "ЭтоКонец");
	
КонецФункции // КонецТЖ()

// Открыть исходые каталоги технологического журнала
//
// Параметры:
//  ТЖ - Объект внешнего компонента (см. ПолучитьТЖ())
//
Процедура ЗакрытьТЖ(ТЖ) Экспорт
	
	ВыполнитьМетод(ТЖ, "Закрыть");
	
КонецПроцедуры // ЗакрытьТЖ()


///////////////////////////////////////////////////////////////////////////////
// СЧЕТЧИКИ ПРОИЗВОДИТЕЛЬНОСТИ

// Подключить счетчики производительности
//
// Параметры:
//  Счетчики - Объект работы со счетчиками производительности (см. ПолучитьСчетчики())
//
Процедура ПодключитьСчетчики(Счетчики) Экспорт
	
	ВыполнитьМетод(Счетчики, "Подключить");
	
КонецПроцедуры // ПодключитьСчетчики()

// Отключить счетчики производительности
//
// Параметры:
//  Счетчики - Объект работы со счетчиками производительности (см. ПолучитьСчетчики())
//
Процедура ОтключитьСчетчики(Счетчики) Экспорт
	
	ВыполнитьМетод(Счетчики, "Отключить");
	
КонецПроцедуры // ОтключитьСчетчики()

// Добавить счетчик производительности
//
// Параметры:
//  Счетчики - Объект работы со счетчиками производительности (см. ПолучитьСчетчики())
//  ПолноеИмяСчетчика - Строка, полное имя счетчика
//
// Возвращаемое значение:
//  Число - индекс счетчика, который необходим для получения его значения
//
Функция ДобавитьСчетчик(Счетчики, ПолноеИмяСчетчика) Экспорт
	
	Параметры = Новый Структура("ПолноеИмяСчетчика", ПолноеИмяСчетчика);
	Возврат ВыполнитьМетод(Счетчики, "ДобавитьСчетчик", Параметры);
	
КонецФункции // ДобавитьСчетчик()

// Удалить счетчик производительности
//
// Параметры:
//  Счетчики - Объект работы со счетчиками производительности (см. ПолучитьСчетчики())
//  Индекс - Число, индес счетчика, полученный при его добавлении
//
Процедура УдалитьСчетчик(Счетчики, ИндексСчетчика) Экспорт
	
	Параметры = Новый Структура("ИндексСчетчика", ИндексСчетчика);
	ВыполнитьМетод(Счетчики, "УдалитьСчетчик", Параметры);
	
КонецПроцедуры // УдалитьСчетчик()

// Собрать значения показателей производительности
//
// Параметры:
//  Счетчики - Объект работы со счетчиками производительности (см. ПолучитьСчетчики())
//
Процедура СобратьЗначенияСчетчиков(Счетчики) Экспорт
	
	ВыполнитьМетод(Счетчики, "СобратьЗначенияПоказателей");
	
КонецПроцедуры // СобратьЗначенияСчетчиков()

// Получить значение счетчика производительности
//
// Параметры:
//  Счетчики - Объект работы со счетчиками производительности (см. ПолучитьСчетчики())
//  ИндексСчетчика - Число, индекс счетчика, полученный при его добавлении
//
// Возвращаемое значение:
//  Число - индекс счетчика, который необходим для получения его значения
//
Функция ЗначениеСчетчика(Счетчики, ИндексСчетчика) Экспорт
	
	Параметры = Новый Структура("ИндексСчетчика", ИндексСчетчика);
	Возврат ВыполнитьМетод(Счетчики, "ПолучитьЗначение", Параметры);
	
КонецФункции // ЗначениеСчетчика()

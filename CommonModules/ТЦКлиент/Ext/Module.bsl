///////////////////////////////////////////////////////////////////////////////
// ОСНОВНЫЕ КОМАНДЫ

// Выполнить тестирование
//
Процедура ВыполнитьТестирование() Экспорт
	
	ОткрытьФорму("Справочник.ТЦСценарии.ФормаСписка");
	
КонецПроцедуры // ВыполнитьТестирование()

// Переключить Тест-центр в режим агента
//
Процедура ВключитьРежимАгента(ПредыдущаяФорма = Неопределено) Экспорт
	
	Если ПредыдущаяФорма = Неопределено Тогда
		ИмяПредыдущейФормы = "Справочник.ТЦАгенты.ФормаСписка";
	Иначе
		ИмяПредыдущейФормы = ПредыдущаяФорма;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("", );
	ПараметрыФормы.Вставить("ПредыдущаяФорма", ИмяПредыдущейФормы);
	
	Попытка
		ТЦСервер.УстановитьТипКлиентскогоПриложения(ПредопределенноеЗначение("Перечисление.ТЦТипКлиентскогоПриложения.АгентТЦ"));
		ОткрытьФорму("Справочник.ТЦАгенты.Форма.Агент", ПараметрыФормы,,, ОсновноеОкно());
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "Ошибка при переходе в режим агента", ПредопределенноеЗначение("Перечисление.ТЦСтатусСообщения.Ошибка"));
		ВызватьИсключение "Произошла ошибка при переходе в режим агента."
						  "Подробную информацию об ошибке можно найти"
						  "в журнале регистрации по событию"
						  """Ошибка при переходе в режим агента""";
	КонецПопытки;
	
	УстановитьЗаголовокПриложения("Агент");
	
КонецПроцедуры // ВключитьРежимАгента()

// Переключить Тест-центр в режим ВРМ
//
Процедура ВключитьРежимВРМ(Клиент, Пользователь, ВП) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Форма = Справочники.ТЦВП.ПолучитьФорму("ОбычноеВРМ");
		Форма.Клиент = Клиент;
		Форма.Пользователь = Пользователь;
		Форма.ВП = ВП;
		Форма.Открыть();
	#Иначе
		П = Новый Структура;
		П.Вставить("Клиент", Клиент);
		П.Вставить("Пользователь", Пользователь);
		П.Вставить("ВП", ВП);
		ОткрытьФорму("Справочник.ТЦВП.Форма.УправляемоеВРМ", П,,, ОсновноеОкно());
	#КонецЕсли
	
КонецПроцедуры // ВключитьРежимВРМ()

// Открыть форму результатов теста
//
// Параметры:
//  Тест - ДокументСсылка.ТЦТест, открываемый документ
//
Процедура ПоказатьРезультатыТеста(Тест) Экспорт
	
	П = Новый Структура;
	П.Вставить("Ключ", Тест);
	ОткрытьФорму("Документ.ТЦТест.Форма.ОсновнойОтчет", П,,, ОсновноеОкно());
	
КонецПроцедуры // ПоказатьРезультатыТеста()

// Открыть форму результатов теста
//
// Параметры:
//  Тест - ДокументСсылка.ТЦТест, открываемый документ
//
Процедура ПоказатьСписокАгентов() Экспорт
	
	ОткрытьФорму("Справочник.ТЦАгенты.Форма.Агенты",,,, ОсновноеОкно());
	
КонецПроцедуры // ПоказатьСписокАгентов()

// Открыть форму, отображающую состояние тестирования
//
Процедура ПоказатьСостояниеТестирования() Экспорт
	
	ОткрытьФорму("ОбщаяФорма.ТЦСостояниеВыполненияТеста",,,, ОсновноеОкно());
	
КонецПроцедуры // ПоказатьСостояниеТестирования()

// Получить форму, отображающую состояние тестирования
//
Функция ПолучитьФормуСостояниеТестирования() Экспорт
	
	Форма = ПолучитьФорму("ОбщаяФорма.ТЦСостояниеВыполненияТеста",,,, ОсновноеОкно());
	
	Возврат Форма;
	
КонецФункции // ПоказатьСостояниеТестирования()

// Возвращает Истина, если строка начинается с команды Тест-центра
//
// Параметры:
//  СтрокаПараметров  - Строка - строка параметров запуска приложения
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоКомандаТестЦентра(Строка) Экспорт

	Если Строка =  "TCA"
		ИЛИ Строка =  "TCM"
		ИЛИ Строка =  "TCVW" Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции // СтрокаСодержитКомандуТестЦентра()

// Выполнить действие в соответствии с параметром запуска (/C)
// TCA (Test-center Agent) - запуск в режиме агента
// TCVW (Test-center Virtual Workplace) - запуск в режиме ВРМ
//
// Параметры:
//  Параметры - Строка, параметры командной строки
//
Процедура ОбработатьПараметрЗапуска(Параметры) Экспорт
	
	Если ПустаяСтрока(Параметры) Тогда
		ПодготовитьПодсистемуУправленияДоступом();
		Возврат;
	КонецЕсли;
	
	ПараметрыВРег = ВРег(Параметры);
	ПараметрыМассив = ТЦОбщий.РазделитьСтроку(ПараметрыВРег, ";");
	
	Если НЕ ЭтоКомандаТестЦентра(ПараметрыМассив[0]) Тогда
		ПодготовитьПодсистемуУправленияДоступом();
		Возврат;
	КонецЕсли;
	
	Если ПараметрыМассив[0] = "TCA" Тогда
		ВключитьРежимАгента();
		ТЦКлиент.ЗапуститьОпросОпределенияТипаПриложения();
	ИначеЕсли ПараметрыМассив[0] = "TCM" Тогда
		ТЦКлиент.ЗапуститьОпросОпределенияТипаПриложения();
	ИначеЕсли ПараметрыМассив[0] = "TCVW" Тогда
		
		Клиент = ТЦСервер.СсылкаПоИдентификатору(
			ПараметрыМассив[1],
			"Справочники",
			"ТЦКлиенты");
		Пользователь = ТЦСервер.СсылкаПоИдентификатору(
			ПараметрыМассив[2],
			"Справочники",
			"ТЦПользователи");
		ВП = ТЦСервер.СсылкаПоИдентификатору(
			ПараметрыМассив[3],
			"Справочники",
			"ТЦВП");
		ВключитьРежимВРМ(Клиент, ТЦСервер.НайтиОригиналПоКлону(Пользователь), ВП);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПараметрЗапуска()

// Если используется БСП, то проверяется наличие группы доступа и профиля группы доступа Тест-центра.
// При необходимости группа доступа и профиль создаются.
//
Процедура ПодготовитьПодсистемуУправленияДоступом()

	Результат = ТЦСервер.БСППодготовитьПодсистемуУправленияДоступом();
	
	Если Результат = "ЗапуститьОбновление" Тогда
		
		ЗавершитьРаботуСистемы(Ложь, Истина, "/C ЗапуститьОбновлениеИнформационнойБазы;");
		
	ИначеЕсли Результат = "ОжидатьОбновления" Тогда
		
		ПодключитьОбработчикОжидания("ОпросОбновленияИнформационнойБазы", 10, Ложь);
		
	КонецЕсли;

КонецПроцедуры // ПроверитьГруппуДоступаТестЦентра()


///////////////////////////////////////////////////////////////////////////////
// СООБЩЕНИЯ

// Создать параметры запуска ВРМ
//
// Возвращаемое значение:
//  Структура:
//    Пользователь - Строка, имя пользователя
//    Пароль - Строка, пароль пользователя
//    Количество - Число, количество таких пользователей
//
Функция ПараметрыЗапускаВРМ() Экспорт
	
	Возврат Новый Структура("Пользователь, Пароль, Количество");
	
КонецФункции // ПараметрыЗапускаВРМ()

// Подключить механизм локальных сообщений
//
// Параметры:
//  Сообщения - Объект работы с локальными сообщениями
//  Порт - порт ВРМ
//
Функция ПодключитьЛокальныеСообщения(Сообщения, Порт = 0) Экспорт
	
	ПортСервераСообщений = 0;
	Если Сообщения = Неопределено Тогда
		Сообщения = КипВнешнийКомпонент.ПолучитьОбработчикСообщений();
		ПортСервераСообщений = КипВнешнийКомпонент.ПодключитьСообщения(Сообщения, Порт);
	КонецЕсли;
	
	Возврат ПортСервераСообщений;
	
КонецФункции // ПодключитьЛокальныеСообщения()

// Начать подключение локальных сообщений
//
// Параметры:
//	ОписаниеОповещения - описание оповещения
//  Сообщения - Объект работы с локальными сообщениями
//  Порт - порт ВРМ
//
Процедура НачатьПодключениеЛокальныхСообщений(ОписаниеОповещения, Сообщения, Порт = 0) Экспорт
	
	ПортСервераСообщений = 0;
	Если Сообщения = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура("Сообщения,Порт,ОписаниеОповещенияДляПЛС", Сообщения, Порт, ОписаниеОповещения);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьПодключениеЛокальныхСообщений", ЭтотОбъект, ДополнительныеПараметры);
		КипВнешнийКомпонент.НачатьПолучениеСообщений(ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ПортСервераСообщений);
	КонецЕсли;
	
КонецПроцедуры // НачатьПодключениеЛокальныхСообщений()

// Продолжение подключения локальных сообщений
//
// Параметры:
//  Сообщения				 - Объект "Addin.ETP.Messenger" или ИнформацияОбОшибке
//  ДополнительныеПараметры	 - Структура
//
Процедура ПродолжитьПодключениеЛокальныхСообщений(Сообщения, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Сообщения) = Тип("ИнформацияОбОшибке") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияДляПЛС, Сообщения);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Сообщения = Сообщения;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьПодключениеЛокальныхСообщений", ЭтотОбъект, ДополнительныеПараметры);
	КипВнешнийКомпонент.НачатьПодключениеСообщений(ОписаниеОповещения, Сообщения, ДополнительныеПараметры.Порт);
	
КонецПроцедуры // ПродолжитьПодключениеЛокальныхСообщений()

// Заканчивает подключение локальных сообщений
//
// Параметры:
//  Порт					 - Число или ИнформацияОбОшибке
//  ДополнительныеПараметры	 - Структура
//
Процедура ЗакончитьПодключениеЛокальныхСообщений(Порт, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Порт) = Тип("ИнформацияОбОшибке") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияДляПЛС, Порт);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Порт = Порт;
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияДляПЛС, ДополнительныеПараметры);
	
КонецПроцедуры  // ЗакончитьПодключениеЛокальныхСообщений()

// Отключить механизм локальных сообщений
//
// Параметры:
//  Сообщения - Объект работы с локальными сообщениями
//
Процедура ОтключитьЛокальныеСообщения(Сообщения) Экспорт
	
	Если Сообщения <> Неопределено Тогда
		КипВнешнийКомпонент.ОтключитьСообщения(Сообщения);
		Сообщения = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ОтключитьЛокальныеСообщения()

// Начать отключение механизма обмена сообщениями
//
// Параметры:
//	ОписаниеОповещения - описание оповещения
//  Сообщения - Объект работы с локальными сообщениями
//
Процедура НачатьОтключениеЛокальныхСообщений(ОписаниеОповещения, Сообщения) Экспорт
	
	Если Сообщения <> Неопределено Тогда
		КипВнешнийКомпонент.НачатьОтключениеСообщений(ОписаниеОповещения, Сообщения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры // ОтключитьЛокальныеСообщения()


///////////////////////////////////////////////////////////////////////////////
// ИНТЕРФЕЙС ПОЛЬЗОВАТЕЛЯ

// Получить основное окно приложения
//
// Возвращаемое значение:
//  ОкноКлиентскогоПриложения - основное окно
//
Функция ОсновноеОкно() Экспорт
	
	Окна = ПолучитьОкна();
	
	Если Окна = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого Окно Из Окна Цикл
		Если Окно.Основное Тогда
			Возврат Окно;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ОсновноеОкно()

// Отобразить информацию об ошибке в специализированном диалоговом окне
//
// Параметры:
//  ИнформацияОбОшибке - ИнформацияОбОшибке
//
Процедура СообщитьОбОшибке(Ошибка, ДатаНачала, ДатаОкончания) Экспорт
	
	Параметры = Новый Структура;
	
	Если ТипЗнч(Ошибка) = Тип("ИнформацияОбОшибке") Тогда
		Параметры.Вставить("Ошибка", ТЦОбщий.ИнформациюОбОшибкеВСтруктуру(Ошибка));
	Иначе
		Параметры.Вставить("Ошибка", Ошибка);
	КонецЕсли;
	
	Параметры.Вставить("ДатаНачала", ДатаНачала);
	Параметры.Вставить("ДатаОкончания", ДатаОкончания);
	ОткрытьФорму("ОбщаяФорма.ТЦОшибка", Параметры);
	
КонецПроцедуры // СообщитьОбОшибке()

// Получить имя формы тестовой обработки
//
// Параметры:
//  ТестоваяОбработка - СправочникСсылка.ТЦОбработки
//
// Возвращаемое значение:
//  Строка - строка с именем формы тестовой обработки
//
Функция ПолучитьИмяФормыОбработки(ТестоваяОбработка) Экспорт
	
	ТипВнешняя = ПредопределенноеЗначение("Перечисление.ТЦТипОбработки.Внешняя");
	ТипВнутреняя = ПредопределенноеЗначение("Перечисление.ТЦТипОбработки.Внутренняя");
	Реквизиты = ТЦСервер.РеквизитыОбъектаПоСсылке(ТестоваяОбработка);
	ИмяФормы = ".Форма.ТЦФорма";
	
	Если Реквизиты.Тип = ТипВнешняя Тогда
		Путь = ПолучитьНавигационнуюСсылку(ТестоваяОбработка, "Файл");
		ИмяОбработки = ТЦСервер.ПодключитьОбработку(Путь);
		ИмяФормы = "ВнешняяОбработка." + ИмяОбработки + ИмяФормы;
	ИначеЕсли Реквизиты.Тип = ТипВнутреняя Тогда
		ИмяФормы = "Обработка." + Реквизиты.ИмяОбработки + ИмяФормы;
	КонецЕсли;
	
	Возврат ИмяФормы;
	
КонецФункции // ПолучитьИмяФормыОбработки()


///////////////////////////////////////////////////////////////////////////////
// КЛИЕНТЫ

// Запустить клиента от имени указанного пользователя
//
// Параметры:
//  Клиент - СправочникСсылка.ТЦКлиент
//  Пользователь - СправочникСсылка.ТЦПользователь
//  Ид - Строка, уникальный идентификатор нового ВРМ
//
Процедура ЗапуститьКлиента(Клиент, Пользователь, Ид) Экспорт
	
	ПараметрыПользователя = ТЦСервер.ПараметрыПользователя(Пользователь);
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	
	СисИнфо = Новый СистемнаяИнформация;
	ЭтоLinux = СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86
	       Или СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64;
		   
	Если ПараметрыПользователя.ТипАутентификации = ПредопределенноеЗначение("Перечисление.ТЦТипАутентификации.АутентификацияОС") Тогда
		КипВнешнийКомпонент.ЗапуститьПрограмму(
			Инструменты,
			ТЦСервер.ПолнаяСтрокаЗапуска(Клиент, Пользователь, Ид, ЭтоLinux),
			ПараметрыПользователя.Имя,
			ПараметрыПользователя.Домен,
			ПараметрыПользователя.Пароль);
	Иначе
		КипВнешнийКомпонент.ЗапуститьПрограмму(
			Инструменты,
			ТЦСервер.ПолнаяСтрокаЗапуска(Клиент, Пользователь, Ид, ЭтоLinux));
	КонецЕсли;
	
КонецПроцедуры // ЗапуститьКлиента()

// Начать запуск клиента от имени указанного пользователя
//
// Параметры:
//	ОписаниеОповещения - описание оповещения
//	Инструменты - инструменты КИП
//  Клиент - СправочникСсылка.ТЦКлиент
//  Пользователь - СправочникСсылка.ТЦПользователь
//  Ид - Строка, уникальный идентификатор нового ВРМ
//
Процедура НачатьЗапускКлиента(ОписаниеОповещения, Инструменты, Клиент, Пользователь, Ид) Экспорт
	
	ПараметрыПользователя = ТЦСервер.ПараметрыПользователя(Пользователь);
	
	СисИнфо = Новый СистемнаяИнформация;
	ЭтоLinux = СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86
	       Или СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64;
		   
	Если ПараметрыПользователя.ТипАутентификации = ПредопределенноеЗначение("Перечисление.ТЦТипАутентификации.АутентификацияОС") Тогда
		КипВнешнийКомпонент.НачатьЗапускПрограммы(ОписаниеОповещения,
			Инструменты,
			ТЦСервер.ПолнаяСтрокаЗапуска(Клиент, Пользователь, Ид, ЭтоLinux),
			ПараметрыПользователя.Имя,
			ПараметрыПользователя.Домен,
			ПараметрыПользователя.Пароль);
	Иначе
		КипВнешнийКомпонент.НачатьЗапускПрограммы(ОписаниеОповещения,
			Инструменты,
			ТЦСервер.ПолнаяСтрокаЗапуска(Клиент, Пользователь, Ид, ЭтоLinux));
	КонецЕсли;
	
КонецПроцедуры // ЗапуститьКлиента()


///////////////////////////////////////////////////////////////////////////////
// ВИРТУАЛЬНОЕ РАБОЧЕЕ МЕСТО


// Получить структуру контекста ВРМ
// 
// Возвращаемое значение:
//   Структура
//
Функция ПолучитьСтруктуруКонтекстаВРМ() Экспорт
	
	СтруктураКонтекста = Новый Структура("Компьютер, НомерСессии, НомерПроцесса, Порт, ПортАгента,
										|Тест, ВРМ, Клиент, Номер, НомерСеанса, Пользователь, Клон, Состояние, Сценарий,
										|ПродолжатьРаботуМеждуИтерациями, ОтметкаПервогоВыполненияНаИтерации, ИдетПовторноеВыполнение, КоэффициентИнтенсивности,
										|ФормаОбработки, ФормаВРМ,
										|Инструменты, Сообщения, Перечисления");
	
	Возврат СтруктураКонтекста;
	
КонецФункции // ПолучитьСтруктуруКонтекстаВРМ()

// Создать контекст выполнения ВРМ
//
// Возвращаемое значение:
//  Структура
//    Клиент - СправочникСсылка.ТЦКлиенты
//    Пользователь - СправочникСсылка.ТЦПользователи
//    ВРМ - СправочникСсылка.ТЦВП
//    ФормаОбработки - УправляемаяФорма, форма тестовой обработки
//
Функция СоздатьКонтекстВРМ(Клиент, Пользователь, ВРМ, ФормаВРМ) Экспорт
	
	Перем Сообщения;
	
	Контекст = ТЦКлиент.ПолучитьСтруктуруКонтекстаВРМ();
	ПараметрыДляВРМ = ТЦСервер.ПолучитьПараметрыДляВРМ();
	
	Контекст.ВРМ = ВРМ;
	Контекст.Клиент = Клиент;
	Контекст.Пользователь = Пользователь;
	Контекст.НомерСеанса = ПараметрыДляВРМ.НомерСеанса;
	Контекст.Перечисления = ПараметрыДляВРМ.Перечисления;
	Контекст.ФормаВРМ = ФормаВРМ;
	Контекст.ИдетПовторноеВыполнение = Ложь;
	Контекст.ОтметкаПервогоВыполненияНаИтерации = Ложь;
	Контекст.ПродолжатьРаботуМеждуИтерациями = Ложь;
	Контекст.КоэффициентИнтенсивности = 1;
	Контекст.ПортАгента = 0;
	
	ФактическийПорт = ТЦКлиент.ПодключитьЛокальныеСообщения(Сообщения);
	Контекст.Порт = ФактическийПорт;
	Контекст.Сообщения = Сообщения;
	
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	Контекст.Инструменты	= Инструменты;
	Контекст.НомерСессии	= КипВнешнийКомпонент.НомерСессии(Инструменты);
	Контекст.НомерПроцесса	= КипВнешнийКомпонент.НомерПроцесса(Инструменты);
	Контекст.Компьютер		= КипВнешнийКомпонент.ИмяЭтогоКомпьютера(Инструменты);

	Клон = ПараметрыДляВРМ.Клон;
	Контекст.Клон = Строка(Клон);
	ИмяВРМ = ТЦКлиент.ПолучитьИмяВРМ(Пользователь, Строка(Клон),,Контекст.НомерСеанса, Контекст.НомерСессии, Контекст.Компьютер, Контекст.НомерПроцесса);
	
	ТЦСервер.СоздатьВРМ(ИмяВРМ, Клиент, Контекст.Компьютер, Контекст.НомерСессии, Пользователь, Клон, ФактическийПорт, ВРМ);
	УстановитьЗаголовокПриложения("ВРМ");	
	
	ПараметрыОтвета = ТЦКлиент.ПараметрыОтветаВРМ(ВРМ);
	ПараметрыОтвета.РезультатВыполнения = ФактическийПорт;
	
	ТЦКлиент.ОтправитьАгенту(
		Контекст,
		Контекст.Перечисления.ТЦСообщение.ГотовКработе,
		ПараметрыОтвета);
	
	Возврат Контекст;
	
КонецФункции // СоздатьКонтекстВРМ()

// Начать создание контекста ВРМ
Процедура НачатьСозданиеКонтекстаВРМ(ОписаниеОповещения, Клиент, Пользователь, ВРМ, ФормаВРМ) Экспорт
	
	Перем Сообщения;
	
	Контекст = ПолучитьСтруктуруКонтекстаВРМ();
	Контекст.Вставить("ОповещениеОкончанияСозданияКонтекста", ОписаниеОповещения);
	Контекст.Вставить("Клиент", Клиент);
	Контекст.Вставить("Пользователь", Пользователь);
	Контекст.Вставить("ВРМ", ВРМ);
	Контекст.Вставить("ФормаВРМ", ФормаВРМ);
	
	ОписаниеОповещенияПродолжения = Новый ОписаниеОповещения("ПродолжитьСозданиеКонтекстаВРМИнструменты", ЭтотОбъект, Контекст);
															
	КипВнешнийКомпонент.НачатьПолучениеИнструментов(ОписаниеОповещенияПродолжения);

КонецПроцедуры // НачатьСозданиеКонтекстаВРМ()

// Продолжить создание контекста ВРМ получением инструментов и запросом свойств сеанса (номера процесса, номера сессии и имени компьютера).
Процедура ПродолжитьСозданиеКонтекстаВРМИнструменты(Инструменты, Контекст) Экспорт
	
	Если ТипЗнч(Инструменты) = Тип("ИнформацияОбОшибке") Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеОкончанияСозданияКонтекста, Инструменты);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("Инструменты", Инструменты);
	ОписаниеОповещенияПродолжения = Новый ОписаниеОповещения("ПродолжитьСозданиеКонтекстаВРМСвойства", ЭтотОбъект, Контекст);
															
	КипВнешнийКомпонент.НачатьПолучениеСвойствСеанса(ОписаниеОповещенияПродолжения, Инструменты);
	
КонецПроцедуры

// Продолжить создание контекста ВРМ получением свойств сеанса и запросом подключения локальных сообщений
Процедура ПродолжитьСозданиеКонтекстаВРМСвойства(СвойстваСеанса, Контекст) Экспорт
	
	Если ТипЗнч(СвойстваСеанса) = Тип("ИнформацияОбОшибке") Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеОкончанияСозданияКонтекста, СвойстваСеанса);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("Компьютер",		СвойстваСеанса.ИмяКомпьютера);
	Контекст.Вставить("НомерСессии",	СвойстваСеанса.НомерСессии);
	Контекст.Вставить("НомерПроцесса",	СвойстваСеанса.НомерПроцесса);
	
	ОписаниеОповещенияПродолжения = Новый ОписаниеОповещения("ПродолжитьСозданиеКонтекстаВРМСообщения", ЭтотОбъект, Контекст);
															
	Контекст.Вставить("Сообщения", Неопределено);
	НачатьПодключениеЛокальныхСообщений(ОписаниеОповещенияПродолжения, Контекст.Сообщения);
	
КонецПроцедуры

// Продолжить создание контекста ВРМ подключением механизма сообщений
Процедура ПродолжитьСозданиеКонтекстаВРМСообщения(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) = Тип("ИнформацияОбОшибке") Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеОкончанияСозданияКонтекста, Результат);
		Возврат;
	КонецЕсли;
	
	ПараметрыДляВРМ = ТЦСервер.ПолучитьПараметрыДляВРМ();
	
	Клон = ПараметрыДляВРМ.Клон;
	Контекст.Клон = Строка(Клон);
	
	Контекст.Вставить("Сообщения", Результат.Сообщения);
	Контекст.Вставить("Порт", Результат.Порт);
	Контекст.НомерСеанса	= ПараметрыДляВРМ.НомерСеанса;
	Контекст.Перечисления	= ПараметрыДляВРМ.Перечисления;
	Контекст.ИдетПовторноеВыполнение = Ложь;
	Контекст.ОтметкаПервогоВыполненияНаИтерации = Ложь;
	Контекст.ПродолжатьРаботуМеждуИтерациями = Ложь;
	Контекст.КоэффициентИнтенсивности = 1;
	Контекст.ПортАгента = 0;

	ИмяВРМ = ТЦКлиент.ПолучитьИмяВРМ(Контекст.Пользователь, Строка(Клон), , Контекст.НомерСеанса, Контекст.НомерСессии, Контекст.Компьютер, Контекст.НомерПроцесса);
	ТЦСервер.СоздатьВРМ(ИмяВРМ, Контекст.Клиент, Контекст.Компьютер, Контекст.НомерСессии, Контекст.Пользователь, Клон, Контекст.Порт, Контекст.ВРМ);
	
	УстановитьЗаголовокПриложения("ВРМ");	

	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОкончанияСозданияКонтекста, Контекст);
	
КонецПроцедуры

// Удалить контекст выполнения ВРМ
//
// Параметры:
//  Контекст - Структура (см. СоздатьКонтекстВРМ())
//
Процедура УдалитьКонтекстВРМ(Контекст) Экспорт
	
	ТЦСервер.УдалитьВРМ(Контекст.ВРМ);
	ТЦКлиент.ОтключитьЛокальныеСообщения(Контекст.Сообщения);
	
КонецПроцедуры // УдалитьКонтекстВРМ()

// Начать удаление контекста выполнения ВРМ
//
// Параметры:
//	ОписаниеОповещения - ОписаниеОповещения
//  Контекст - Структура (см. СоздатьКонтекстВРМ())
//
Процедура НачатьУдалениеКонтекстаВРМ(ОписаниеОповещения, Контекст) Экспорт
	
	Попытка
		ТЦСервер.УдалитьВРМ(Контекст.ВРМ);
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "ВРМ");
	КонецПопытки;
	
	ТЦКлиент.НачатьОтключениеЛокальныхСообщений(ОписаниеОповещения, Контекст.Сообщения);
	
КонецПроцедуры // УдалитьКонтекстВРМ()

// Создать параметры ответа ВРМ
//
// Параметры:
//  СсылкаВРМ - СправочникСсылка.ТЦВП
//
// Возвращаемое значение:
//  Структура
//    ВРМ - СправочникСсылка.ТЦВП
//    Результат - Произвольный
//    РезультатВыполнения - ПеречислениеСсылка.ТЦРезультатВыполнения
//	  Состояние - ПеречислениеСсылка.ТЦСостояние
//
Функция ПараметрыОтветаВРМ(СсылкаВРМ) Экспорт
	
	ПараметрыОтвета= Новый Структура;
	ПараметрыОтвета.Вставить("ВРМ", СсылкаВРМ);
	ПараметрыОтвета.Вставить("Результат");
	ПараметрыОтвета.Вставить("РезультатВыполнения");
	ПараметрыОтвета.Вставить("Состояние");
	
	Возврат ПараметрыОтвета;
	
КонецФункции // ПараметрыОтветаВРМ()// Создать параметры ответа ВРМ

// Создать параметры сообщения агента об ошибке
// Параметры:
//    Состояние - ПеречислениеСсылка.ТЦСостояние
//
// Возвращаемое значение:
//  Структура:
//    Результат - Произвольный
//	  Состояние - ПеречислениеСсылка.ТЦСостояние
//	  ВесОшибки - Число, соответствует количеству ВРМ, которые вызвали ошибку
//
Функция ПараметрыСообщенияАгентаОбОшибке(Состояние) Экспорт
	
	ПараметрыСообщения= Новый Структура;
	ПараметрыСообщения.Вставить("Результат");
	ПараметрыСообщения.Вставить("Состояние", Состояние);
	ПараметрыСообщения.Вставить("ВесОшибки");
	
	Возврат ПараметрыСообщения;
	
КонецФункции // ПараметрыОтветаВРМ()

// Отправить локальное сообщение Агенту от ВРМ
//
// Параметры:
//  Контекст - Структура (см. СоздатьКонтекстВРМ())
//  Сообщение - ПеречислениеСсылка.ТЦСообщение
//  Параметры - Произвольный
//
Процедура ОтправитьАгенту(Контекст, Сообщение, Параметры = Неопределено) Экспорт
	
	Пакет = ТЦСервер.ЗапаковатьЛокальноеСообщение(Контекст.ВРМ, Сообщение, Параметры);
	
	Если Контекст.ПортАгента = 0 Тогда
		Контекст.ПортАгента = ТЦКлиент.ЛокальныйПортАгента(Контекст.НомерСессии, Контекст.Компьютер);
	КонецЕсли;

	Попытка 
		КипВнешнийКомпонент.ОтправитьСообщение(Контекст.Сообщения, Контекст.ПортАгента, Пакет);
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "ИсключениеПриОтправкеОтВРМ");
	КонецПопытки;
	
КонецПроцедуры // ОтправитьЛокальноеСообщениеАгенту()

// Начать отправику локального сообщения Агенту от ВРМ
//
// Параметры:
//  Контекст - Структура (см. СоздатьКонтекстВРМ())
//  Сообщение - ПеречислениеСсылка.ТЦСообщение
//  Параметры - Произвольный
//
Процедура НачатьОтправкуАгенту(ОписаниеОповещения, Контекст, Сообщение, Параметры = Неопределено) Экспорт
	
	Пакет = ТЦСервер.ЗапаковатьЛокальноеСообщение(Контекст.ВРМ, Сообщение, Параметры);
	
	Если Контекст.ПортАгента = 0 Тогда
		Контекст.ПортАгента = ТЦКлиент.ЛокальныйПортАгента(Контекст.НомерСессии, Контекст.Компьютер);
	КонецЕсли;

	Попытка 
		КипВнешнийКомпонент.НачатьОтправкуСообщения(ОписаниеОповещения, Контекст.Сообщения, Контекст.ПортАгента, Пакет);
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "ИсключениеПриОтправкеОтВРМ");
	КонецПопытки;
	
КонецПроцедуры // ОтправитьЛокальноеСообщениеАгенту()

// Получить наименование ВРМ
//
// Параметры:
//  НомерВРМ - Число, порядковый номер ВРМ
//
// Возвращаемое значение:
//  Строка - наименование ВРМ
//
Функция ПолучитьИмяВРМ(Знач Пользователь, Знач ИмяКлона, Знач НомерВРМ = Неопределено, Знач НомерСеанса = Неопределено, Знач НомерСессии, Знач ИмяКомпьютера, Знач НомерПроцесса) Экспорт
	
	ИмяПользователя = ТЦСервер.ИмяПользователяИБ(Пользователь);
	Номер = ?(НомерВРМ = Неопределено, "", "; ВРМ №" + Формат(НомерВРМ, "ЧГ=0"));
	НомерСеанса = ?(НомерСеанса = Неопределено, "", ", сеанс: "  + Формат(НомерСеанса, "ЧГ=0"));
	
	Возврат ИмяКомпьютера + "." + НомерСессии + " (PID: " + Формат(НомерПроцесса, "ЧГ=0") + НомерСеанса +  "); " + ИмяКлона + Номер;
	
КонецФункции // ПолучитьИмяВРМ()

// Получить начальное представление ВРМ
//
// Параметры:
//  НомерВРМ - Число, порядковый номер ВРМ
//
// Возвращаемое значение:
//  Строка - наименование ВРМ
//
Функция ПолучитьНачальноеПредставлениеВРМ(Пользователь, ИмяКлона, Клиент, ИмяКомпьютера, НомерСессии, Знач НомерВРМ = Неопределено) Экспорт
	
	ИмяПользователя = ТЦСервер.ИмяПользователяИБ(Пользователь);
	Номер = ?(НомерВРМ = Неопределено, "", "; ВРМ №" + Формат(НомерВРМ, "ЧГ=0"));
	
	Возврат ИмяКомпьютера + "." + НомерСессии + ", " + Клиент + ", " + ИмяКлона + Номер;
	
КонецФункции // ПолучитьНачальноеПредставлениеВРМ()

// Обработать сообщение, которое пришло от Агента
//
// Параметры:
//  Контекст - структура, контекст выполнения
//  Данные - Строка, данные, которые пришли от ВРМ
//
Функция ОбработатьСообщениеВРМ(Контекст, Данные) Экспорт
	
	ОбновитьВРМ = Ложь;
	СостояниеАгента = Неопределено; // Состояние, переданное в сообщении от агента
	
	ИдетОбработкаЗавершенияРаботы = Ложь;
	Если Контекст.Свойство("ОбработкаЗавершенияРаботы", ИдетОбработкаЗавершенияРаботы) Тогда
		Возврат ОбновитьВРМ;
	КонецЕсли;
	
	Попытка
		
		ОтветноеСообщение = Неопределено;
		НеОбновлятьСостояние = Ложь;
		ПараметрыОтвета = ПараметрыОтветаВРМ(Контекст.ВРМ);
		Пакет = ТЦСервер.РаспаковатьЛокальноеСообщение(Данные);
		Сообщение = Пакет.Сообщение;
		Отправитель = Пакет.Отправитель;
		ОписаниеОповещенияОтправкиСообщения = Новый ОписаниеОповещения("ЗавершитьОтправкуСообщенияАгенту", ЭтотОбъект);

		Если Сообщение = Контекст.Перечисления.ТЦСообщение.ПроверкаАктивности Тогда
			
			ОтветноеСообщение = Контекст.Перечисления.ТЦСообщение.ГотовКработе;
			ПараметрыОтвета.РезультатВыполнения = Контекст.Порт;
			
		ИначеЕсли Сообщение = Контекст.Перечисления.ТЦСообщение.Выполнить Тогда
			
			СостояниеАгента = Пакет.Параметры.Состояние;
			ОтветноеСообщение = Контекст.Перечисления.ТЦСообщение.ВыполненоУспешно;
			
			Если СостояниеАгента = Контекст.Перечисления.ТЦСостояние.Подготовка Тогда

				Если НЕ (Контекст.ИдетПовторноеВыполнение
							ИЛИ (Контекст.ПродолжатьРаботуМеждуИтерациями И Контекст.Тест = Пакет.Параметры.Параметры.Тест))
					
					ИЛИ Контекст.Тест <> Пакет.Параметры.Параметры.Тест Тогда

					УстановитьСостояниеВРМ(Контекст, Контекст.Перечисления.ТЦСостояние.Подготовка);
					Контекст.ФормаВРМ.ВозниклоИсключение = Ложь;
					Контекст.ФормаВРМ.ТекстОшибкиОбработки = "";
					Контекст.Номер = Пакет.Параметры.Параметры.НомерВРМ;
					Контекст.Тест = Пакет.Параметры.Параметры.Тест;
					Контекст.ПродолжатьРаботуМеждуИтерациями = Пакет.Параметры.Параметры.ПродолжатьРаботуМеждуИтерациями;
					Контекст.КоэффициентИнтенсивности = Пакет.Параметры.Параметры.КоэффициентИнтенсивности;
					Контекст.ОтметкаПервогоВыполненияНаИтерации = Ложь;
					Контекст.ИдетПовторноеВыполнение = Ложь;
								
					ИмяВРМ = ПолучитьИмяВРМ(Контекст.Пользователь, Контекст.Клон, Контекст.Номер, Контекст.НомерСеанса, Контекст.НомерСессии, Контекст.Компьютер, Контекст.НомерПроцесса);
					ТЦСервер.ИзменитьИмяВРМ(ИмяВРМ, Контекст.Номер, Контекст.ВРМ);
					Контекст.Сценарий = Пакет.Параметры.Параметры.Сценарий;
					ЗагрузитьВРМ(Контекст);
					
				Иначе
					// Сброс статуса "Выполнение" в состояние незавершенности.
					УстановитьСостояниеВРМ(Контекст, Контекст.Состояние);
					НеОбновлятьСостояние = Истина;
				КонецЕсли;
				
				ОбновитьВРМ = Истина;
				ПараметрыОтвета.РезультатВыполнения = Контекст.Перечисления.ТЦРезультатВыполнения.Успешно;
				ПараметрыОтвета.Состояние = Контекст.Перечисления.ТЦСостояние.Подготовка;
				
			ИначеЕсли СостояниеАгента = Контекст.Перечисления.ТЦСостояние.Инициализация Тогда
				
				Если Не Контекст.ИдетПовторноеВыполнение Тогда
					
					УстановитьСостояниеВРМ(Контекст, Контекст.Перечисления.ТЦСостояние.Инициализация);
					
					Контекст.ФормаВРМ.РезультатВыполнения = Контекст.Перечисления.ТЦРезультатВыполнения.Неопределено;
					Контекст.ФормаВРМ.ВозниклоИсключение = Ложь;
					Контекст.ФормаВРМ.ТекстОшибкиОбработки = "";
					ОтветноеСообщение = ВыполнитьМетодОбработки(
						Контекст,
						"ТЦИнициализировать",
						ПараметрыОтвета,
						"Ошибка инициализации");
					Контекст.ФормаВРМ.РезультатВыполнения = ПараметрыОтвета.РезультатВыполнения;
					
				Иначе
					ПараметрыОтвета.РезультатВыполнения = Контекст.Перечисления.ТЦРезультатВыполнения.Успешно;
				КонецЕсли;
				
				ПараметрыОтвета.Состояние = Контекст.Перечисления.ТЦСостояние.Инициализация;
				
			ИначеЕсли СостояниеАгента = Контекст.Перечисления.ТЦСостояние.Выполнение Тогда
				
				Контекст.ОтметкаПервогоВыполненияНаИтерации = Истина;
				УстановитьСостояниеВРМ(Контекст, Контекст.Перечисления.ТЦСостояние.Выполнение);
				
				Если Не Контекст.ИдетПовторноеВыполнение Тогда
					Контекст.ФормаВРМ.РезультатВыполнения = Контекст.Перечисления.ТЦРезультатВыполнения.Неопределено;
					Контекст.ФормаВРМ.ВозниклоИсключение = Ложь;
					Контекст.ФормаВРМ.ТекстОшибкиОбработки = "";
					ОтветноеСообщение = ВыполнитьМетодОбработки(
						Контекст,
						"ТЦВыполнить",
						ПараметрыОтвета,
						"Ошибка выполнения действия пользователя");
					Контекст.ФормаВРМ.РезультатВыполнения = ПараметрыОтвета.РезультатВыполнения;
					ПараметрыОтвета.Состояние = Контекст.Перечисления.ТЦСостояние.Выполнение;
					ЗаписатьРезультатыОценкиПроизводительности();
				КонецЕсли;

			ИначеЕсли СостояниеАгента = Контекст.Перечисления.ТЦСостояние.ЗаписьРезультатов Тогда
				
				УстановитьСостояниеВРМ(Контекст, Контекст.Перечисления.ТЦСостояние.ЗаписьРезультатов);
				Если Контекст.ИдетПовторноеВыполнение Тогда
					Контекст.ФормаВРМ.ОтключитьОбработчикОжидания("ОжидатьЗавершениеВыполнения");
					
					Попытка
						Контекст.ФормаОбработки.ОтключитьОбработчикОжидания("ТЦОбработчикВыполнения");
					Исключение
						ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "ВРМ", Контекст.Перечисления.ТЦСтатусСообщения.Предупреждение);
					КонецПопытки;
					
					Контекст.ИдетПовторноеВыполнение = Ложь;
				КонецЕсли;
				ПараметрыОтвета.Результат = Контекст.ФормаОбработки.ТЦПолучитьРезультат();
				ПараметрыОтвета.РезультатВыполнения = Контекст.Перечисления.ТЦРезультатВыполнения.Успешно;
				ПараметрыОтвета.Состояние = Контекст.Перечисления.ТЦСостояние.ЗаписьРезультатов;
				
			ИначеЕсли СостояниеАгента = Контекст.Перечисления.ТЦСостояние.УдалениеДанных Тогда
				
				УстановитьСостояниеВРМ(Контекст, Контекст.Перечисления.ТЦСостояние.УдалениеДанных);
				Контекст.ФормаВРМ.РезультатВыполнения = Контекст.Перечисления.ТЦРезультатВыполнения.Неопределено;
				Контекст.ФормаВРМ.ВозниклоИсключение = Ложь;
				Контекст.ФормаВРМ.ТекстОшибкиОбработки = "";
				ОтветноеСообщение = ВыполнитьМетодОбработки(
					Контекст,
					"ТЦУдалитьДанные",
					ПараметрыОтвета,
					"Ошибка удаления данных");
				Контекст.ФормаВРМ.РезультатВыполнения = ПараметрыОтвета.РезультатВыполнения;
				ПараметрыОтвета.Состояние = Контекст.Перечисления.ТЦСостояние.УдалениеДанных;
				
			КонецЕсли;
			
			Если ПараметрыОтвета.РезультатВыполнения = Контекст.Перечисления.ТЦРезультатВыполнения.Ошибка Тогда
				ОтветноеСообщение = Контекст.Перечисления.ТЦСообщение.ВыполненоСОшибкой;
			КонецЕсли;
			
		ИначеЕсли Сообщение = Контекст.Перечисления.ТЦСообщение.ЗавершитьРаботу Тогда

			Контекст.Вставить("ОбработкаЗавершенияРаботы", Истина);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьЗакрытиеВРМ", ЭтотОбъект);
			
			Попытка
				ТЦКлиент.НачатьУдалениеКонтекстаВРМ(ОписаниеОповещения, Контекст);
			Исключение
				ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "ВРМ");
				ЗавершитьРаботуСистемы(Ложь, Ложь);
			КонецПопытки;
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтветноеСообщение) Тогда
			
			Если ПараметрыОтвета.РезультатВыполнения = Контекст.Перечисления.ТЦРезультатВыполнения.Продолжить Тогда
				
				ИнтервалОжидания = 1;
				#Если ВебКлиент Тогда
					ИнтервалОжидания = 10;
				#КонецЕсли
				Контекст.ФормаВРМ.ПодключитьОбработчикОжидания("ОжидатьЗавершениеВыполнения", ИнтервалОжидания);
				
			Иначе
				
				Если НЕ (Контекст.ИдетПовторноеВыполнение ИЛИ НеОбновлятьСостояние)
					И НЕ (Сообщение = Контекст.Перечисления.ТЦСообщение.ПроверкаАктивности
							И Контекст.Состояние <> Контекст.Перечисления.ТЦСостояние.Неактивен) Тогда
					
					Если Не ЗначениеЗаполнено(ПараметрыОтвета.Состояние) Тогда
						УстановитьСостояниеВРМ(Контекст, Контекст.Состояние, Истина);
					ИначеЕсли ПараметрыОтвета.Состояние <> Контекст.Перечисления.ТЦСостояние.УдалениеДанных Тогда
						УстановитьСостояниеВРМ(Контекст, ПараметрыОтвета.Состояние, Истина);
					Иначе
						УстановитьСостояниеВРМ(Контекст, Контекст.Перечисления.ТЦСостояние.Неактивен);
					КонецЕсли;
					
				КонецЕсли;
				
				// Ответ агенту
				Если НЕ (Контекст.ИдетПовторноеВыполнение И СостояниеАгента = Контекст.Перечисления.ТЦСостояние.Выполнение) Тогда
					НачатьОтправкуАгенту(ОписаниеОповещенияОтправкиСообщения, Контекст, ОтветноеСообщение, ПараметрыОтвета);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "ВРМ");
		
		Если Контекст.Сообщения <> Неопределено Тогда
			ПараметрыОтветаВРМ = ТЦКлиент.ПараметрыОтветаВРМ(Контекст.ВРМ);
			ПараметрыОтветаВРМ.Результат = "ВРМ не смог обработать сообщение Агента (клон: " + Контекст.Клон + ", компьютер: " + Контекст.Компьютер +  "):";
			
			Если Контекст.ИдетПовторноеВыполнение Тогда
				ПараметрыОтветаВРМ.Результат = ПараметрыОтветаВРМ.Результат + Символы.ПС + "Ошибка произошла во время повторения этапа ""Выполнение""";
				Контекст.ФормаВРМ.ОтключитьОбработчикОжидания("ОжидатьЗавершениеВыполнения");
				
				Попытка
					Контекст.ФормаОбработки.ОтключитьОбработчикОжидания("ТЦОбработчикВыполнения");
				Исключение
					ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "ВРМ", Контекст.Перечисления.ТЦСтатусСообщения.Предупреждение);
				КонецПопытки;
				
				Контекст.ИдетПовторноеВыполнение = Ложь;
			ИначеЕсли СостояниеАгента <> Неопределено Тогда
				ПараметрыОтветаВРМ.Результат = ПараметрыОтветаВРМ.Результат + Символы.ПС + "Ошибка произошла во время этапа """ + Строка(СостояниеАгента) +  """";
			КонецЕсли;
			
			ПараметрыОтветаВРМ.Результат = ПараметрыОтветаВРМ.Результат + Символы.ПС + "Подробности: " + Символы.ПС + ТЦОбщий.ИнформациюОбОшибкеВСтроку(ИнформацияОбОшибке());
			
			НачатьОтправкуАгенту(ОписаниеОповещенияОтправкиСообщения,
				Контекст,
				Контекст.Перечисления.ТЦСообщение.ВыполненоСОшибкой,
				ПараметрыОтветаВРМ);

		КонецЕсли;
		
	КонецПопытки;
	
	Возврат ОбновитьВРМ;
	
КонецФункции // ОбработатьСообщениеВРМ()

// Завершить закрытие ВРМ
//
// Параметры:
//  Результат				 - Неопределено или ИнформацияОбОшибке
//  ДополнительныеПараметры	 - Произвольный
//
Процедура ЗавершитьЗакрытиеВРМ(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("ИнформацияОбОшибке") Тогда
		ТЦОбщий.ЗаписатьВЖурнал(Результат, "ВРМ");
	КонецЕсли;
	
	ЗавершитьРаботуСистемы(Ложь, Ложь);
	
КонецПроцедуры // ЗавершитьЗакрытиеВРМ()

// Завершить отправку сообщения от ВРМ к агенту Тест-центра
//
// Параметры:
//  Результат				 - ИнформацияОбОшибке
//  ДополнительныеПараметры	 - Произвольный
//
Процедура ЗавершитьОтправкуСообщенияАгенту(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("ИнформацияОбОшибке") Тогда
		ТЦОбщий.ЗаписатьВЖурнал(Результат, "ВРМ");
	КонецЕсли;
	
КонецПроцедуры // ЗавершитьОтправкуСообщенияАгенту()

// Обработать ожидание завершения действия ВРМ
//
// Параметры:
//  Контекст - Структура, контекст выполнения
//  Форма - Форма, содержащая обработчик и дополнительные параметры
//
Функция ОбработатьОжиданиеВРМ(Контекст, Форма) Экспорт
	
	Попытка
		
		Продолжение = Контекст.Перечисления.ТЦРезультатВыполнения.Продолжить;
		Успешно = Контекст.Перечисления.ТЦСообщение.ВыполненоУспешно;
		Ошибка = Контекст.Перечисления.ТЦСообщение.ВыполненоСОшибкой;
		
		Если Форма.ВозниклоИсключение Или Форма.РезультатВыполнения <> Продолжение Тогда
			
			Контекст.ФормаВРМ.ОтключитьОбработчикОжидания("ОжидатьЗавершениеВыполнения");
			ПараметрыОтвета = ПараметрыОтветаВРМ(Контекст.ВРМ);
			ПараметрыОтвета.РезультатВыполнения = Форма.РезультатВыполнения;
			ПараметрыОтвета.Результат = Контекст.ФормаОбработки.ТЦПолучитьРезультат();
			ПараметрыОтвета.Состояние = Контекст.Состояние;
			
			ОписаниеОповещенияОтправкиСообщения = Новый ОписаниеОповещения("ЗавершитьОтправкуСообщенияАгенту", ЭтотОбъект);
			
			// Определим параметры ответа и сообщение агенту
			Если Форма.ВозниклоИсключение Тогда
				
				ПараметрыОтвета.Результат = "При выполнении тестовой обработки возникли ошибки (клон: " + Контекст.Клон + ", компьютер: " + Контекст.Компьютер +  ")" +
											Символы.ПС + Форма.ТекстОшибкиОбработки;
				ОтветноеСообщение = Ошибка;
				
			Иначе
				
				ЗаписатьРезультатыОценкиПроизводительности();
				Если Форма.РезультатВыполнения = Контекст.Перечисления.ТЦРезультатВыполнения.Ошибка Тогда
					ОтветноеСообщение = Ошибка;
				Иначе
					ОтветноеСообщение = Успешно;
				КонецЕсли;
				
			КонецЕсли;
			
			// Установим состояние ВРМ
			Если Не (Контекст.ИдетПовторноеВыполнение И НЕ Контекст.ОтметкаПервогоВыполненияНаИтерации) Тогда
				
				Если ПараметрыОтвета.Состояние = Контекст.Перечисления.ТЦСостояние.УдалениеДанных Тогда
					УстановитьСостояниеВРМ(Контекст, Контекст.Перечисления.ТЦСостояние.Неактивен);
				Иначе
					УстановитьСостояниеВРМ(Контекст, ПараметрыОтвета.Состояние, Истина);
				КонецЕсли;
				
				Если Контекст.Состояние = Контекст.Перечисления.ТЦСостояние.Выполнение Тогда
					Контекст.ОтметкаПервогоВыполненияНаИтерации = Ложь;
				КонецЕсли;
								
				НачатьОтправкуАгенту(ОписаниеОповещенияОтправкиСообщения, Контекст, ОтветноеСообщение, ПараметрыОтвета);
			КонецЕсли;
			
			// Если выполняется динамический тест, то следует продолжить выполнение
			Если Контекст.ПродолжатьРаботуМеждуИтерациями И Контекст.Состояние = Контекст.Перечисления.ТЦСостояние.Выполнение Тогда

				Контекст.ИдетПовторноеВыполнение = Истина;
				
				ОтветноеСообщение = ВыполнитьМетодОбработки(
					Контекст,
					"ТЦВыполнить",
					ПараметрыОтвета,
					"Ошибка выполнения действия пользователя");
				Контекст.ФормаВРМ.РезультатВыполнения = ПараметрыОтвета.РезультатВыполнения;
				
				Если ЗначениеЗаполнено(ОтветноеСообщение) Тогда
					Если ПараметрыОтвета.РезультатВыполнения = Контекст.Перечисления.ТЦРезультатВыполнения.Продолжить Тогда
						
						ИнтервалОжидания = 1;
						#Если ВебКлиент Тогда
							ИнтервалОжидания = 10;
						#КонецЕсли
						Контекст.ФормаВРМ.ПодключитьОбработчикОжидания("ОжидатьЗавершениеВыполнения", ИнтервалОжидания);
						
					Иначе
						
						НачатьОтправкуАгенту(ОписаниеОповещенияОтправкиСообщения, Контекст, ОтветноеСообщение, ПараметрыОтвета);
						
					КонецЕсли;
				КонецЕсли;										
				
			КонецЕсли;
			
			Возврат Истина;
		КонецЕсли;
		
	Исключение
		
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "ВРМ");
		
		Если Контекст.Сообщения <> Неопределено Тогда
			
			ПараметрыОтветаВРМ = ТЦКлиент.ПараметрыОтветаВРМ(Контекст.ВРМ);
			ПараметрыОтветаВРМ.Результат = "Ошибка в обработчике ожидания завершения работы виртуального пользователя" +
										   " (клон: " +	Контекст.Клон + ", компьютер: " + Контекст.Компьютер +  "): " + Символы.ПС +
										   ТЦОбщий.ИнформациюОбОшибкеВСтроку(ИнформацияОбОшибке());
			ТЦКлиент.ОтправитьАгенту(
				Контекст,
				Контекст.Перечисления.ТЦСообщение.ВыполненоСОшибкой,
				ПараметрыОтветаВРМ);
				
		КонецЕсли;
			
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции // ОбработатьОжиданиеВРМ()

// Выполнить метод внешней обработки
//
// Параметры:
//  Контекст - Структура, контекст выполнения
//  Метод - Строка, имя выполняемого метода
//
// Возвращаемое значение:
//  Перечисление.ТЦРезультатВыполнения
//
Функция ВыполнитьМетодОбработки(Контекст, Метод, ПараметрыОтвета, Ошибка)
	
	Попытка
		ПараметрыОтвета.РезультатВыполнения = Вычислить("Контекст.ФормаОбработки." + Метод + "()");
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "ВРМ");
		ПараметрыОтвета.Результат = Ошибка + " (клон: " + Контекст.Клон + ", компьютер: " + Контекст.Компьютер +  "):" + Символы.ПС + ОписаниеОшибки();
		Если Метод = "ТЦИнициализировать" Тогда
			ПараметрыОтвета.Состояние = Контекст.Перечисления.ТЦСостояние.Инициализация;
		ИначеЕсли Метод = "ТЦВыполнить" Тогда
			ПараметрыОтвета.Состояние = Контекст.Перечисления.ТЦСостояние.Выполнение;
		ИначеЕсли Метод = "ТЦУдалитьДанные" Тогда
			ПараметрыОтвета.Состояние = Контекст.Перечисления.ТЦСостояние.УдалениеДанных;
		КонецЕсли;
		
		Возврат Контекст.Перечисления.ТЦСообщение.ВыполненоСОшибкой;
	КонецПопытки;
	
	Если ПараметрыОтвета.РезультатВыполнения = Контекст.Перечисления.ТЦРезультатВыполнения.Ошибка Тогда
		ПараметрыОтвета.Результат = Ошибка;
		Возврат Контекст.Перечисления.ТЦСообщение.ВыполненоСОшибкой;
	КонецЕсли;
	
	Возврат Контекст.Перечисления.ТЦСообщение.ВыполненоУспешно;
	
КонецФункции // ВыполнитьМетодОбработки()

// Загрузить ВРМ
//
Процедура ЗагрузитьВРМ(Контекст)
	
	ТЦОбщий.ЗаписатьВЖурнал("ПолучитьПараметрыЗагрузкиВРМ", "ВРМ");
	ТЦОбщий.ЗаписатьВЖурнал(Контекст.ВРМ.УникальныйИдентификатор(), "ВРМ");
	Параметры = ТЦСервер.ПолучитьПараметрыЗагрузкиВРМ(Контекст.ВРМ);
	
	ТЦОбщий.ЗаписатьВЖурнал("ПолучитьИмяФормыОбработки", "ВРМ");
	ИмяФормыОбработки = ТЦКлиент.ПолучитьИмяФормыОбработки(Параметры.Обработка);
	
	ТЦОбщий.ЗаписатьВЖурнал("ТЦЗагрузить", "ВРМ");
	Контекст.ФормаОбработки = ПолучитьФорму(ИмяФормыОбработки);
	
	ТЦОбщий.ЗаписатьВЖурнал("ТЦЗагрузить", "ВРМ");
	Контекст.ФормаОбработки.ТЦЗагрузить(Параметры.ПараметрыОбработки);

	КонтекстОбработки = Контекст.ФормаОбработки.ТЦКонтекст();
	КонтекстОбработки.ФормаВРМ = Контекст.ФормаВРМ;
	КонтекстОбработки.КоэффициентИнтенсивности = Контекст.КоэффициентИнтенсивности;
	
	ВРМ = КонтекстОбработки.ВРМ;
	ВРМ.Номер = Контекст.Номер;
	ВРМ.Сценарий = Контекст.Сценарий;
	ВРМ.Роль = Параметры.Роль;
	ВРМ.ИмяРоли = Параметры.ИмяРоли;
	ВРМ.Компьютер = Параметры.ИмяКомпьютера;
	ВРМ.Пользователь = Параметры.ИмяПользователя;
	
КонецПроцедуры // ЗагрузитьВРМ()

// Установить статус ВРМ
//
// Параметры:
//  КонтекстВРМ - Структура (контекст ВРМ)
//  Состояние - ПеречислениеСсылка.ТЦСостояние
//	ЭтапЗавершен - Булево
//
Процедура УстановитьСостояниеВРМ(КонтекстВРМ, Состояние, ЭтапЗавершен = Ложь) Экспорт
	
	КонтекстВРМ.Состояние = Состояние;
	ТЦСервер.УстановитьСостояниеВРМ(КонтекстВРМ.ВРМ, Состояние, ЭтапЗавершен);
	
КонецПроцедуры

// Добавить результат теста
//
// Параметры:
//  Контекст - Структура, контекст тестирования отдельного ВРМ
//             (см. СоздатьКонтекстВыполненияОбработки())
//  Показатель - Строка, имя показателя
//  Значение - Число, новое значение показателя
//
Процедура ДобавитьРезультат(Контекст, Показатель, Значение) Экспорт
	
	Значения = Контекст.Результаты[Показатель];
	
	Если Значения = Неопределено Тогда
		Значения = Новый Массив;
		Контекст.Результаты[Показатель] = Значения;
	КонецЕсли;
	
	Значения.Добавить(Значение);
	
КонецПроцедуры // ДобавитьРезультат()

// Записыват замеры длительности операций через подсистему "БСП.ОценкаПроизводительности" или "ЗамерыПроизводительности"
//
Процедура ЗаписатьРезультатыОценкиПроизводительности() Экспорт
	
	Попытка
		МодульОценкаПроизводительностиКлиент = Вычислить("ОценкаПроизводительностиКлиент");
	Исключение
		МодульОценкаПроизводительностиКлиент = Неопределено;
	КонецПопытки;
	
	#Если ВебКлиент Тогда
		ЭтоВебКлиент  = Истина;
	#Иначе
		ЭтоВебКлиент  = Ложь;
	#КонецЕсли	
	
	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПлатформы = СисИнфо.ВерсияПриложения;
	
	Если ЭтоВебКлиент И ТЦОбщий.СравнитьВерсии(ВерсияПлатформы, "8.3.3.641") < 0 Тогда
		Если МодульОценкаПроизводительностиКлиент = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если МодульОценкаПроизводительностиКлиент = Неопределено
			ИЛИ ТипЗнч(МодульОценкаПроизводительностиКлиент) <> Тип("ОбщийМодуль") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		МодульОценкаПроизводительностиКлиент.ЗаписатьРезультатыАвтоНеГлобальный();
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "ВРМ");
	КонецПопытки;
	
КонецПроцедуры // ЗаписатьРезультатыОценкиПроизводительности()

//////////////////////////////////////////////////////////////////////////////////////
// КЛИЕНТСКОЕ ПРИЛОЖЕНИЕ

// Запустить опрос получения роли из справочника ТЦУправлениеТестом
//
Процедура ЗапуститьОпросОпределенияТипаПриложения() Экспорт
	
	#Если Не ВебКлиент Тогда
		ИмяКомпьютера = ИмяКомпьютера();
	#Иначе
		СистИнфо = Новый СистемнаяИнформация;
		ИмяКомпьютера = СистИнфо.ИдентификаторКлиента;
	#КонецЕсли
	
	ЭтоВРМ = Ложь;
	НазначенаРольПриСтарте = ТЦСервер.ИнициализироватьУправлениеТестом(ИмяКомпьютера, ПолучитьТекущуюСредуВыполнения(), ЭтоВРМ);
	
	Если НЕ ЭтоВРМ Тогда
		ТЦКлиент.ПереключитьРежимОпроса(НазначенаРольПриСтарте);
	КонецЕсли;
	
КонецПроцедуры //ЗапуститьОпросОпределенияТипаПриложения()

// Процедура на сервере для обрабочика ОпросУправленияТестомДляРолей
Функция ВыполнитьОпросУправленияТестомДляРолей() Экспорт
	
	Результат = ТЦСервер.ПолучитьЗаписьУправленияТестомПоИдентификатору();
	ТипПриложения = ТЦСервер.ПолучитьТипПриложенияПоИдентификатору();
	
	ТЦСервер.УстановитьТипКлиентскогоПриложения(ТипПриложения);
	Если ТипПриложения = ПредопределенноеЗначение("Перечисление.ТЦТипКлиентскогоПриложения.УправлениеТестом") Тогда
		//логика работы клиента для типа УправлениеТестом
		ПроверкаДляТипаУправлениеТестом(Результат);
	ИначеЕсли ТипПриложения = ПредопределенноеЗначение("Перечисление.ТЦТипКлиентскогоПриложения.АгентТЦ") Тогда
		ПроверкаДляТипаАгентТЦ(Результат);
	ИначеЕсли Не ЗначениеЗаполнено(ТипПриложения) Тогда
		//Если роль не назначена, то переходим в режим ожидания
		ПереключитьРежимОпроса(Ложь);
	КонецЕсли;
	Возврат ТипПриложения;
	
КонецФункции //УстановитьИдКлиентскогоПриложения	

// Проверка для клиентского приложения с типом Управление Тестом
//
// Параметры:
//  Запись - СправочникСсылка.ТЦУправлениеТестом
//
Процедура ПроверкаДляТипаУправлениеТестом(Запись)  Экспорт
	
	ЭлементСценария = ТЦСервер.ПолучитьСценарий(Запись);
	ПараметрыВыполнения = ТЦСервер.ПолучитьПараметрыСценария(Запись);
	
	Если ЗначениеЗаполнено(ЭлементСценария) Тогда
		ФормаСостояниеТестирование = ТЦКлиент.ПолучитьФормуСостояниеТестирования();
		Если ФормаСостояниеТестирование.Открыта() Тогда
			ФормаСостояниеТестирование.Закрыть();
		КонецЕсли;
		
		П = Новый Структура;
		П.Вставить("ПараметрыВыполненияДляВебСервиса", ПараметрыВыполнения);
		
		Форма = ОткрытьФорму("Справочник.ТЦСценарии.ФормаСписка", П);
		Форма.Элементы.Список.ТекущаяСтрока = ЭлементСценария;
		Форма.ВыполнитьСценарий(Истина);
		Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Проверка для клиентского приложения с типом АгентТЦ
//
Процедура ПроверкаДляТипаАгентТЦ(Запись)  Экспорт

	Если ТЦСервер.ЗавершатьАгента(Запись) Тогда
		ЗавершитьРаботуСистемы(Истина);
	КонецЕсли;

КонецПроцедуры //ПроверкаДляТипаАгентТЦ

// Переключение состояния обработчиков
Процедура ПереключитьРежимОпроса(РольНазначена) Экспорт
	
	Если РольНазначена Тогда
		ОтключитьОбработчикОжидания("ОпросУправленияТестомПоИд");
		ПодключитьОбработчикОжидания("ОпросУправленияТестомДляРолей", ТЦСервер.ПолучитьИнтервалОпроса());
	Иначе
		ОтключитьОбработчикОжидания("ОпросУправленияТестомДляРолей");
		ПодключитьОбработчикОжидания("ОпросУправленияТестомПоИд", ТЦСервер.ПолучитьИнтервалОпроса());
	КонецЕсли;
	
КонецПроцедуры

// Проверка типа запущенного клиента
//
Функция ПолучитьТекущуюСредуВыполнения() Экспорт 

	#Если ТолстыйКлиентОбычноеПриложение Тогда 
		Возврат ПредопределенноеЗначение("Перечисление.ТЦТипКлиента.ТолстыйОбычный");
	#ИначеЕсли ТолстыйКлиентУправляемоеПриложение  Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ТЦТипКлиента.ТолстыйУправляемый");
	#ИначеЕсли ТонкийКлиент Тогда  
		Возврат ПредопределенноеЗначение("Перечисление.ТЦТипКлиента.Тонкий1С");
	#ИначеЕсли ВебКлиент Тогда 
		Возврат ПредопределенноеЗначение("Перечисление.ТЦТипКлиента.ТонкийВеб");
	#Иначе
		Возврат ПредопределенноеЗначение("Перечисление.ТЦТипКлиента.ПустаяСсылка");
	#КонецЕсли

КонецФункции//ПолучитьТекущуюСредуВыполнения

// Получить порт агента на текущем компьютере
//
// Параметры:
//  Номер сессии - Число, номер сессии на этом компьютере
//
// Возвращаемое значение:
//  Строка - номер порта агента на этом компьютере в этой сессии
//
Функция ЛокальныйПортАгента(НомерСессии, ИмяКомпьютера) Экспорт
	
	ПортАгента = ТЦСервер.ПолучитьПортАгента(ИмяКомпьютера, НомерСессии);
	
	Возврат ПортАгента;
	
КонецФункции // ЛокальныйПортАгента()

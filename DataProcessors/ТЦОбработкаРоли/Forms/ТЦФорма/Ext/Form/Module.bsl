///////////////////////////////////////////////////////////////////////////////
// В Н И М А Н И Е!
// ПЕРЕМЕННЫЕ, ПРОЦЕДУРЫ И ФУНКЦИИ, НАЧИНАЮЩИЕСЯ С "ТЦ", НЕЛЬЗЯ УДАЛЯТЬ, Т.К.
// ОНИ НЕОБХОДИМЫ ДЛЯ ПРАВИЛЬНОЙ РАБОТЫ ТЕСТ-ЦЕНТРА
//

&НаКлиенте
Перем ТЦКонтекстВыполнения; // Служебная переменная Тест-центра
&НаКлиенте
Перем ТЦИмяОбработчика;     // Служебная переменная Тест-центра

&НаКлиенте
Перем ИндексТекущейОперации; // Индекс текущей операции в очереди операций
&НаКлиенте
Перем ТекущаяФормаОбработки; // Индекс текущей операции в очереди операций
&НаКлиенте
Перем мИндексы Экспорт; // Массив индексов для формирования очереди операций
&НаКлиенте
Перем мФормыОбработки Экспорт; // Массив Форм обработки, ссылки на индексы хранятся в мИндекс
&НаКлиенте
Перем мИнструменты; // Служебные интструменты
&НаКлиенте
Перем мПаузыОбработки Экспорт; // Массив величин пауз между операциями обработок

&НаКлиенте
Перем РезультатВыполненияТекущейОперации;
&НаКлиенте
Перем ВозниклоИсключениеНаТекущейОперации;

///////////////////////////////////////////////////////////////////////////////
// ИНТЕРФЕЙС РАЗРАБОТЧИКА СЦЕНАРИЯ

&НаКлиенте
// Единовременная подготовка данных перед выполнением действия.
// Эта подготовка выполняется только при необходимости и не является
// обязательной.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦРезультатВыполнения.
//   Успешно - если при инициализации ошибок не возникло
//   Предупреждение - если возникшие ошибки позволяют продолжить выполнение
//   Ошибка - если возникли ошибки, которые не позволяют продолжить выполнение
//
Функция ТЦИнициализировать() Экспорт
	
	мИндексы = Новый Массив();
	мФормыОбработки = Новый Массив();
	мПаузыОбработки = Новый Массив();
	
	Попытка
		
		Для Каждого СтрокаОперации Из ТЦОбъект.ИнтенсивностьОпераций Цикл
			
			СсылкаОбработка = ПолучитьСсылкуНаОбработку(СтрокаОперации.Роль);
			ФормаРоли = ПолучитьФорму("Справочник.ТЦРоли.ФормаОбъекта", Новый Структура("Ключ", СтрокаОперации.Роль));
			ИмяФормыОбработки = ТЦКлиент.ПолучитьИмяФормыОбработки(СсылкаОбработка);
			
			П = Новый Структура;
			П.Вставить("ТЦСценарий", ФормаРоли.Параметры.ТЦСценарий);
			П.Вставить("ТЦРоль", СтрокаОперации.Роль);
						
			ФормаОбработки = ПолучитьФорму(ИмяФормыОбработки, П);
			ФормаОбработки.ТЦЗагрузить(ПолучитьПараметры(СтрокаОперации.Роль));
			ЗаполнитьЗначенияСвойств(ФормаОбработки.ТЦКонтекст().ВРМ, ТЦКонтекст().ВРМ);
			ФормаОбработки.ТЦКонтекст().КоэффициентИнтенсивности = ТЦКоэффициентИнтенсивности();
			
			ФормаОбработки.ТЦИнициализировать();
			
			Для Индекс = 1 По СтрокаОперации.Количество Цикл
				мИндексы.Добавить(СтрокаОперации.НомерСтроки - 1);
			КонецЦикла;
			
			мФормыОбработки.Добавить(ФормаОбработки.ЭтаФорма);
			мПаузыОбработки.Добавить(СтрокаОперации.Пауза);
			
		КонецЦикла;
		
		// Перетасуем операции, если нужно
		Если НЕ ТЦОбъект.ВыполнятьВПрямомПорядке Тогда
			
			ГСЧ = Новый ГенераторСлучайныхЧисел();
			Для Индекс = 1 По  мИндексы.Количество() Цикл
				
				ИндексОперации = ГСЧ.СлучайноеЧисло(0,  мИндексы.Количество() - Индекс);
				Временная = мИндексы[ИндексОперации];
				мИндексы[ИндексОперации] = мИндексы[мИндексы.Количество() - Индекс];
				мИндексы[мИндексы.Количество() - Индекс] = Временная;		   
				
			КонецЦикла;
			
		КонецЕсли;
		
		//Паузы между итерациями должны быть
		Если ТЦОбъект.Пауза = 0 Тогда
			ТЦОбъект.Пауза = 1;
		КонецЕсли;
		
		// набор служебных инструментов
		мИнструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
		Результат = ТЦРезультатВыполненияУспешно();
		
	Исключение
		
		ТЦОбщий.ЗаписатьВЖурнал(ОписаниеОшибки(), "Ошибка в ТЦИнициализировать");
		Результат = ТЦРезультатВыполненияПредупреждение();
		
	КонецПопытки;
	
	Возврат Результат; 
	
КонецФункции // ТЦИнициализировать()

&НаСервере
Функция ПолучитьСсылкуНаОбработку(Роль)
	
	Попытка
		ОбъектРоль = Роль.ПолучитьОбъект();
		Возврат ОбъектРоль.Обработка;
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал(ОписаниеОшибки(),"Ошибка в ПолучитьССылкуНаОбработку");
	КонецПопытки; 
	
КонецФункции

&НаКлиенте
// Обработчик заверщения выполнения
Процедура ОжидатьЗавершенияВыполненияОперации()
	
	РезультатВыполненияТекущейОперации = ТекущаяФормаОбработки.ТЦКонтекст().ТекущийРезультатВыполнения;
	
	// Возникло исключение
	// или выполнение действия вернуло ошибку
	Если ТекущаяФормаОбработки.ТЦКонтекст().ВозниклоИсключение ИЛИ РезультатВыполненияТекущейОперации = ТЦРезультатВыполненияОшибка() Тогда
		
		ОтключитьОбработчикОжидания("ОжидатьЗавершенияВыполненияОперации");
		Пояснение = ?(РезультатВыполненияТекущейОперации = ТЦРезультатВыполненияОшибка(), "Функция вернула ошибку: ", "Возникло исключение: ");
		
		ТЦЗавершитьВыполнение(ТЦРезультатВыполненияОшибка(),
								Ложь,
								Пояснение + ТекущаяФормаОбработки.ТЦКонтекст().ТекстИсключенияИлиОшибки);
			
		Если ТЦКонтекстВыполнения.ПоказыватьОшибкиИСообщения Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки;
			Сообщение.Сообщить();
		КонецЕсли;
	
		ТЦОбщий.ЗаписатьВЖурнал(ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки, "Тест-центр", ТЦСтатусСообщенияОшибка());
	
	// Закончилось время, отведенное на тест
	ИначеЕсли (ТекущаяДата() >= ВремяОкончанияТеста) И ТЦОбъект.ДлительностьМинут > 0  Тогда
		
		ТекущаяФормаОбработки.ОтключитьОбработчикОжидания("ТЦОбработчикВыполнения");
		ОтключитьОбработчикОжидания("ОжидатьЗавершенияВыполненияОперации");
		ТЦЗавершитьВыполнение(ТЦРезультатВыполненияУспешно(), Ложь);
	
	// Продолжаем выполнять тест	
	ИначеЕсли РезультатВыполненияТекущейОперации <> Неопределено
		И РезультатВыполненияТекущейОперации <> ТЦКонтекстВыполнения.РезультатВыполнения.Неопределено
		И РезультатВыполненияТекущейОперации <> ТЦКонтекстВыполнения.РезультатВыполнения.Продолжить Тогда

		ОтключитьОбработчикОжидания("ОжидатьЗавершенияВыполненияОперации");
		
		// Лимит по времени не установлен, но достигнут лимит по количеству операций
		Если ТЦОбъект.ДлительностьМинут = 0 И ИндексТекущейОперации = мИндексы.ВГраница() Тогда
			ТЦЗавершитьВыполнение(ТЦРезультатВыполненияУспешно(), Ложь);
			Возврат;
		КонецЕсли;
		
		Если ИндексТекущейОперации = мИндексы.ВГраница() Тогда
			ИндексТекущейОперации = 0;
			ВеличинаПаузы = ТЦОбъект.Пауза;
		Иначе
			ИндексТекущейОперации = ИндексТекущейОперации + 1;
			ВеличинаПаузы = мПаузыОбработки[мИндексы[ИндексТекущейОперации]];
		КонецЕсли;
		
		// Если время вызова следующей операции выходит за отведенное время, то завершаем тест
		Если (ТекущаяДата() + ВеличинаПаузы  >= ВремяОкончанияТеста) И ТЦОбъект.ДлительностьМинут > 0  Тогда
			ТЦЗавершитьВыполнение(ТЦРезультатВыполненияУспешно(), Ложь);
			Возврат;
		КонецЕсли;
		
		ТЦРезультатВыполненияПродолжить("ВыполнитьШагТеста", ВеличинаПаузы, Истина);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Выполняет очередную операцию теста
Функция ВыполнитьШагТеста()
	
	РезультатВыполненияТекущейОперации = Неопределено;
	ВозниклоИсключениеНаТекущейОперации = Ложь;	
	
	ИндексВТаблицеОпераций = мИндексы[ИндексТекущейОперации];
	ТекущаяФормаОбработки = мФормыОбработки[ИндексВТаблицеОпераций];
	ТекущаяФормаОбработки.ТЦКонтекст().ТекущийРезультатВыполнения = Неопределено;
	
	Если (ТекущаяДата() >= ВремяОкончанияТеста) И ТЦОбъект.ДлительностьМинут > 0  Тогда
		ТЦЗавершитьВыполнение(ТЦРезультатВыполненияУспешно(), Ложь);
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		
		РезультатВыполненияТекущейОперации = ТекущаяФормаОбработки.ТЦВыполнить();
		
		Если РезультатВыполненияТекущейОперации = ТЦРезультатВыполненияОшибка() Тогда
			ВозниклоИсключениеНаТекущейОперации = Ложь;
			ТЦЗавершитьВыполнение(ТЦРезультатВыполненияОшибка(),
									Ложь,
									"Функция обработки вернула ошибку. " + ТекущаяФормаОбработки.ТекстИсключенияИлиОшибки);
		КонецЕсли;
		
	Исключение
		
		ВозниклоИсключениеНаТекущейОперации = Истина;
		ТЦЗавершитьВыполнение(ТЦКонтекст().РезультатВыполнения.Неопределено,
								Истина,
								"Возникло исключение: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Если ТЦКонтекстВыполнения.ВозниклоИсключение ИЛИ РезультатВыполненияТекущейОперации = ТЦРезультатВыполненияОшибка() Тогда
		
		Если ТЦКонтекстВыполнения.ПоказыватьОшибкиИСообщения Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки;
			Сообщение.Сообщить();
		КонецЕсли;
		
		ТЦОбщий.ЗаписатьВЖурнал(ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки, "Тест-центр", ТЦСтатусСообщенияОшибка());
		
	ИначеЕсли РезультатВыполненияТекущейОперации = ТЦКонтекст().РезультатВыполнения.Продолжить Тогда
		ПодключитьОбработчикОжидания("ОжидатьЗавершенияВыполненияОперации", 1);
		
	Иначе
		
		// Лимит по времени не установлен, но достигнут лимит по количеству операций
		Если ТЦОбъект.ДлительностьМинут = 0 И ИндексТекущейОперации = мИндексы.ВГраница() Тогда
			ТЦЗавершитьВыполнение(ТЦРезультатВыполненияУспешно(), Ложь);
			Возврат Неопределено;
		КонецЕсли;
		
		Если ИндексТекущейОперации = мИндексы.ВГраница() Тогда
			ИндексТекущейОперации = 0;
			ВеличинаПаузы = ТЦОбъект.Пауза;
		Иначе
			ИндексТекущейОперации = ИндексТекущейОперации + 1;
			ВеличинаПаузы = мПаузыОбработки[мИндексы[ИндексТекущейОперации]];
		КонецЕсли;
		
		// Если время вызова следующей операции выходит за отведенное время, то завершаем тест
		Если (ТекущаяДата() + ВеличинаПаузы  >= ВремяОкончанияТеста) И ТЦОбъект.ДлительностьМинут > 0  Тогда
			ТекущаяФормаОбработки.ОтключитьОбработчикОжидания("ТЦОбработчикВыполнения");
			ТЦЗавершитьВыполнение(ТЦРезультатВыполненияУспешно(), Ложь);
			Возврат Неопределено;
		КонецЕсли;
		
		ТЦРезультатВыполненияПродолжить("ВыполнитьШагТеста", ВеличинаПаузы, Истина);
		
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

&НаКлиенте
// Выполнение действия.
// В этой функции содержится основной код действия, необходимый для выполнения
// сценария.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦРезультатВыполнения.
//   Успешно - если при инициализации ошибок не возникло
//   Предупреждение - если возникшие ошибки позволяют продолжить выполнение
//   Ошибка - если возникли ошибки, которые не позволяют продолжить выполнение
//
Функция ТЦВыполнить() Экспорт
	
	Если мИндексы.Количество() = 0 Тогда
		Возврат ТЦРезультатВыполненияУспешно();
	КонецЕсли;
	
	ИндексТекущейОперации = 0;
	ТекущаяФормаОбработки = Неопределено;
	ВремяНачалаТеста = ТекущаяДата();
	ВремяОкончанияТеста = ВремяНачалаТеста + (ТЦОбъект.ДлительностьМинут * 60);
	
	Возврат ТЦРезультатВыполненияПродолжить("ВыполнитьШагТеста", 0.1 , Истина);
	
КонецФункции // ТЦВыполнить()

&НаКлиенте
// Единовременное удаление созданных при инициализации данных, после выполнения
// действия. Это удаление выполняется только при необходимости и не является
// обязательным.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦРезультатВыполнения.
//   Успешно - если при инициализации ошибок не возникло
//   Предупреждение - если возникшие ошибки позволяют продолжить выполнение
//   Ошибка - если возникли ошибки, которые не позволяют продолжить выполнение
//
Функция ТЦУдалитьДанные() Экспорт
	
	Попытка
		
		Для Каждого формаОперации из мФормыОбработки Цикл
			формаОперации.ТЦУдалитьДанные();
		КонецЦикла;
		
		мИндексы.Очистить();
		мФормыОбработки.Очистить();
		мПаузыОбработки.Очистить();
		Замеры = ТЦПолучитьРезультат();
		Для Каждого Замер из Замеры Цикл
			// Обработка результатов замеров
		КонецЦикла;
		
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал(ОписаниеОшибки(), "Тест-центр");
		Результат=ТЦРезультатВыполненияПредупреждение();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // ТЦУдалитьДанные()


///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАЗРАБОТЧИКА СЦЕНАРИЯ

&НаКлиенте
// Записать значение показателя производительности
//
// Параметры:
//  ИмяПоказателя - Строка, произвольное имя показателя производительности
//  ЗначениеПоказателя - Число, значение показателя
//
Процедура ТЦЗаписатьПоказатель(ИмяПоказателя, ЗначениеПоказателя)
	
	ТЦКлиент.ДобавитьРезультат(ТЦКонтекст(), ИмяПоказателя, ЗначениеПоказателя);
	
КонецПроцедуры // ТЦЗаписатьПоказатель()

&НаКлиенте
// Завершить выполнение действия
//
// Параметры:
//  Результат - ПеречислениеСсылка.ТЦРезультатВыполнения
//  ВозниклоИсключение - Булево, при выполнении обработчика ожидания
//                 возникла и обработана исключительная ситуация
//                 указывать этот параметр явно не следует
//
Процедура ТЦЗавершитьВыполнение(Результат, ВозниклоИсключение = Ложь, ТекстОшибкиОбработки = "")
	
	ОтключитьОбработчикОжидания("ТЦОбработчикВыполнения");
	ФормаВРМ = ТЦКонтекст().ФормаВРМ;
	
	Если ФормаВРМ <> Неопределено Тогда
		ФормаВРМ.РезультатВыполнения = Результат;
		ФормаВРМ.ВозниклоИсключение = ВозниклоИсключение;
		ФормаВРМ.ТекстОшибкиОбработки = ТекстОшибкиОбработки;
	КонецЕсли;
	
	ТЦКонтекстВыполнения.ТекущийРезультатВыполнения = Результат;
	ТЦКонтекстВыполнения.ВозниклоИсключение = ВозниклоИсключение;
	ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки = ТекстОшибкиОбработки;
	
КонецПроцедуры // ТЦЗавершитьВыполнение()

&НаКлиенте
// Номер ВРМ, уникальный в рамках сценария
//
// Возвращаемое значение:
//  Число - номер текущего ВРМ
//
Функция ТЦНомерВРМ()
	
	Возврат ТЦКонтекст().ВРМ.Номер;
	
КонецФункции // ТЦНомерВРМ()

&НаКлиенте
// Ссылка на сценарий
//
// Возвращаемое значение:
//  СправочникСсылка.ТЦСценарии
//
Функция ТЦСценарий()
	
	Возврат ТЦКонтекст().ВРМ.Сценарий;
	
КонецФункции // ТЦСценарий()

&НаКлиенте
// Возвращает коэффициент интенсивности текущего сценария
//
// Возвращаемое значение:
//  Число
//
Функция ТЦКоэффициентИнтенсивности()
	
	Возврат ТЦКонтекст().КоэффициентИнтенсивности;
	
КонецФункции // ТЦСценарий()

&НаКлиенте
// Получить имя текущей роли
//
// Возвращаемое значение:
//  Строка - имя текущей роли
//
Функция ТЦИмяРоли()
	
	Возврат ТЦКонтекст().ВРМ.ИмяРоли;
	
КонецФункции // ТЦИмяРоли()

&НаКлиенте
// Получить имя текущей роли
//
// Возвращаемое значение:
//  Строка - имя текущей роли
//
Функция ТЦРоль()
	
	Возврат ТЦКонтекст().ВРМ.Роль;
	
КонецФункции // ТЦРоль()

&НаКлиенте
// Получить имя текущего пользователя
//
// Возвращаемое значение:
//  Строка - имя текущего пользователя
//
Функция ТЦИмяПользователя()
	
	Возврат ТЦКонтекст().ВРМ.Пользователь;
	
КонецФункции // ТЦИмяПользователя()

&НаКлиенте
// Получить имя текущего компьютера
//
// Возвращаемое значение:
//  Строка - имя текущего компьютера
//
Функция ТЦИмяКомпьютера()
	
	Возврат ТЦКонтекст().ВРМ.Компьютер;
	
КонецФункции // ТЦИмяКомпьютера()

&НаКлиенте
// Получить результат выполнения "Успешно"
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦРезультатВыполнения.Успешно
//
Функция ТЦРезультатВыполненияУспешно()
	
	Возврат ТЦКонтекст().РезультатВыполнения.Успешно;
	
КонецФункции // ТЦРезультатВыполненияУспешно()

&НаКлиенте
// Получить результат выполнения "Предупреждение"
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦРезультатВыполнения.Предупреждение
//
Функция ТЦРезультатВыполненияПредупреждение()
	
	Возврат ТЦКонтекст().РезультатВыполнения.Предупреждение;
	
КонецФункции // ТЦРезультатВыполненияПредупреждение()

&НаКлиенте
// Получить результат выполнения "Ошибка"
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦРезультатВыполнения.Ошибка
//
Функция ТЦРезультатВыполненияОшибка()
	
	Возврат ТЦКонтекст().РезультатВыполнения.Ошибка;
	
КонецФункции // ТЦРезультатВыполненияОшибка()

&НаКлиенте
// Получить результат выполнения "Продолжить" и подключить обработчик
// ТЦОбработчикВыполнения с указанным интервалом, который в свою очередь,
// Периодически выполняет функцию указанную в параметре Обработчик.
//
// Параметры:
//  Интервал - Число, через которое будет вызываться обработчик
//  Однократно - Булево, Признак однократного выполнения обработчика ожидания
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦРезультатВыполнения.Продолжить
//
Функция ТЦРезультатВыполненияПродолжить(Обработчик, Интервал, Однократно = Ложь)
	
	ТЦИмяОбработчика = Обработчик;
	ПодключитьОбработчикОжидания("ТЦОбработчикВыполнения", Интервал, Однократно);
	Возврат ТЦКонтекст().РезультатВыполнения.Продолжить;
	
КонецФункции // ТЦРезультатВыполненияОшибка()

&НаКлиенте
// Получить статус сообщения "Информация"
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦСтатусСообщения.Информация
//
Функция ТЦСтатусСообщенияИнформация()
	
	Возврат ТЦКонтекст().СтатусСообщения.Информация;
	
КонецФункции // ТЦСтатусСообщенияИнформация()

&НаКлиенте
// Получить статус сообщения "Предупреждение"
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦСтатусСообщения.Предупреждение
//
Функция ТЦСтатусСообщенияПредупреждение()
	
	Возврат ТЦКонтекст().СтатусСообщения.Предупреждение;
	
КонецФункции // ТЦСтатусСообщенияПредупреждение()

&НаКлиенте
// Получить статус сообщения "Ошибка"
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦСтатусСообщения.Ошибка
//
Функция ТЦСтатусСообщенияОшибка()
	
	Возврат ТЦКонтекст().СтатусСообщения.Ошибка;
	
КонецФункции // ТЦСтатусСообщенияОшибка()


///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ТЕСТ-ЦЕНТРА

&НаКлиенте
// Обработчик команды "Выполнить".
// Выполняет инициализацию, действие и удаление созданных данных.
//
Процедура ВыполнитьДействие(Команда) Экспорт
	
	ТЦВыполнитьТестирование(Ложь, Истина);
	
КонецПроцедуры // ВыполнитьДействие()

&НаКлиенте
// Обработчик выполнения действия в слечае возврата из ТЦВыполнить результата
// ПеречислениеСсылка.ТЦРезультатВыполнения.ТЦПродолжить
//
Процедура ТЦОбработчикВыполнения()
	
	Попытка
		Результат = Вычислить(ТЦИмяОбработчика + "()");
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "ВП");
		ТЦЗавершитьВыполнение(
			ТЦКонтекст().РезультатВыполнения.Неопределено,
			Истина);
	КонецПопытки;
	
КонецПроцедуры // ТЦОбработчикВыполнения()

&НаКлиенте
// Получить контекст выполнения обработки
//
// Возвращаемое значение:
//  Структура - см. ТЦСервер.СоздатьКонтекстВыполненияОбработки()
//
Функция ТЦКонтекст() Экспорт
	
	Если ТЦКонтекстВыполнения = Неопределено Тогда
		ТЦКонтекстВыполнения = ТЦСервер.СоздатьКонтекстВыполненияОбработки();
	КонецЕсли;
	
	Возврат ТЦКонтекстВыполнения;
	
КонецФункции // ТЦКонтекст()

&НаКлиенте
// Загрузить параметры обработки и формы
//
// Параметры:
//  ПараметрыЗагрузки - ХранилищеЗначения
//
Процедура ТЦЗагрузить(ПараметрыЗагрузки) Экспорт
	
	ТЦЗагрузитьНаСервере(ПараметрыЗагрузки);
	ТЦКонтекст();
	
КонецПроцедуры // ТЦЗагрузить()

&НаСервере
// Загрузить параметры обработки.
// Во время загрузки устанавливаются ранее сохраненные значения реквизитов
//
// Параметры:
//  АрхивЗначений - ХранилищеЗначения, загружаемые данные
//
Процедура ТЦЗагрузитьНаСервере(АрхивЗначений)
	
	ТекущийОбъект = РеквизитФормыВЗначение("ТЦОбъект");
	ТЦСервер.ЗагрузитьРеквизитыОбработки(ТекущийОбъект, АрхивЗначений);
	ЗначениеВРеквизитФормы(ТекущийОбъект, "ТЦОбъект");
	
КонецПроцедуры // ТЦЗагрузитьНаСервере()

&НаКлиенте
// Сохранить значения реквизитов для возможности последующей загрузки
//
// Возвращаемое значение:
//  ХранилищеЗначения - запакованые значения реквизитов
//
Функция ТЦСохранить() Экспорт
	
	Возврат ТЦСохранитьНаСервере();
	
КонецФункции // ТЦСохранить()

&НаСервере
// Сохранить значения реквизитов для возможности последующей загрузки
//
// Возвращаемое значение:
//  ХранилищеЗначения - запакованые значения реквизитов
//
Функция ТЦСохранитьНаСервере()
	
	ТекущийОбъект = РеквизитФормыВЗначение("ТЦОбъект");
	Возврат ТЦСервер.СохранитьРеквизитыОбработки(ТекущийОбъект);
	
КонецФункции // ТЦСохранитьНаСервере()

&НаКлиенте
// Получить результат выполнения тестирования
//
// Возвращаемое значение:
//  Соответствие - показатели и их значения
//
Функция ТЦПолучитьРезультат() Экспорт
	
	Возврат ТЦКонтекст().Результаты;
	
КонецФункции // ТЦПолучитьРезультат()

&НаКлиенте
// Выполняет инициализацию, действие и удаление созданных данных
Процедура ТЦВыполнитьТестирование(ЗавершатьРаботу = Истина, ПоказыватьОшибкиИСообщения = Ложь)
	
	ТЦКонтекст().ПоказыватьОшибкиИСообщения = ПоказыватьОшибкиИСообщения;
	ТЦКонтекстВыполнения.ЗавершатьРаботуПослеВыполнения = ЗавершатьРаботу;
	
	ТЦКонтекстВыполнения.МассивДействий = Новый Массив;
	ТЦКонтекстВыполнения.МассивДействий.Добавить("ТЦИнициализировать()");
	ТЦКонтекстВыполнения.МассивДействий.Добавить("ТЦВыполнить()");
	ТЦКонтекстВыполнения.МассивДействий.Добавить("ТЦУдалитьДанные()");
	
	Для Каждого ТекущееДействие Из ТЦКонтекстВыполнения.МассивДействий Цикл
		
		РезультатВыполнения = ТЦВыполнитьДействиеТеста(ТекущееДействие);

		Если РезультатВыполнения = ТЦКонтекстВыполнения.РезультатВыполнения.Продолжить
			ИЛИ РезультатВыполнения = ТЦРезультатВыполненияОшибка()
			ИЛИ ТЦКонтекстВыполнения.ВозниклоИсключение Тогда

			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТЦКонтекстВыполнения.ЗавершатьРаботуПослеВыполнения Тогда
		ЗавершитьРаботуСистемы(Ложь, Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Обработчик заверщения выполнения
Процедура ТЦОжиданиеЗавершенияВыполнения()
	
	ЗавершитьВыполнение = Ложь;
	ТекущийРезультатВыполнения = ТЦКонтекст().ТекущийРезультатВыполнения;
	ТекущаяОперация = ТЦКонтекстВыполнения.ТекущаяОперация;
	
	// Возникло исключение
	// или выполнение действия вернуло ошибку
	Если ТЦКонтекстВыполнения.ВозниклоИсключение ИЛИ ТекущийРезультатВыполнения = ТЦРезультатВыполненияОшибка() Тогда
		
		ЗавершитьВыполнение = Истина;
		Пояснение = ?(ТекущийРезультатВыполнения = ТЦРезультатВыполненияОшибка(), "Функция вернула ошибку. ", "");
		
		ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки = "Возникла ошибка при выполнении " + ТекущаяОперация +
														Символы.ПС + Пояснение + ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки;
			
		Если ТЦКонтекстВыполнения.ПоказыватьОшибкиИСообщения Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки;
			Сообщение.Сообщить();
		КонецЕсли;
	
		ТЦОбщий.ЗаписатьВЖурнал(ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки, "Тест-центр", ТЦСтатусСообщенияОшибка());
	
	// Завершилась часть теста
	ИначеЕсли ТекущийРезультатВыполнения <> Неопределено
		И ТекущийРезультатВыполнения <> ТЦКонтекстВыполнения.РезультатВыполнения.Неопределено
		И ТекущийРезультатВыполнения <> ТЦКонтекстВыполнения.РезультатВыполнения.Продолжить Тогда

		Индекс = ТЦКонтекстВыполнения.МассивДействий.Найти(ТекущаяОперация);
		// Произошла ошибка
		Если Индекс = Неопределено Тогда
			ЗавершитьВыполнение = Истина;
			
		// Все операции выполнены	
		ИначеЕсли Индекс = ТЦКонтекстВыполнения.МассивДействий.ВГраница() Тогда
			ЗавершитьВыполнение = Истина;
			
		// Продолжаем выполнение операций
		Иначе
			ОтключитьОбработчикОжидания("ТЦОжиданиеЗавершенияВыполнения");
			
			МассивДействий = ТЦКонтекстВыполнения.МассивДействий;
			Для Сч = Индекс + 1 По МассивДействий.ВГраница() Цикл
				
				ТекущаяОперация = МассивДействий[Сч];
				РезультатВыполнения = ТЦВыполнитьДействиеТеста(ТекущаяОперация);
				
				Если РезультатВыполнения = ТЦКонтекстВыполнения.РезультатВыполнения.Продолжить
					ИЛИ РезультатВыполнения = ТЦРезультатВыполненияОшибка()
					ИЛИ ТЦКонтекстВыполнения.ВозниклоИсключение Тогда
					Возврат;
				КонецЕсли;
			КонецЦикла;
			
			ЗавершитьВыполнение = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗавершитьВыполнение Тогда
		ОтключитьОбработчикОжидания("ТЦОжиданиеЗавершенияВыполнения");
		Если ТЦКонтекстВыполнения.ЗавершатьРаботуПослеВыполнения Тогда
			ЗавершитьРаботуСистемы(Ложь, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Служебная функция, предназначенная для выполнения указанной процедуры и записи результатов в текстовый файл.
//   Параметры:
//      ИмяПроцедуры - имя тестовой процедуры, которую нужно выполнить.
//						
Функция ТЦВыполнитьДействиеТеста(Знач ИмяФункции)
	
	ТЦКонтекст().ТекущийРезультатВыполнения = Неопределено;
	ТЦКонтекстВыполнения.ВозниклоИсключение = Ложь;
	ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки = "";
	ТЦКонтекстВыполнения.ТекущаяОперация = ИмяФункции;
	
	Попытка
		РезультатВыполнения = Вычислить(ИмяФункции);

		Если РезультатВыполнения = ТЦРезультатВыполненияОшибка() Тогда
			ТЦВозниклоИсключение = Ложь;
			ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки = "Возникла ошибка при выполнении " + ИмяФункции + Символы.ПС +
															"Функция вернула ошибку. " + ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки;
		КонецЕсли;
		
	Исключение

		РезультатВыполнения = ТЦКонтекст().РезультатВыполнения.Неопределено;
		ТЦКонтекстВыполнения.ВозниклоИсключение = Истина;		
		ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки = "Возникла ошибка при выполнении " + ИмяФункции + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
	КонецПопытки;
				
	Если ТЦКонтекстВыполнения.ВозниклоИсключение ИЛИ РезультатВыполнения = ТЦРезультатВыполненияОшибка() Тогда
		
		Если ТЦКонтекстВыполнения.ПоказыватьОшибкиИСообщения Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки;
			Сообщение.Сообщить();
		КонецЕсли;
		
		ТЦОбщий.ЗаписатьВЖурнал(ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки, "Тест-центр", ТЦСтатусСообщенияОшибка());
		Если ТЦКонтекстВыполнения.ЗавершатьРаботуПослеВыполнения Тогда
			ЗавершитьРаботуСистемы(Ложь, Ложь);
		КонецЕсли;
		
	ИначеЕсли РезультатВыполнения = ТЦКонтекст().РезультатВыполнения.Продолжить Тогда
		ПодключитьОбработчикОжидания("ТЦОжиданиеЗавершенияВыполнения", 1);
	КонецЕсли;
	
	ТЦКонтекстВыполнения.ТекущийРезультатВыполнения = РезультатВыполнения;
	Возврат РезультатВыполнения;
		
КонецФункции	// ВыполнитьДействиеТеста

&НаКлиенте
// Закрыть форму и вернуть значение Истина
//
Процедура ТЦОК(Команда)
	
	Закрыть(Истина);
	
КонецПроцедуры // ТЦОК()

&НаКлиенте
// Обработчик ПередОончаниемРедактирования для табличной части ИнтенсивностьОпераций
Процедура ТЦИнтенсивностьОперацийПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элементы.ИнтенсивностьОпераций.ТекущиеДанные.Количество = 0 Тогда
		Элементы.ИнтенсивностьОпераций.ТекущиеДанные.Количество = 1;
	КонецЕсли;

КонецПроцедуры

&НаСервере
// Получить параметры обработки
//
// Возвращаемое значение:
//  ХранилищеЗначения
//
Функция ПолучитьПараметры(Форма)
	
	Возврат Форма.Параметры;
	
КонецФункции // ПолучитьПараметры()

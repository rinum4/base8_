&НаКлиенте
Перем МетаданныеТЦДляИсключений;

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ПустаяСтрока(ПараметрЗапуска) Тогда
		
		КомандаВстраивания				= "Merge;";
		КомандаИзСтрокиПараметров		= Лев(ПараметрЗапуска, СтрДлина(КомандаВстраивания));
		
		Если Нрег(КомандаИзСтрокиПараметров) = Нрег(КомандаВстраивания) Тогда
			
			ЗавершатьРаботуСистемы	 = Истина;
			СтрокаПараметров		 = Прав(ПараметрЗапуска, СтрДлина(ПараметрЗапуска) - СтрДлина(КомандаВстраивания));
			ПараметрыКакСоответствие = РазложитьСтрокуПараметровВСоответствие(СтрокаПараметров);
			
			Результат = ЗаполнитьПараметрыИзСоответствия(ПараметрыКакСоответствие);
			Если Не Результат Тогда
				ЗаписатьРезультатВФайл(ФайлРезультата, "Failed", Истина);
				Возврат;
			КонецЕсли;
			
			Если Объект.ОбновитьФайлыЦелевойКонфигурации
				ИЛИ НЕ ПустаяСтрока(Объект.СерверПредприятия)
				ИЛИ НЕ ПустаяСтрока(Объект.ИмяИнформационнойБазы)
				ИЛИ НЕ ПустаяСтрока(Объект.ФайлДанныхТестЦентра)
				ИЛИ НЕ ПустаяСтрока(Объект.ФайлДанныхТестЦентра)
				ИЛИ НЕ ПустаяСтрока(Объект.КонечныйФайлВыгрузки)Тогда
				
				Объект.ПрименитьИзмененияКИБ	= Истина;
				
			КонецЕсли;
			
			Если ПустаяСтрока(Объект.КаталогКонфигуратораИКлиента) Тогда
				
				СисИнфо = Новый СистемнаяИнформация;
				
				Если СравнитьВерсии(СисИнфо.ВерсияПриложения, "8.3.7") >= 0 Тогда
					Объект.ВерсияПлатформы837ИВыше = Истина;
				Иначе
					Объект.ВерсияПлатформы837ИВыше = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			Результат = ВстроитьТЦ();
			РезультатТекст = ?(Результат, "Ok", "Failed");
			ЗаписатьРезультатВФайл(ФайлРезультата, РезультатТекст, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура КаталогТестЦентраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыбратьКаталогНачало(Объект.КаталогТестЦентра, "КаталогТестЦентра");
КонецПроцедуры

&НаКлиенте
Процедура ФайлДанныхТестЦентраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Парам = Новый Структура;
	Парам.Вставить("ИмяРеквизита", "ФайлДанныхТестЦентра");
	Парам.Вставить("Фильтр", "Документ XML (*.xml)|*.xml");
	
	ВыбратьФайлНачало(Объект.ФайлДанныхТестЦентра, Парам);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогЦелевойКонфигурацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыбратьКаталогНачало(Объект.КаталогЦелевойКонфигурации, "КаталогЦелевойКонфигурации");
КонецПроцедуры

&НаКлиенте
Процедура КаталогКонфигуратораИКлиентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыбратьКаталогНачало(Объект.КаталогКонфигуратораИКлиента, "КаталогКонфигуратораИКлиента");
КонецПроцедуры

&НаКлиенте
Процедура КонечныйФайлВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Парам = Новый Структура;
	Парам.Вставить("ИмяРеквизита", "КонечныйФайлВыгрузки");
	Парам.Вставить("Фильтр", "Файл выгрузки ИБ (*.dt)|*.dt");
	
	ВыбратьФайлНачало(Объект.КонечныйФайлВыгрузки, Парам);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогКонфигуратораПриИзменении(Элемент)

	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзмененияКИБПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВстроитьТЦ(Команда)
	
	ВстроитьТЦ();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	Если Объект.ПрименитьИзмененияКИБ Тогда
		
		Элементы.КаталогКонфигуратора.Доступность	= Истина;
		Элементы.СерверПредприятия.Доступность		= Истина;
		Элементы.ИмяИнформационнойБазы.Доступность	= Истина;
		Элементы.ЛогинИБ.Доступность				= Истина;
		Элементы.ПарольИБ.Доступность				= Истина;
		Элементы.ОбновитьФайлыЦелевойКонфигурации.Доступность	= Истина;
		Элементы.ФайлДанныхТестЦентра.Доступность				= Истина;
		Элементы.КонечныйФайлВыгрузки.Доступность				= Истина;
		
	Иначе
		
		Элементы.КаталогКонфигуратора.Доступность	= Ложь;
		Элементы.СерверПредприятия.Доступность		= Ложь;
		Элементы.ИмяИнформационнойБазы.Доступность	= Ложь;
		Элементы.ЛогинИБ.Доступность				= Ложь;
		Элементы.ПарольИБ.Доступность				= Ложь;
		Элементы.ОбновитьФайлыЦелевойКонфигурации.Доступность	= Ложь;
		Элементы.ФайлДанныхТестЦентра.Доступность				= Ложь;
		Элементы.КонечныйФайлВыгрузки.Доступность				= Ложь;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.КаталогКонфигуратораИКлиента) Тогда
		
		Элементы.ВерсияПлатформы837ИВыше.Доступность = Ложь;
		СисИнфо = Новый СистемнаяИнформация;
		
		Если СравнитьВерсии(СисИнфо.ВерсияПриложения, "8.3.7") >= 0 Тогда
			Объект.ВерсияПлатформы837ИВыше = Истина;
		Иначе
			Объект.ВерсияПлатформы837ИВыше = Ложь;
		КонецЕсли;
		
	Иначе
		
		Элементы.ВерсияПлатформы837ИВыше.Доступность = Истина;
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Текст, ПутьКДанным = "")
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.ПутьКДанным = ПутьКДанным;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие = Неопределено) Экспорт
	
	Имя = ?(Событие = Неопределено, "Встраивание Тест-центра", Событие);
	ЗаписьЖурналаРегистрации(Имя, УровеньЖурналаРегистрации.Ошибка,, "Встраивание Тест-центра", ТекстОшибки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьСообщениеВЖурнал(ТекстСообщения, Событие = Неопределено) Экспорт
	
	Имя = ?(Событие = Неопределено, "Встраивание Тест-центра", Событие);
	ЗаписьЖурналаРегистрации(Имя, УровеньЖурналаРегистрации.Информация,, "Встраивание Тест-центра", ТекстСообщения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие)
	
	СообщитьПользователю(ТекстОшибки);
	ЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьИЗаписатьСообщениеВЖурнал(ТекстСообщения, Событие)
	
	СообщитьПользователю(ТекстСообщения);
	ЗаписатьСообщениеВЖурнал(ТекстСообщения, Событие);
	
КонецПроцедуры

// Запускает клиентское приложение и контролирует результаты его работы
//
// Параметры:
//  СтрокаЗапуска		 - Строка	 - Строка запуска приложения.
//  РабочийКаталог		 - Строка	 - Рабочий каталог при запуске приложения.
//  ИспользоватьЛог		 - Строка	 - Добавляет параметр запуска "/Out" для возможности получения журнала действий конфигуратора.
//  СообщениеОбУспехе	 - Строка	 - Сообщение, показывающееся в случае успешного завершения приложения.
//  СообщениеОбОшибке	 - Строка	 - Сообщение, показывающееся в случае завершения приложения с ошибкой.
//  Событие				 - Строка	 - События, указывающееся в журнале регистрации
//  КонтрольЧерезФайл	 - Булево	 - Указывает, что работу клиентского приложения нужно проконтролировать через файл результатов.
//  УспешныйРезультат	 - Строка	 - Используется при контроле через файл результатов, содержит сообщение об успехе,
//									   которое должно быть в файле результатов.
// 
// Возвращаемое значение:
//   - Число - Код возврата клиентского приложения
//
&НаКлиенте
Функция ЗапуститьКлиента(Знач СтрокаЗапуска, Знач РабочийКаталог, Знач ИспользоватьЛог, Знач СообщениеОбУспехе, Знач СообщениеОбОшибке, Знач Событие, Знач КонтрольЧерезФайл = Ложь, Знач УспешныйРезультат = "")
	
	КодВозврата	= 0;
	
	Если ИспользоватьЛог Тогда
		ВременныйЛогОперации = ПолучитьИмяФайлаВременногоЛога();
		СтрокаЗапуска = СтрокаЗапуска +  " /Out """ + ВременныйЛогОперации + """";
	КонецЕсли;
	
	Если КонтрольЧерезФайл Тогда
		ФайлКонтроля = ПолучитьИмяФайлаВременногоЛога();
		СтрокаЗапуска = СтрЗаменить(СтрокаЗапуска, "%ФайлКонтроля%", ФайлКонтроля);
	КонецЕсли;
	
	Попытка
		ЗапуститьПриложение(СтрокаЗапуска, РабочийКаталог, Истина, КодВозврата);
	Исключение
		ТекстОшибки = СообщениеОбОшибке + Символы.ПС + ОписаниеОшибки();
		ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
		Возврат 9999;
	КонецПопытки;
	
	Если КодВозврата <> 0 Тогда

		ТекстОшибки = СообщениеОбОшибке;
		
		Если ИспользоватьЛог Тогда
			СодержимоеЛога	= ПолучитьСодержимоеТекстовогоФайла(ВременныйЛогОперации);
			Если СодержимоеЛога = Неопределено Тогда
				Возврат КодВозврата;
			КонецЕсли;
			
			ТекстОшибки = ТекстОшибки + Символы.ПС + СодержимоеЛога;
			
		КонецЕсли;
		
		ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
		Возврат КодВозврата;
		
	КонецЕсли;
	
	Если КонтрольЧерезФайл Тогда
		РезультатИзФайла = ПолучитьСодержимоеТекстовогоФайла(ФайлКонтроля);
		
		Если СокрЛП(РезультатИзФайла) <> СокрЛП(УспешныйРезультат) Тогда
			ПоказатьИЗаписатьОшибкуВЖурнал(СообщениеОбОшибке + Символы.ПС
											+ ? (РезультатИзФайла = "", "", "Результат: " + РезультатИзФайла), Событие);
			Возврат 9999;
		КонецЕсли;
	КонецЕсли;	

	ПоказатьИЗаписатьСообщениеВЖурнал(СообщениеОбУспехе, Событие);
	
	Возврат КодВозврата;
	
КонецФункции

// Встраивает Тест-центр в целевую конфигурацию.
// Встраивает конфигурацию Тест-центра (заранее выгруженную в файлы) из каталога файлов конфигурации Тест-центр.
// Встраивание происходит в через изменение файлов целевой конфигурации, размещенных каталоге файлов целевой конфигурации.
// Файлы целевой конфигурации можно предварительно выгрузить в каталог вручную, либо указать параметры доступа
// к информационной базе и взвести флаги "Применить изменения к информационной базе" и "Обновить файлы целевой конфигурации".
// При взведенном флаге "Применить изменения к информационной базе" измененная конфигурация загружается в информационную базу.
// Если указан файл данных Тест-центра (предварительно формируется универсальной обработкой "Выгрузка и загрузка данных XML"),
// то он будет загружен в информационную базу.
// Если указан конечный файл выгрузки, то информационная база будет выгружена в этот файл.
// 
// Возвращаемое значение:
//   - Булево — Истина в  случае успешного выполнения всех операций, Ложь — в случае ошибок.
//
&НаКлиенте
Функция ВстроитьТЦ() Экспорт
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнениеРеквизитов() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СисИнфо = Новый СистемнаяИнформация;
	ЭтоWindows = (СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64);

	Если ЭтоWindows Тогда
		СтрокаЗапускаКонфигуратора	= """" + ?(ПустаяСтрока(Объект.КаталогКонфигуратораИКлиента), КаталогПрограммы(), Объект.КаталогКонфигуратораИКлиента) + "\1cv8"" DESIGNER /IBConnectionString " + """Srvr=""""" + Объект.СерверПредприятия + """"";Ref=""""" + Объект.ИмяИнформационнойБазы + """"";""" + " /N """ + Объект.ЛогинИБ + """ /P """ + Объект.ПарольИБ;
		СтрокаЗапускаТонкогоКлиента	= """" + ?(ПустаяСтрока(Объект.КаталогКонфигуратораИКлиента), КаталогПрограммы(), Объект.КаталогКонфигуратораИКлиента) + "\1cv8c"" /IBConnectionString " + """Srvr=""""" + Объект.СерверПредприятия + """"";Ref=""""" + Объект.ИмяИнформационнойБазы + """"";""" + " /N """ + Объект.ЛогинИБ + """ /P """ + Объект.ПарольИБ;
	Иначе
		СтрокаЗапускаКонфигуратора	= """" + ?(ПустаяСтрока(Объект.КаталогКонфигуратораИКлиента), КаталогПрограммы(), Объект.КаталогКонфигуратораИКлиента) + "/1cv8"" DESIGNER /IBConnectionString " + """Srvr=""""" + Объект.СерверПредприятия + """"";Ref=""""" + Объект.ИмяИнформационнойБазы + """"";""" + " /N """ + Объект.ЛогинИБ + """ /P """ + Объект.ПарольИБ;
		СтрокаЗапускаТонкогоКлиента	= """" + ?(ПустаяСтрока(Объект.КаталогКонфигуратораИКлиента), КаталогПрограммы(), Объект.КаталогКонфигуратораИКлиента) + "/1cv8c"" /IBConnectionString " + """Srvr=""""" + Объект.СерверПредприятия + """"";Ref=""""" + Объект.ИмяИнформационнойБазы + """"";""" + " /N """ + Объект.ЛогинИБ + """ /P """ + Объект.ПарольИБ;
	КонецЕсли;
	
	Если Объект.ВерсияПлатформы837ИВыше Тогда
		СтрокаФорматаВыгрузки = " -format Plain";
	Иначе
		СтрокаФорматаВыгрузки = "";
	КонецЕсли;
	
	// Выгрузим конфигурацию в файлы.
	Если Объект.ОбновитьФайлыЦелевойКонфигурации И Объект.ПрименитьИзмененияКИБ Тогда
		
		СтрокаЗапуска	= СтрокаЗапускаКонфигуратора + """ /DumpConfigToFiles """ + Объект.КаталогЦелевойКонфигурации + """" + СтрокаФорматаВыгрузки + " /Visible";
		КодВозврата = ЗапуститьКлиента(СтрокаЗапуска, Объект.КаталогКонфигуратораИКлиента, Истина,
							НСтр("ru = 'Выгрузка конфигурации в файлы успешно завершена.'"),
							НСтр("ru = 'Не удалось выгрузить конфигурацию в файлы.'"),
							НСтр("ru = 'Выгрузка конфигурации в файлы.'"));
							
		Если КодВозврата <> 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
		
	// Удалим Тест-центр из файлов целевой конфигурации.
	Результат = УдалитьЭлементыТЦ(Объект.КаталогЦелевойКонфигурации);
	Если Не Результат Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Встроим Тест-центр в файлы целевой конфигурации.
	Результат = ВстроитьЭлементыТЦ(Объект.КаталогЦелевойКонфигурации, Объект.КаталогТестЦентра);
	Если Не Результат Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Операций с информационной базой
	Если Объект.ПрименитьИзмененияКИБ Тогда
	
		// Загрузка файлов конфигурации в ИБ
		СтрокаЗапуска	= СтрокаЗапускаКонфигуратора + """ /LoadConfigFromFiles """ + Объект.КаталогЦелевойКонфигурации + """" + СтрокаФорматаВыгрузки + " /Visible";
		КодВозврата = ЗапуститьКлиента(СтрокаЗапуска, Объект.КаталогКонфигуратораИКлиента, Истина,
							НСтр("ru = 'Загрузка конфигурации из файлов успешно завершена.'"),
							НСтр("ru = 'Не удалось загрузить конфигурацию из файлов.'"),
							НСтр("ru = 'Загрузка конфигурации из файлов'"));
							
		Если КодВозврата <> 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	
		// Сохранение конфигурации
		СтрокаЗапуска	= СтрокаЗапускаКонфигуратора + """ /UpdateDBCfg -Dynamic- /Visible";
		КодВозврата = ЗапуститьКлиента(СтрокаЗапуска, Объект.КаталогКонфигуратораИКлиента, Истина,
							НСтр("ru = 'Конфигурация информационной базы успешно сохранена.'"),
							НСтр("ru = 'Не удалось сохранить конфигурацию информационной базы.'"),
							НСтр("ru = 'Сохранение конфигурации ИБ'"));
							
		Если КодВозврата <> 0 Тогда
			Возврат Ложь;
		КонецЕсли;
							
		// Загрузка данных Тест-центра из XML-файла
		Если Не ПустаяСтрока(Объект.ФайлДанныхТестЦентра) Тогда
			
			ПутьКОбработкеВыгрузкиИЗагрузкиДанных = СохранитьОбработкуВФайл("ОбработкаВыгрузкиЗагрузкиДанных");
			Если ПутьКОбработкеВыгрузкиИЗагрузкиДанных = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
			СтрокаЗапуска	= СтрокаЗапускаТонкогоКлиента + """ /Execute """ + ПутьКОбработкеВыгрузкиИЗагрузкиДанных +  """ /C ""UploadData;DataFile=" + Объект.ФайлДанныхТестЦентра + ";Result=%ФайлКонтроля%;""";
			КодВозврата = ЗапуститьКлиента(СтрокаЗапуска, Объект.КаталогКонфигуратораИКлиента, Ложь,
								НСтр("ru = 'Загружены данные Тест-центра.'"),
								НСтр("ru = 'Не удалось загрузить данные Тест-центра.'"),
								НСтр("ru = 'Загрузка данных Тест-центра из XML'"), Истина, "Ok");

			Если КодВозврата <> 0 Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// Выполнение обработки добавления роли "ТестЦентр" пользователям информационной базы
		ПутьКОбработкеДобавленияРоли = СохранитьОбработкуВФайл("ОбработкаДобавленияРолиТестЦентра");
		Если ПутьКОбработкеДобавленияРоли = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
			
		СтрокаЗапуска	= СтрокаЗапускаТонкогоКлиента + """ /Execute """ + ПутьКОбработкеДобавленияРоли +  """ /C ""%ФайлКонтроля%""";
		КодВозврата = ЗапуститьКлиента(СтрокаЗапуска, Объект.КаталогКонфигуратораИКлиента, Ложь,
							НСтр("ru = 'Добавлена роль ""ТестЦентр"" пользователям.'"),
							НСтр("ru = 'Не удалось добавить роль ""ТестЦентр"" пользователям'"),
							НСтр("ru = 'Добавление роли ""ТестЦентр"" пользователям ИБ'"), Истина, "Ok");

		Если КодВозврата <> 0 Тогда
			Возврат Ложь;
		КонецЕсли;

		// Выгрузка информационной базы в dt-файл
		Если Не ПустаяСтрока(Объект.КонечныйФайлВыгрузки) Тогда
			
			ВременныйЛогОперации = ПолучитьИмяФайлаВременногоЛога();
			СтрокаЗапуска	= СтрокаЗапускаКонфигуратора + """ /DumpIB """ + Объект.КонечныйФайлВыгрузки + """ /Visible";
			КодВозврата = ЗапуститьКлиента(СтрокаЗапуска, Объект.КаталогКонфигуратораИКлиента, Истина,
								НСтр("ru = 'Информационная база успешно выгружена в файл.'"),
								НСтр("ru = 'Не удалось выгрузить информационную базу в файл."),
								НСтр("ru = 'Выгрузка информационной базы в файл'"));

			Если КодВозврата <> 0 Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоказатьИЗаписатьСообщениеВЖурнал(НСтр("ru = 'Встраивание Тест-центра завершено.'"), НСтр("ru = 'Встраивание Тест-центра'"));	
	
	Возврат Истина;
	
КонецФункции

// Удаляет подсистему "ТестЦентр" из файлов целевой конфигурации.
// Выполняется непосредственно перед встраиванием Тест-центра из указанного каталога
//
// Параметры:
//  КаталогКонфигурации	 - Строка - Каталог целевой конфигурации
// 
// Возвращаемое значение:
//   Булево - Истина, в случае успеха. Ложь - если возникли ошибки.
//
&НаКлиенте
Функция УдалитьЭлементыТЦ(КаталогКонфигурации)
	
	Событие = "Удаление ТЦ перед встраиванием";
	Префикс = "xmlns:";
	
	ПутьКФайлуКонфигурации = ПутьКФайлуКонфигурации(КаталогКонфигурации);
	Попытка
		ДокументDOMКонфигурации	= ИнициализироватьДокумент(ПутьКФайлуКонфигурации);
	Исключение
		ТекстОшибки = НСтр("ru = 'Ошибка инициализации документа """ + ПутьКФайлуКонфигурации + """'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
		ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
		Возврат Ложь;
	КонецПопытки;
	
	Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOMКонфигурации);
	ПоискРодительскогоУзла = ДокументDOMКонфигурации.ВычислитьВыражениеXPath("/" + Префикс + "MetaDataObject/" + Префикс + "Configuration/" + Префикс + "ChildObjects", ДокументDOMКонфигурации, Разыменователь);
	РодительскийУзел = ПоискРодительскогоУзла.ПолучитьСледующий();
	Если РодительскийУзел = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Не найден узел ChildObjects в целевой конфигурации'");
		ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
		Возврат Ложь;
	КонецЕсли;
	
	СсылочныеТипы				= ПолучитьМассивИменСсылочныхМетаданных();
	МассивСсылочныхТиповТЦ		= Новый Массив;
	МассивЭлементовПодсистемыТЦ = Новый Массив;
	Узлы = ДокументDOMКонфигурации.ВычислитьВыражениеXPath("/" + Префикс + "MetaDataObject/" + Префикс + "Configuration/" + Префикс + "ChildObjects/" + Префикс + "*[name()='Subsystem' and text()='ТестЦентр']", ДокументDOMКонфигурации, Разыменователь);
	
	УзелПодсистемыТестЦентр = Узлы.ПолучитьСледующий();
	Если УзелПодсистемыТестЦентр <> Неопределено Тогда // Нашли подсистему "ТестЦентр", удалим ее из конфигурации.
		
		ПутьКФайлуПодсистемыТЦ = ПутьКФайлуПодсистемы(КаталогКонфигурации, "ТестЦентр");
		Попытка
			ДокументПодсистемыТестЦентр = ИнициализироватьДокумент(ПутьКФайлуПодсистемыТЦ);
		Исключение
			ТекстОшибки = НСтр("ru = 'Ошибка инициализации документа """ + ПутьКФайлуПодсистемыТЦ + """'");
			ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
			ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
			Возврат Ложь;
		КонецПопытки;
		
		УзлыПодсистемы = ДокументПодсистемыТестЦентр.ВычислитьВыражениеXPath("/" + Префикс + "MetaDataObject/" + Префикс + "Subsystem/" + Префикс + "Properties/" + Префикс + "Content/*", ДокументПодсистемыТестЦентр, Разыменователь);
		
		// Перебираем объект подсистемы "ТестЦентр"
		ТекущийУзел = УзлыПодсистемы.ПолучитьСледующий();
		Пока ТекущийУзел <> Неопределено Цикл
			
			ТекстовоеСодержимое = Строка(ТекущийУзел.ТекстовоеСодержимое);
			
			Поз = Найти(ТекстовоеСодержимое, ".");
			Если Поз = 0 Тогда
				ТекущийУзел = УзлыПодсистемы.ПолучитьСледующий();
				Продолжить;
			КонецЕсли;
			
			МассивЭлементовПодсистемыТЦ.Добавить(ТекстовоеСодержимое);
			
			ИмяЭлементаКонфигурации = Лев(ТекстовоеСодержимое, Поз - 1);
			ТекстовоеЗначениеЭлементаКонфигурации = Сред(ТекстовоеСодержимое, Поз + 1, СтрДлина(ТекстовоеСодержимое) - Поз);
			
			Если Не ЗначениеЗаполнено(ИмяЭлементаКонфигурации) ИЛИ Не ЗначениеЗаполнено(ТекстовоеЗначениеЭлементаКонфигурации) Тогда
				Продолжить;
			КонецЕсли;
			
			// Если нашли ссылочный тип - поместим его в МассивСсылочныхТиповТЦ.
			Если СсылочныеТипы.Найти(ИмяЭлементаКонфигурации) <> Неопределено Тогда
				МассивСсылочныхТиповТЦ.Добавить("cfg:" + ИмяЭлементаКонфигурации + "Ref." + ТекстовоеЗначениеЭлементаКонфигурации);
			КонецЕсли;
			
			// Удаляем объект из Configuration.xml.
			ПоискУзлаКонфигурации = ДокументDOMКонфигурации.ВычислитьВыражениеXPath("/" + Префикс + "MetaDataObject/" + Префикс + "Configuration/" + Префикс + "ChildObjects/" + Префикс + "*[name()='" + ИмяЭлементаКонфигурации + "' and text()='" + ТекстовоеЗначениеЭлементаКонфигурации + "']", ДокументDOMКонфигурации, Разыменователь);
			УзелКонфигурации = ПоискУзлаКонфигурации.ПолучитьСледующий();
			Если УзелКонфигурации <> Неопределено  Тогда
				РодительскийУзел.УдалитьДочерний(УзелКонфигурации);
			КонецЕсли;
			
			ТекущийУзел = УзлыПодсистемы.ПолучитьСледующий();
			
		КонецЦикла;
		
		РодительскийУзел.УдалитьДочерний(УзелПодсистемыТестЦентр);
		
		// Удаляем ссылки на объекты Тест-центра.
		Для Каждого ДочернийУзел Из РодительскийУзел.ДочерниеУзлы Цикл
			
			ИмяФайлаУзла = ПолучитьИмяФайлаПоУзлу(КаталогКонфигурации, ДочернийУзел);
			
			Попытка
				ДокументDOMУзла = ИнициализироватьДокумент(ИмяФайлаУзла);
			Исключение
				ТекстОшибки = НСтр("ru = 'Ошибка инициализации документа """ + ИмяФайлаУзла + """'");
				ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
				ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
				Возврат Ложь;
			КонецПопытки;
			
			УзлыType = ДокументDOMУзла.ВычислитьВыражениеXPath("//" + "v8:Type", ДокументDOMУзла, Разыменователь);
			
			ТекущийУзелТипа = УзлыType.ПолучитьСледующий();
			РодительскиеИДочерниеУзлы = Новый Массив;
			Пока ТекущийУзелТипа <> Неопределено Цикл
				
				Если МассивСсылочныхТиповТЦ.Найти(ТекущийУзелТипа.ТекстовоеСодержимое) <> Неопределено Тогда
					СтруктураРодительПотомок = Новый Структура;
					СтруктураРодительПотомок.Вставить("Родитель", ТекущийУзелТипа.РодительскийУзел);
					СтруктураРодительПотомок.Вставить("Потомок", ТекущийУзелТипа);
					РодительскиеИДочерниеУзлы.Добавить(СтруктураРодительПотомок);
				КонецЕсли;
				
				ТекущийУзелТипа = УзлыType.ПолучитьСледующий();
			КонецЦикла;
			
			Для Каждого ТекущаяПара Из РодительскиеИДочерниеУзлы Цикл
				ТекущаяПара.Родитель.УдалитьДочерний(ТекущаяПара.Потомок);
			КонецЦикла;
			
			Попытка
				ЗаписьXML = Новый ЗаписьXML;
				ЗаписьDOM = Новый ЗаписьDOM; 
				ЗаписьXML.ОткрытьФайл(ПолучитьИмяФайлаПоУзлу(КаталогКонфигурации, ДочернийУзел));
				ЗаписьDOM.Записать(ДокументDOMУзла, ЗаписьXML);
				ЗаписьXML.Закрыть();
			Исключение
				ТекстОшибки = НСтр("ru = 'Ошибка при работе с файлами:'");
				ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
				ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
				Возврат Ложь;
			КонецПопытки;
			
		КонецЦикла;
		
		// Удаляем "упоминания" объектов Тест-центра из Ролей.
		УзлыРолей = ДокументDOMКонфигурации.ВычислитьВыражениеXPath("/" + Префикс + "MetaDataObject/" + Префикс + "Configuration/" + Префикс + "ChildObjects/" + Префикс + "Role", ДокументDOMКонфигурации, Разыменователь);
		
		ТекущаяРоль = УзлыРолей.ПолучитьСледующий();
		Пока ТекущаяРоль <> Неопределено Цикл
			ИмяФайлаРоли = ПолучитьИмяФайлаРолиПоУзлу(КаталогКонфигурации, ТекущаяРоль);
			
			Попытка
				ДокументDOMРоли = ИнициализироватьДокумент(ИмяФайлаРоли);
			Исключение
				ТекстОшибки = НСтр("ru = 'Ошибка инициализации документа """ + ИмяФайлаРоли + """'");
				ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
				ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
				Возврат Ложь;
			КонецПопытки;
			
			РазыменовательРолей = Новый РазыменовательПространствИменDOM(ДокументDOMРоли);
			УзлыName = ДокументDOMРоли.ВычислитьВыражениеXPath("/" + Префикс + "Rights/" + Префикс + "object/" + Префикс + "name", ДокументDOMРоли, РазыменовательРолей);
			
			ТекущийУзелName = УзлыName.ПолучитьСледующий();
			РодительскиеИДочерниеУзлы = Новый Массив;
			Пока ТекущийУзелName <> Неопределено Цикл
				
				Если МассивЭлементовПодсистемыТЦ.Найти(ТекущийУзелName.ТекстовоеСодержимое) <> Неопределено Тогда
					СтруктураРодительПотомок = Новый Структура;
					СтруктураРодительПотомок.Вставить("Родитель", ТекущийУзелName.РодительскийУзел.РодительскийУзел);
					СтруктураРодительПотомок.Вставить("Потомок", ТекущийУзелName.РодительскийУзел);
					РодительскиеИДочерниеУзлы.Добавить(СтруктураРодительПотомок);
				КонецЕсли;
				
				ТекущийУзелName = УзлыName.ПолучитьСледующий();
			КонецЦикла;
			
			Для Каждого ТекущаяПара Из РодительскиеИДочерниеУзлы Цикл
				ТекущаяПара.Родитель.УдалитьДочерний(ТекущаяПара.Потомок);
			КонецЦикла;
			
			Попытка
				ЗаписьXML = Новый ЗаписьXML;
				ЗаписьDOM = Новый ЗаписьDOM; 
				ЗаписьXML.ОткрытьФайл(ПолучитьИмяФайлаРолиПоУзлу(КаталогКонфигурации, ТекущаяРоль));
				ЗаписьDOM.Записать(ДокументDOMРоли, ЗаписьXML);
				ЗаписьXML.Закрыть();
			Исключение
				ТекстОшибки = НСтр("ru = 'Ошибка при работе с файлами:'");
				ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
				ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
				Возврат Ложь;
			КонецПопытки;
			
			ТекущаяРоль = УзлыРолей.ПолучитьСледующий();
		КонецЦикла;
		
		// Обрабатываем общие реквизиты
		УзлыОбщихРеквизитов = ДокументDOMКонфигурации.ВычислитьВыражениеXPath("/" + Префикс + "MetaDataObject/" + Префикс + "Configuration/" + Префикс + "ChildObjects/" + Префикс + "CommonAttribute", ДокументDOMКонфигурации, Разыменователь);
		ТекущийОбщийРеквизит = УзлыОбщихРеквизитов.ПолучитьСледующий();
		Пока ТекущийОбщийРеквизит <> Неопределено Цикл 
			ИмяФайлаРеквизита = ПолучитьИмяФайлаПоУзлу(КаталогКонфигурации, ТекущийОбщийРеквизит);
			
			Попытка
				ДокументDOMРеквизита = ИнициализироватьДокумент(ИмяФайлаРеквизита);
			Исключение
				ТекстОшибки = НСтр("ru = 'Ошибка инициализации документа """ + ИмяФайлаРеквизита + """'");
				ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
				ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
				Возврат Ложь;
			КонецПопытки;
			
			РазыменовательРеквизита = Новый РазыменовательПространствИменDOM(ДокументDOMРеквизита);
			
			ЭлементыРазделения = ДокументDOMРеквизита.ПолучитьЭлементыПоИмени("DataSeparation");
			Если ЭлементыРазделения.Количество() = 0 Тогда
				ТекущийОбщийРеквизит = УзлыОбщихРеквизитов.ПолучитьСледующий();
				Продолжить;
			КонецЕсли;
			
			ЭлементыИспользованияРазделения = ДокументDOMРеквизита.ПолучитьЭлементыПоИмени("SeparatedDataUse");
			Если ЭлементыРазделения.Количество() = 0 Тогда
				ТекущийОбщийРеквизит = УзлыОбщихРеквизитов.ПолучитьСледующий();
				Продолжить;
			КонецЕсли;
			
			Если ЭлементыИспользованияРазделения[0].ТекстовоеСодержимое <> "Independently" Тогда
				ТекущийОбщийРеквизит = УзлыОбщихРеквизитов.ПолучитьСледующий();
				Продолжить;
			КонецЕсли;
			
			// Удаляем "упоминания" объектов Тест-центра.
			УзлыMetadata = ДокументDOMРеквизита.ВычислитьВыражениеXPath("/" + Префикс + "MetaDataObject/" + Префикс + "CommonAttribute/" + Префикс + "Properties/" + Префикс + "Content/" + "xr:Item/" + "xr:Metadata", ДокументDOMРеквизита, РазыменовательРеквизита);
			
			РодительскиеИДочерниеУзлы = Новый Массив;
			ТекущийУзелMetadata = УзлыMetadata.ПолучитьСледующий();
			Пока ТекущийУзелMetadata <> Неопределено Цикл
				
				Если МассивЭлементовПодсистемыТЦ.Найти(ТекущийУзелMetadata.ТекстовоеСодержимое) <> Неопределено Тогда
					СтруктураРодительПотомок = Новый Структура;
					СтруктураРодительПотомок.Вставить("Родитель", ТекущийУзелMetadata.РодительскийУзел.РодительскийУзел);
					СтруктураРодительПотомок.Вставить("Потомок", ТекущийУзелMetadata.РодительскийУзел);
					РодительскиеИДочерниеУзлы.Добавить(СтруктураРодительПотомок);
				КонецЕсли;
				
				ТекущийУзелMetadata = УзлыMetadata.ПолучитьСледующий();
			КонецЦикла;
			
			Для Каждого ТекущаяПара Из РодительскиеИДочерниеУзлы Цикл
				ТекущаяПара.Родитель.УдалитьДочерний(ТекущаяПара.Потомок);
			КонецЦикла;
			
			Попытка
				ЗаписьXML = Новый ЗаписьXML;
				ЗаписьDOM = Новый ЗаписьDOM; 
				ЗаписьXML.ОткрытьФайл(ПолучитьИмяФайлаПоУзлу(КаталогКонфигурации, ТекущийОбщийРеквизит));
				ЗаписьDOM.Записать(ДокументDOMРеквизита, ЗаписьXML);
				ЗаписьXML.Закрыть();
			Исключение
				ТекстОшибки = НСтр("ru = 'Ошибка при работе с файлами:'");
				ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
				ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
				Возврат Ложь;
			КонецПопытки;
			
			
			ТекущийОбщийРеквизит = УзлыОбщихРеквизитов.ПолучитьСледующий();
		КонецЦикла;
		
		Попытка
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьDOM = Новый ЗаписьDOM; 
			ЗаписьXML.ОткрытьФайл(КаталогКонфигурации + "\Configuration.xml");
			ЗаписьDOM.Записать(ДокументDOMКонфигурации, ЗаписьXML);
			ЗаписьXML.Закрыть();
		Исключение
			ТекстОшибки = НСтр("ru = 'Ошибка при работе с файлами:'");
			ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
			ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
			Возврат Ложь;
		КонецПопытки;
		
		// Удаляем файлы Тест-центра
		МассивМасок = Новый Массив;
		МассивМасок.Добавить(МаскаИменФайловПодсистемы("ТестЦентр"));
		
		Для Каждого ТекущееИмя Из МассивЭлементовПодсистемыТЦ Цикл
			
			ТекущаяМаска = ТекущееИмя + "*";
			Попытка
				УдалитьФайлы(КаталогКонфигурации, ТекущаяМаска);
			Исключение
				ТекстОшибки = НСтр("ru = 'Ошибка при удалении файлов по маске """ + ТекущаяМаска + """'");
				ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
				ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
				Возврат Ложь;
			КонецПопытки;
			
		КонецЦикла;
		
		// Удалим код Тест-центра из модулей.
		РезультатУдаления = УдалитьСтрокиТЦИзМодулей(КаталогКонфигурации);
		Если Не РезультатУдаления Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция УдалитьСтрокиТЦИзМодулей(КаталогКонфигурации)
	
	Событие = "Удаление кода ТЦ перед встраиванием";
	ИсходныеФайлы = Новый Массив;
	ИсходныеФайлы.Добавить(ПолучитьПутьКФайлуМодуляСеанса(КаталогКонфигурации));
	ИсходныеФайлы.Добавить(ПолучитьПутьКФайлуМодуляОбычногоПриложения(КаталогКонфигурации));
	ИсходныеФайлы.Добавить(ПолучитьПутьКФайлуУправляемогоПриложения(КаталогКонфигурации));
	
	Для Каждого ТекущийФайл Из ИсходныеФайлы Цикл
		
		Попытка
			ТекущийДокумент = Новый ТекстовыйДокумент;
			ТекущийДокумент.Прочитать(ТекущийФайл);
		Исключение
			ТекстОшибки = НСтр("ru = 'Ошибка чтения файла """ + ТекущийФайл + """'");
			ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
			ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
			Возврат Ложь;
		КонецПопытки;
		
		НужноУдалитьСтроку = Ложь;
		ТекущийНомерСтроки = 1;
		КоличествоСтрок = ТекущийДокумент.КоличествоСтрок();

		Пока ТекущийНомерСтроки <= КоличествоСтрок Цикл
			
			ТекущаяСтрока = ТекущийДокумент.ПолучитьСтроку(ТекущийНомерСтроки);
			
			Если Найти(ТекущаяСтрока, "// ТестЦентр") > 0 Тогда
				НужноУдалитьСтроку = Истина;
				
			ИначеЕсли Найти(ТекущаяСтрока, "// Конец ТестЦентр") > 0 Тогда
				
				ТекущийДокумент.УдалитьСтроку(ТекущийНомерСтроки);
				НужноУдалитьСтроку = Ложь;
				
				КоличествоСтрок = ТекущийДокумент.КоличествоСтрок();
				Если ТекущийНомерСтроки <= КоличествоСтрок Тогда
					ТекущаяСтрока = ТекущийДокумент.ПолучитьСтроку(ТекущийНомерСтроки);
					Если ПустаяСтрока(СокрЛП(ТекущаяСтрока)) Тогда
						ТекущийДокумент.УдалитьСтроку(ТекущийНомерСтроки);
						КоличествоСтрок = ТекущийДокумент.КоличествоСтрок();
					КонецЕсли;
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Если НужноУдалитьСтроку Тогда
				ТекущийДокумент.УдалитьСтроку(ТекущийНомерСтроки);
				КоличествоСтрок = ТекущийДокумент.КоличествоСтрок();
			Иначе
				ТекущийНомерСтроки = ТекущийНомерСтроки + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Попытка
			ТекущийДокумент.Записать(ТекущийФайл);
		Исключение
			ТекстОшибки = НСтр("ru = 'Ошибка записи файла """ + ТекущийФайл + """'");
			ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
			ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
			Возврат Ложь;
		КонецПопытки;

	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Встраивает подсистему "ТестЦентр" в файлы целевой конфигурации.
//
// Параметры:
//  КаталогКонфигурации	 - Строка - Каталог файлов целевой конфигурации
//  КаталогТестЦентра	 - Строка - Каталог файлов конфигурации Тест-центра
// 
// Возвращаемое значение:
//   Булево - Истина, в случае успеха. Ложь - если возникли ошибки.
//
&НаКлиенте
Функция ВстроитьЭлементыТЦ(Знач КаталогКонфигурации, Знач КаталогТестЦентра) Экспорт

	Событие = "Встраивание Тест-центра";
	Префикс = "xmlns:";
	ИмяЦелевойКонфигурации = "";
	
	ПутьКФайлуКонфигурации = ПутьКФайлуКонфигурации(КаталогКонфигурации);
	Попытка
		ДокументDOMКонфигурации = ИнициализироватьДокумент(ПутьКФайлуКонфигурации);
	Исключение
		ТекстОшибки = НСтр("ru = 'Ошибка инициализации документа """ + ПутьКФайлуКонфигурации + """'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
		ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
		Возврат Ложь;
 	КонецПопытки;
	
	РазыменовательКонфигурации = Новый РазыменовательПространствИменDOM(ДокументDOMКонфигурации);
	
	ПоискИмениКонфигурации = ДокументDOMКонфигурации.ВычислитьВыражениеXPath("/" + Префикс + "MetaDataObject/" + Префикс + "Configuration/" + Префикс + "Properties/" + Префикс + "Name", ДокументDOMКонфигурации, РазыменовательКонфигурации);
	УзелИмениКонфигурации = ПоискИмениКонфигурации.ПолучитьСледующий();
	Если УзелИмениКонфигурации = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Не найден узел Name в целевой конфигурации'");
		ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
		Возврат Ложь;
	Иначе
		ИмяЦелевойКонфигурации = УзелИмениКонфигурации.ТекстовоеСодержимое;
	КонецЕсли;
	
	ПоискРодительскогоУзлаКонфигурации = ДокументDOMКонфигурации.ВычислитьВыражениеXPath("/" + Префикс + "MetaDataObject/" + Префикс + "Configuration/" + Префикс + "ChildObjects", ДокументDOMКонфигурации, РазыменовательКонфигурации);
	РодительскийУзелКонфигурации = ПоискРодительскогоУзлаКонфигурации.ПолучитьСледующий();
	Если РодительскийУзелКонфигурации = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Не найден узел ChildObjects в целевой конфигурации'");
		ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
		Возврат Ложь;
	КонецЕсли;
	
	ПутьКФайлуПодсистемыТЦ = ПутьКФайлуПодсистемы(КаталогТестЦентра, "ТестЦентр");
	Попытка
		ДокументПодсистемыТестЦентр = ИнициализироватьДокумент(ПутьКФайлуПодсистемыТЦ);
	Исключение
		ТекстОшибки = НСтр("ru = 'Ошибка инициализации документа """ + ПутьКФайлуПодсистемыТЦ + """'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
		ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
		Возврат Ложь;
	КонецПопытки;
	
	РазыменовательТЦ = Новый РазыменовательПространствИменDOM(ДокументПодсистемыТестЦентр);
	УзлыПодсистемыТЦ = ДокументПодсистемыТестЦентр.ВычислитьВыражениеXPath("/" + Префикс + "MetaDataObject/" + Префикс + "Subsystem/" + Префикс + "Properties/" + Префикс + "Content/*", ДокументПодсистемыТестЦентр, РазыменовательТЦ);
	
	МассивЭлементовПодсистемыТЦ = Новый Массив;
	МассивРазделяемыхТиповТЦ = Новый Массив;
	МетаданныеТЦДляИсключений = Новый СписокЗначений;
	РазделяемыеТипы = ПолучитьМассивИменРазделяемыхМетаданных();
	ИменаМДВКириллице = ПолучитьСоответствиеВидовМДВКириллице();
	
	// Создаем подисистему ТестЦентр в configuration.xml целевой конфигурации.
	НовыйЭлемент = ДокументDOMКонфигурации.СоздатьЭлемент("Subsystem");
	НовыйЭлемент.ТекстовоеСодержимое = "ТестЦентр";
	РодительскийУзелКонфигурации.ДобавитьДочерний(НовыйЭлемент);
	
	// Перебираем объекты подсистемы "ТестЦентр".
	ТекущийУзел = УзлыПодсистемыТЦ.ПолучитьСледующий();
	Пока ТекущийУзел <> Неопределено Цикл
		
		ТекстовоеСодержимое = Строка(ТекущийУзел.ТекстовоеСодержимое);
		
		Поз = Найти(ТекстовоеСодержимое, ".");
		Если Поз = 0 Тогда
			ТекущийУзел = УзлыПодсистемыТЦ.ПолучитьСледующий();
			Продолжить;
		КонецЕсли;
		
		МассивЭлементовПодсистемыТЦ.Добавить(ТекстовоеСодержимое);
		
		ИмяЭлементаКонфигурации = Лев(ТекстовоеСодержимое, Поз - 1);
		ТекстовоеЗначениеЭлементаКонфигурации = Сред(ТекстовоеСодержимое, Поз + 1, СтрДлина(ТекстовоеСодержимое) - Поз);
		
		Если Не ЗначениеЗаполнено(ИмяЭлементаКонфигурации) ИЛИ Не ЗначениеЗаполнено(ТекстовоеЗначениеЭлементаКонфигурации) Тогда
			Продолжить;
		КонецЕсли;
		
		// Если нашли ссылочный тип - поместим его в МассивСсылочныхТиповТЦ.
		Если РазделяемыеТипы.Найти(ИмяЭлементаКонфигурации) <> Неопределено Тогда
			МассивРазделяемыхТиповТЦ.Добавить(ТекстовоеСодержимое);
			МетаданныеТЦДляИсключений.Добавить("Исключения.Добавить(Метаданные." + ИменаМДВКириллице[ИмяЭлементаКонфигурации] + ".Найти(""" + ТекстовоеЗначениеЭлементаКонфигурации + """));");
		КонецЕсли;

		// Создаем объект в Configuration.xml целевой конфигурации.
		НовыйЭлемент = ДокументDOMКонфигурации.СоздатьЭлемент(ИмяЭлементаКонфигурации);
		НовыйЭлемент.ТекстовоеСодержимое = ТекстовоеЗначениеЭлементаКонфигурации;
		РодительскийУзелКонфигурации.ДобавитьДочерний(НовыйЭлемент);
		
		ТекущийУзел = УзлыПодсистемыТЦ.ПолучитьСледующий();
		
	КонецЦикла;
	
	// Обрабатываем общие реквизиты
	УзлыОбщихРеквизитов = ДокументDOMКонфигурации.ВычислитьВыражениеXPath("/" + Префикс + "MetaDataObject/" + Префикс + "Configuration/" + Префикс + "ChildObjects/" + Префикс + "CommonAttribute", ДокументDOMКонфигурации, РазыменовательКонфигурации);
	ТекущийОбщийРеквизит = УзлыОбщихРеквизитов.ПолучитьСледующий();
	Пока ТекущийОбщийРеквизит <> Неопределено Цикл 
		ИмяФайлаРеквизита = ПолучитьИмяФайлаПоУзлу(КаталогКонфигурации, ТекущийОбщийРеквизит);
		
		Попытка
			ДокументDOMРеквизита = ИнициализироватьДокумент(ИмяФайлаРеквизита);
		Исключение
			ТекстОшибки = НСтр("ru = 'Ошибка инициализации документа """ + ИмяФайлаРеквизита + """'");
			ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
			ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
			Возврат Ложь;
	 	КонецПопытки;
		
		РазыменовательРеквизита = Новый РазыменовательПространствИменDOM(ДокументDOMРеквизита);
		
		ЭлементыРазделения = ДокументDOMРеквизита.ПолучитьЭлементыПоИмени("DataSeparation");
		Если ЭлементыРазделения.Количество() = 0 Тогда
			ТекущийОбщийРеквизит = УзлыОбщихРеквизитов.ПолучитьСледующий();
			Продолжить;
		КонецЕсли;
		
		ЭлементыИспользованияРазделения = ДокументDOMРеквизита.ПолучитьЭлементыПоИмени("SeparatedDataUse");
		Если ЭлементыРазделения.Количество() = 0 Тогда
			ТекущийОбщийРеквизит = УзлыОбщихРеквизитов.ПолучитьСледующий();
			Продолжить;
		КонецЕсли;
		
		Если ЭлементыИспользованияРазделения[0].ТекстовоеСодержимое <> "Independently" Тогда
			ТекущийОбщийРеквизит = УзлыОбщихРеквизитов.ПолучитьСледующий();
			Продолжить;
		КонецЕсли;
		
		// Добавляем объекты ТЦ в текущий общий реквизит.
		ПоискУзлаContent = ДокументDOMРеквизита.ВычислитьВыражениеXPath("/" + Префикс + "MetaDataObject/" + Префикс + "CommonAttribute/" + Префикс + "Properties/" + Префикс + "Content", ДокументDOMРеквизита, РазыменовательРеквизита);
		УзелContent = ПоискУзлаContent.ПолучитьСледующий();
		
		Для Каждого ТекущийРазделяемыйЭлемент Из МассивРазделяемыхТиповТЦ Цикл
			ТекущийЭлементItem		= ДокументDOMРеквизита.СоздатьЭлемент("xr:Item");
			
			ТекущийЭлементMetadata	= ДокументDOMРеквизита.СоздатьЭлемент("xr:Metadata");
			ТекущийЭлементMetadata.ТекстовоеСодержимое = ТекущийРазделяемыйЭлемент;
			ТекущийЭлементItem.ДобавитьДочерний(ТекущийЭлементMetadata);
			
			ТекущийЭлементUse		= ДокументDOMРеквизита.СоздатьЭлемент("xr:Use");
			ТекущийЭлементUse.ТекстовоеСодержимое = "DontUse";
			ТекущийЭлементItem.ДобавитьДочерний(ТекущийЭлементUse);
			
		    ТекущийЭлементConditionalSeparation	= ДокументDOMРеквизита.СоздатьЭлемент("xr:ConditionalSeparation");
			ТекущийЭлементItem.ДобавитьДочерний(ТекущийЭлементConditionalSeparation);
			
			УзелContent.ДобавитьДочерний(ТекущийЭлементItem);
		КонецЦикла;

		Попытка
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьDOM = Новый ЗаписьDOM; 
			ЗаписьXML.ОткрытьФайл(ПолучитьИмяФайлаПоУзлу(КаталогКонфигурации, ТекущийОбщийРеквизит));
			ЗаписьDOM.Записать(ДокументDOMРеквизита, ЗаписьXML);
			ЗаписьXML.Закрыть();
		Исключение
			ТекстОшибки = НСтр("ru = 'Ошибка при работе с файлами:'");
			ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
			ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
			Возврат Ложь;
		КонецПопытки;
		
		ТекущийОбщийРеквизит = УзлыОбщихРеквизитов.ПолучитьСледующий();
	КонецЦикла;
	
	Попытка
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьDOM = Новый ЗаписьDOM; 
		ЗаписьXML.ОткрытьФайл(ПутьКФайлуКонфигурации(КаталогКонфигурации));
		ДокументDOMКонфигурации.Нормализовать();
		ЗаписьDOM.Записать(ДокументDOMКонфигурации, ЗаписьXML);
		ЗаписьXML.Закрыть();
	Исключение
		ТекстОшибки = НСтр("ru = 'Ошибка при работе с файлами:'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
		ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
		Возврат Ложь;
	КонецПопытки;
	
	// Найдем файлы подсистемы ТестЦентр для последующего копирования в целевую конфигурацию.
	МассивЭлементовПодсистемыТЦ.Добавить(МаскаИменФайловПодсистемы("ТестЦентр"));
	
	Для Каждого ТекущееИмя Из МассивЭлементовПодсистемыТЦ Цикл
		
		НайденныеФайлы = НайтиФайлы(КаталогТестЦентра, ТекущееИмя + "*", Ложь);
		Для Каждого ТекущийФайл Из НайденныеФайлы Цикл
			
			Попытка
				НовоеИмяФайла = КаталогКонфигурации + "\" + ТекущийФайл.Имя;
				КопироватьФайл(ТекущийФайл.ПолноеИмя, НовоеИмяФайла);
			Исключение
				ТекстОшибки = НСтр("ru = 'Ошибка при копировании файла " + ТекущийФайл.ПолноеИмя +  " в " + НовоеИмяФайла + ":'");
				ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
				ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
				Возврат Ложь;
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПутьКФайлуРоли = КаталогКонфигурации + "\Role.ТестЦентр.Rights.xml";
	ФайлРолиТЦ = Новый Файл(ПутьКФайлуРоли);
	Если ФайлРолиТЦ.Существует() Тогда
		
		ДокументDOMРоли = ИнициализироватьДокумент(ПутьКФайлуРоли);
		РазыменовательКонфигурации = Новый РазыменовательПространствИменDOM(ДокументDOMРоли);

		ИмениКонфигурацииВПравах = ДокументDOMРоли.ВычислитьВыражениеXPath("/" + Префикс + "Rights/" + Префикс + "object/*[name()='name' and text()='Configuration.ТестЦентр']", ДокументDOMРоли, РазыменовательКонфигурации); //   +  
		УзелИмениКонфигурации = ИмениКонфигурацииВПравах.ПолучитьСледующий();
		Если УзелИмениКонфигурации <> Неопределено Тогда
			
			УзелИмениКонфигурации.ТекстовоеСодержимое = "Configuration." + ИмяЦелевойКонфигурации;
			
			Попытка
				ЗаписьXML = Новый ЗаписьXML;
				ЗаписьDOM = Новый ЗаписьDOM; 
				ЗаписьXML.ОткрытьФайл(ПутьКФайлуРоли);
				ЗаписьDOM.Записать(ДокументDOMРоли, ЗаписьXML);
				ЗаписьXML.Закрыть();
			Исключение
				ТекстОшибки = НСтр("ru = 'Ошибка при работе с файлами:'");
				ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
				ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
				Возврат Ложь;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатВстраиванияКода = Ложь;
	Попытка
		РезультатВстраиванияКода = ВстроитьКодТЦВМодули(КаталогКонфигурации, КаталогТестЦентра);
	Исключение
		ТекстОшибки = НСтр("ru = 'Ошибка при встраивании кода ТЦ'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
		ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
	КонецПопытки;	
	
	Если НЕ РезультатВстраиванияКода Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ВстроитьКодТЦВМодули(Знач КаталогКонфигурации, Знач КаталогТестЦентра) Экспорт
	
	ПутьКМодулюСеансаТЦ = ПолучитьПутьКФайлуМодуляСеанса(КаталогТестЦентра);
	ПутьКМодулюУправляемогоПриложенияТЦ = ПолучитьПутьКФайлуУправляемогоПриложения(КаталогТестЦентра);
	ПутьКМодулюОбычногоПриложенияТЦ = ПолучитьПутьКФайлуМодуляОбычногоПриложения(КаталогТестЦентра);
	
	ПутьКМодулюСеансаКонфигурации = ПолучитьПутьКФайлуМодуляСеанса(КаталогКонфигурации);
	ПутьКМодулюУправляемогоПриложенияКонфигурации = ПолучитьПутьКФайлуУправляемогоПриложения(КаталогКонфигурации);
	ПутьКМодулюОбычногоПриложенияКонфигурации = ПолучитьПутьКФайлуМодуляОбычногоПриложения(КаталогКонфигурации);

	// Изменяем модуль сеанса
	ИсходныйТекстМодуля		= ПолучитьТекстФайла(ПутьКМодулюСеансаКонфигурации);
	ТекстМодуляТЦ			= ПолучитьТекстФайла(ПутьКМодулюСеансаТЦ);
	ВстроитьФрагментыТЦВМодуль(ИсходныйТекстМодуля, ТекстМодуляТЦ);
	ЗаписатьТекстФайла(ПутьКМодулюСеансаКонфигурации, ИсходныйТекстМодуля);	
	
	// Изменяем модуль управляемого приложения
	ИсходныйТекстМодуля		= ПолучитьТекстФайла(ПутьКМодулюУправляемогоПриложенияКонфигурации);
	ТекстМодуляТЦ			= ПолучитьТекстФайла(ПутьКМодулюУправляемогоПриложенияТЦ);
	ВстроитьФрагментыТЦВМодуль(ИсходныйТекстМодуля, ТекстМодуляТЦ);
	ЗаписатьТекстФайла(ПутьКМодулюУправляемогоПриложенияКонфигурации, ИсходныйТекстМодуля);	
	
	// Изменяем модуль обычного приложения
	ИсходныйТекстМодуля		= ПолучитьТекстФайла(ПутьКМодулюОбычногоПриложенияКонфигурации);
	ТекстМодуляТЦ			= ПолучитьТекстФайла(ПутьКМодулюОбычногоПриложенияТЦ);
	ВстроитьФрагментыТЦВМодуль(ИсходныйТекстМодуля, ТекстМодуляТЦ);
	ЗаписатьТекстФайла(ПутьКМодулюОбычногоПриложенияКонфигурации, ИсходныйТекстМодуля);	
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВстроитьФрагментыТЦВМодуль(ТекстИсходногоМодуля, ТекстМодуляДонораПроцедур)
	
	ПроцедурыИсходногоМодуля = ПолучитьМассивПроцедурИФункций(ТекстИсходногоМодуля);
	ПроцедурыЗаменяющие = ПолучитьМассивПроцедурИФункций(ТекстМодуляДонораПроцедур);
	
	СоответствиеПроцедурИсходногоМодуля = Новый Соответствие;
	Для Каждого ТекПроцедура Из ПроцедурыИсходногоМодуля Цикл
		СоответствиеПроцедурИсходногоМодуля.Вставить(НРег(ТекПроцедура.Имя), ТекПроцедура);
	КонецЦикла;
	
	ПроцедурыКСозданию = Новый Массив;
	Индекс = ПроцедурыЗаменяющие.ВГраница();
	Пока Индекс >= 0 Цикл
		
		ПроцедураДонор = ПроцедурыЗаменяющие[Индекс];
		Индекс = Индекс - 1;
		
		Если Не Найти(ПроцедураДонор.ИсходныйКод, "// ТестЦентр") ИЛИ Не Найти(ПроцедураДонор.ИсходныйКод, "// Конец ТестЦентр") Тогда
			ПроцедурыЗаменяющие.Удалить(Индекс+1);
			Продолжить;
		КонецЕсли;
		
		ИсходнаяПроцедура = СоответствиеПроцедурИсходногоМодуля.Получить(НРег(ПроцедураДонор.Имя));
		
		Если ИсходнаяПроцедура = Неопределено Тогда
			ПроцедурыКСозданию.Добавить(ПроцедураДонор);
		КонецЕсли;
		
	КонецЦикла;

	// Через это соответствие будем осуществлять поиск заменяющих процедур и функций.
	СоответствиеЗаменяющихПроцедур = Новый Соответствие;
	Для Каждого ТекПроцедура Из ПроцедурыЗаменяющие Цикл
		СоответствиеЗаменяющихПроцедур.Вставить(НРег(ТекПроцедура.Имя), ТекПроцедура);
	КонецЦикла;
	
	// Изменяем имеющиеся процедуры и функции.
	ИндексПроцедуры = ПроцедурыИсходногоМодуля.ВГраница();
	Пока ИндексПроцедуры >= 0 Цикл
		
		ТекПроцедура = ПроцедурыИсходногоМодуля[ИндексПроцедуры];
		ИндексПроцедуры = ИндексПроцедуры - 1;
		
		КлючПроцедуры = НРег(ТекПроцедура.Имя);
		Заменяющая = СоответствиеЗаменяющихПроцедур.Получить(КлючПроцедуры);
		Если Заменяющая = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КодЗаменяющей = Заменяющая.ИсходныйКод;
		Позиция1 = Найти(КодЗаменяющей, "// ТестЦентр");
		Позиция2 = Найти(КодЗаменяющей, "// Конец ТестЦентр");
		КодФрагмента = Сред(КодЗаменяющей, Позиция1, Позиция2 - Позиция1 + СтрДлина("// Конец ТестЦентр"));
		
		НачалоМодуля = Лев(ТекстИсходногоМодуля, ТекПроцедура.КонецЗаголовкаПозицияАбсолютная);
		
		КонецМодуля = "";
		Если ТекПроцедура.КонецЗаголовкаПозицияАбсолютная < СтрДлина(ТекстИсходногоМодуля) Тогда
			КонецМодуля = Сред(ТекстИсходногоМодуля, ТекПроцедура.КонецЗаголовкаПозицияАбсолютная + 1);
		КонецЕсли;
		
		ТекстИсходногоМодуля = НачалоМодуля + Символы.ПС + Символы.ПС + Символы.Таб + КодФрагмента + КонецМодуля;
		
	КонецЦикла;
	
	// Добавляем ненайденные процедуры и функции.
	КодСозданныхПроцедур = "";
	Для Каждого Ненайденная Из ПроцедурыКСозданию Цикл
		
		КодНенайденной = Ненайденная.ИсходныйКод;
		Позиция1 = Найти(КодНенайденной, "// ТестЦентр");
		Позиция2 = Найти(КодНенайденной, "// Конец ТестЦентр");
		КодФрагмента = Сред(КодНенайденной, Позиция1, Позиция2 - Позиция1 + СтрДлина("// Конец ТестЦентр"));
		
		КонецПроцедурыИлиФункции = ?(Ненайденная.Тип = "Функция", "КонецФункции", "КонецПроцедуры");
		
		КодСозданныхПроцедур = КодСозданныхПроцедур + Символы.ПС + Символы.ПС
			+ Ненайденная.КодЗаголовка + Символы.ПС + Символы.ПС
			+ Символы.Таб + КодФрагмента + Символы.ПС + Символы.ПС
			+ КонецПроцедурыИлиФункции;
		
	КонецЦикла;
		
	Если Не ПустаяСтрока(КодСозданныхПроцедур) Тогда
		
		ПозицияДляВставки  = ПолучитьПозициюДляВставкиПроцедурИФункций(ТекстИсходногоМодуля);
		ПерваяЧасть = Лев(ТекстИсходногоМодуля, ПозицияДляВставки - 1);
		ВтораяЧасть = Сред(ТекстИсходногоМодуля, ПозицияДляВставки);
		
		ТекстИсходногоМодуля = ПерваяЧасть + КодСозданныхПроцедур + Символы.ПС + Символы.ПС + ВтораяЧасть;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФрагментыТЦИзФайла(ИмяФайла)
	
	ФрагментыТЦ = Новый Массив;
	ИндексФрагмента = 0;

	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла);
	
	НадоЗаписывать = Ложь;
	ТекущаяСтрока = ЧтениеТекста.ПрочитатьСтроку();
	Пока ТекущаяСтрока <> Неопределено Цикл
		
		Если Найти(ТекущаяСтрока, "// ТестЦентр") > 0 Тогда
			НадоЗаписывать = Истина;
			ФрагментыТЦ.Добавить("");
		КонецЕсли;
		
		Если НадоЗаписывать Тогда
			ФрагментыТЦ[ИндексФрагмента] = ФрагментыТЦ[ИндексФрагмента] + ТекущаяСтрока + Символы.ПС ;
		КонецЕсли;
		
		Если Найти(ТекущаяСтрока, "// Конец ТестЦентр") > 0 Тогда
			ИндексФрагмента = ИндексФрагмента + 1;
			НадоЗаписывать = Ложь;
		КонецЕсли;
		
		ТекущаяСтрока = ЧтениеТекста.ПрочитатьСтроку();
	КонецЦикла;
	
	ЧтениеТекста.Закрыть();
	
	Возврат ФрагментыТЦ;
	
КонецФункции

&НаКлиенте
Функция ИнициализироватьДокумент(ПутьКФайлу) Экспорт
	
	ТекстXML = Новый ЧтениеXML;
	ТекстXML.ОткрытьФайл(ПутьКФайлу);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ТекстXML);
	ДокументDOM.Нормализовать();
	ТекстXML.Закрыть();
	
	Возврат ДокументDOM;
	
КонецФункции

&НаКлиенте
Функция ПутьКФайлуКонфигурации(Каталог) Экспорт 
	Возврат Каталог + "\Configuration.xml";
КонецФункции

&НаКлиенте
Функция ПутьКФайлуПодсистемы(Каталог, ИмяПодсистемы) Экспорт
	
	МассивПодсистем = РазбитьСтрокуПоРазделителю(ИмяПодсистемы);
	ИмяФайла = "";
	Для Каждого ТекущаяПодсистема Из МассивПодсистем Цикл
		ИмяФайла = ИмяФайла + "Subsystem." + ТекущаяПодсистема + ".";
	КонецЦикла;
	
	Возврат Каталог + "\" + ИмяФайла + "xml";
	
КонецФункции

&НаКлиенте
Функция ПолучитьПутьКФайлуМодуляСеанса(Каталог)
	
	Возврат Каталог + "\Configuration.SessionModule.txt";
	
КонецФункции

&НаКлиенте
Функция ПолучитьПутьКФайлуМодуляОбычногоПриложения(Каталог)
	
	Возврат Каталог + "\Configuration.OrdinaryApplicationModule.txt";
	
КонецФункции

&НаКлиенте
Функция ПолучитьПутьКФайлуУправляемогоПриложения(Каталог)
	
	Возврат Каталог + "\Configuration.ManagedApplicationModule.txt";
	
КонецФункции

&НаКлиенте
Функция МаскаИменФайловПодсистемы(ИмяПодсистемы) Экспорт 
	Возврат "Subsystem." + ИмяПодсистемы + ".*";
КонецФункции

&НаКлиенте
Функция URIИменМетаданных() Экспорт
	
	Возврат "http://v8.1c.ru/8.3/MDClasses";
	
КонецФункции

&НаКлиенте
Функция URIРолей() Экспорт
	
	Возврат "http://v8.1c.ru/8.2/roles";
	
КонецФункции
	
&НаКлиенте
Функция ПолучитьРазыменователь(Префикс, URI)
	
	Пространства = Новый Соответствие;
	Пространства.Вставить(Префикс, URI);
	
	Возврат Новый РазыменовательПространствИменDOM(Пространства);
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяФайлаПоУзлу(КаталогКонфигурации, Узел)
	
	Возврат КаталогКонфигурации + "\" +  Узел.ЛокальноеИмя + "." + Узел.ТекстовоеСодержимое + ".xml";
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяФайлаРолиПоУзлу(КаталогКонфигурации, Узел)
	
	Возврат КаталогКонфигурации + "\" +  Узел.ЛокальноеИмя + "." + Узел.ТекстовоеСодержимое + ".Rights.xml";
	
КонецФункции

&НаКлиенте
Функция ПолучитьМассивИменСсылочныхМетаданных()
	
	Результат = Новый Массив;
	Результат.Добавить("Catalog");
	Результат.Добавить("Document");
	Результат.Добавить("Enum");
	Результат.Добавить("ChartOfCharacteristicTypes");
	Результат.Добавить("ChartOfAccounts");
	Результат.Добавить("ChartOfCalculationTypes");
	Результат.Добавить("BusinessProcess");
	Результат.Добавить("BusinessProcessRoutePoint");
	Результат.Добавить("Task");
	Результат.Добавить("ExchangePlan");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьМассивИменРазделяемыхМетаданных()
	
	Результат = Новый Массив;
	Результат.Добавить("Constant");
	Результат.Добавить("Catalog");
	Результат.Добавить("Document");
	Результат.Добавить("ChartOfCharacteristicTypes");
	Результат.Добавить("ChartOfAccounts");
	Результат.Добавить("ChartOfCalculationTypes");
	Результат.Добавить("AccumulationRegister");
	Результат.Добавить("InformationRegister");
	Результат.Добавить("CalculationRegister");
	Результат.Добавить("BusinessProcess");
	Результат.Добавить("Task");
	Результат.Добавить("ExchangePlan");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСоответствиеВидовМДВКириллице()
	
	Результат = Новый Соответствие;
	Результат.Вставить("Constant",						"Константы");
	Результат.Вставить("Catalog",						"Справочники");
	Результат.Вставить("Document",						"Документы");
	Результат.Вставить("ChartOfCharacteristicTypes",	"ПланыВидовХарактеристик");
	Результат.Вставить("ChartOfAccounts",				"ПланыСчетов");
	Результат.Вставить("ChartOfCalculationTypes",		"ПланыВидовРасчета");
	Результат.Вставить("AccumulationRegister",			"РегистрыНакопления");
	Результат.Вставить("InformationRegister",			"РегистрыСведений");
	Результат.Вставить("CalculationRegister",			"РегистрыРасчета");
	Результат.Вставить("BusinessProcess",				"БизнесПроцессы");
	Результат.Вставить("Task",							"Задачи");
	Результат.Вставить("ExchangePlan",					"ПланыОбмена");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяФайлаМодуля(ИмяМодуля)
	Возврат "CommonModule." + ИмяМодуля + ".Module.txt";
КонецФункции

&НаКлиенте
Функция ПолучитьПутьКФайлуМодуля(КаталогКонфигурации, ИмяМодуля)
	Возврат КаталогКонфигурации + "\CommonModule." + ИмяМодуля + ".Module.txt";
КонецФункции

&НаКлиенте
Функция ПолучитьМассивПроцедурИФункцийИзФайла(ИмяИсходногоФайла, ПолучатьИсходныйКод = Истина)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяИсходногоФайла);
	ТекстМодуля = ТекстовыйДокумент.ПолучитьТекст();
	
	Возврат ПолучитьМассивПроцедурИФункций(ТекстМодуля, ПолучатьИсходныйКод);
	
КонецФункции

&НаКлиенте
Функция ПолучитьМассивПроцедурИФункций(ТекстМодуля, ПолучатьИсходныйКод = Истина)
	
	СписокПроцедурИФукнций = Новый Массив;
	
	НомерСтроки			= 1;
	ПозицияВСтроке		= 1;
	ПозицияАбсолютная	= 1;
	СтарыйТипОбласти	= "КодМодуля";
	ТипОбласти			= "КодМодуля";
	ИмяУстановлено		= Ложь;
	ТекущаяПроцедураИлиФункция = Неопределено;
	
	ЭлементКода	= ПолучитьСледующийЭлементКода(ТекстМодуля, ТипОбласти, НомерСтроки, ПозицияВСтроке, ПозицияАбсолютная);
	СчетчикЭлементов = 1;
	Пока ЭлементКода <> Неопределено Цикл
		
		Если ТипОбласти <> СтарыйТипОбласти Тогда
			
			СчетчикЭлементов = 1;
			СтарыйТипОбласти = ТипОбласти;
			
			Если ТипОбласти = "ЗаголовокПроцедуры" Тогда
				
				ИмяУстановлено = Ложь;
				ТекущаяПроцедураИлиФункция = Новый Структура;
				ТекущаяПроцедураИлиФункция.Вставить("Тип", "Процедура");
				ТекущаяПроцедураИлиФункция.Вставить("НачальныйНомерСтроки", ЭлементКода.НачальныйНомерСтроки);
				ТекущаяПроцедураИлиФункция.Вставить("НачальнаяПозицияВСтроке", ЭлементКода.НачальнаяПозицияВСтроке);
				ТекущаяПроцедураИлиФункция.Вставить("НачальнаяПозицияАбсолютная", ЭлементКода.НачальнаяПозицияАбсолютная);
				СписокПроцедурИФукнций.Добавить(ТекущаяПроцедураИлиФункция);
				
			ИначеЕсли ТипОбласти = "ЗаголовокФункции" Тогда
				ИмяУстановлено = Ложь;
				ТекущаяПроцедураИлиФункция = Новый Структура;
				ТекущаяПроцедураИлиФункция.Вставить("Тип", "Функция");
				ТекущаяПроцедураИлиФункция.Вставить("НачальныйНомерСтроки", ЭлементКода.НачальныйНомерСтроки);
				ТекущаяПроцедураИлиФункция.Вставить("НачальнаяПозицияВСтроке", ЭлементКода.НачальнаяПозицияВСтроке);
				ТекущаяПроцедураИлиФункция.Вставить("НачальнаяПозицияАбсолютная", ЭлементКода.НачальнаяПозицияАбсолютная);
				СписокПроцедурИФукнций.Добавить(ТекущаяПроцедураИлиФункция);
				
			ИначеЕсли ТипОбласти = "КодФункции" ИЛИ  ТипОбласти = "КодПроцедуры" Тогда
				ТекущаяПроцедураИлиФункция.Вставить("КодЗаголовка", Сред(ТекстМодуля,
																		ТекущаяПроцедураИлиФункция.НачальнаяПозицияАбсолютная,
																		ЭлементКода.НачальнаяПозицияАбсолютная - ТекущаяПроцедураИлиФункция.НачальнаяПозицияАбсолютная + 1));
																		
				ТекущаяПроцедураИлиФункция.Вставить("КонецЗаголовкаНомерСтроки", ЭлементКода.НачальныйНомерСтроки);
				ТекущаяПроцедураИлиФункция.Вставить("КонецЗаголовкаПозицияВСтроке", ЭлементКода.НачальнаяПозицияВСтроке);
				ТекущаяПроцедураИлиФункция.Вставить("КонецЗаголовкаПозицияАбсолютная", ЭлементКода.НачальнаяПозицияАбсолютная);
				
			ИначеЕсли ТипОбласти = "КодМодуля" Тогда
				ТекущаяПроцедураИлиФункция.Вставить("КонечныйНомерСтроки", ЭлементКода.КонечныйНомерСтроки);
				ТекущаяПроцедураИлиФункция.Вставить("КонечнаяПозицияВСтроке", ЭлементКода.КонечнаяПозицияВСтроке);
				ТекущаяПроцедураИлиФункция.Вставить("КонечнаяПозицияАбсолютная", ЭлементКода.КонечнаяПозицияАбсолютная);
				
				ТекущаяПроцедураИлиФункция.Вставить("ИсходныйКод", Сред(ТекстМодуля,
																		ТекущаяПроцедураИлиФункция.НачальнаяПозицияАбсолютная,
																		ТекущаяПроцедураИлиФункция.КонечнаяПозицияАбсолютная - ТекущаяПроцедураИлиФункция.НачальнаяПозицияАбсолютная + 1));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если (ТипОбласти = "ЗаголовокПроцедуры" ИЛИ ТипОбласти = "ЗаголовокФункции")
			И ИмяУстановлено = Ложь
			И НЕ ЭлементКода.ДополнительныйТип = 1 // элемент кода не является комментарием
			И СчетчикЭлементов > 1 Тогда
			
			ТекущаяПроцедураИлиФункция.Вставить("Имя", ЭлементКода.Представление);
			ИмяУстановлено = Истина;
			
		КонецЕсли;

		ЭлементКода = ПолучитьСледующийЭлементКода(ТекстМодуля, ТипОбласти, НомерСтроки, ПозицияВСтроке, ПозицияАбсолютная);
		Если ЭлементКода <> Неопределено Тогда
			СчетчикЭлементов = СчетчикЭлементов + 1;
		КонецЕсли;

	КонецЦикла;
	
	Возврат СписокПроцедурИФукнций;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПозициюДляВставкиПроцедурИФункций(Знач ТекстМодуля)
	
	НомерСтроки			= 1;
	ПозицияВСтроке		= 1;
	ПозицияАбсолютная	= 1;
	СтарыйТипОбласти	= "КодМодуля";
	ТипОбласти			= "КодМодуля";
	ИмяУстановлено		= Ложь;
	ТекущаяПроцедураИлиФункция	= Неопределено;
	
	НеБылоПроцедурИФункций		= Истина;
	ЭтоЗонаОбъявленияПеременных = Ложь;
	НачалоПозицииВставкиПроцедурИФункций = 1;
		
	ПредыдущийЭлементКода	= ПолучитьСтруктуруЭлемента();
	ЭлементКода				= ПолучитьСледующийЭлементКода(ТекстМодуля, ТипОбласти, НомерСтроки, ПозицияВСтроке, ПозицияАбсолютная);
	СчетчикЭлементов		= 1;
	Пока ЭлементКода <> Неопределено Цикл
		
		Если ТипОбласти <> СтарыйТипОбласти Тогда
			
			СчетчикЭлементов = 1;
			СтарыйТипОбласти = ТипОбласти;
			
			Если ТипОбласти = "ЗаголовокПроцедуры" Тогда
				
				ИмяУстановлено = Ложь;
				ТекущаяПроцедураИлиФункция = Новый Структура;
				ТекущаяПроцедураИлиФункция.Вставить("Тип", "Процедура");
				
				Если ПредыдущийЭлементКода.ДополнительныйТип = 3 Тогда
					ТекущаяПроцедураИлиФункция.Вставить("НачальныйНомерСтроки", ПредыдущийЭлементКода.НачальныйНомерСтроки);
					ТекущаяПроцедураИлиФункция.Вставить("НачальнаяПозицияВСтроке", ПредыдущийЭлементКода.НачальнаяПозицияВСтроке);
					ТекущаяПроцедураИлиФункция.Вставить("НачальнаяПозицияАбсолютная", ПредыдущийЭлементКода.НачальнаяПозицияАбсолютная);
				Иначе
					ТекущаяПроцедураИлиФункция.Вставить("НачальныйНомерСтроки", ЭлементКода.НачальныйНомерСтроки);
					ТекущаяПроцедураИлиФункция.Вставить("НачальнаяПозицияВСтроке", ЭлементКода.НачальнаяПозицияВСтроке);
					ТекущаяПроцедураИлиФункция.Вставить("НачальнаяПозицияАбсолютная", ЭлементКода.НачальнаяПозицияАбсолютная);
				КонецЕсли;

				Если НеБылоПроцедурИФункций И НачалоПозицииВставкиПроцедурИФункций = 0 Тогда
					Возврат ТекущаяПроцедураИлиФункция.НачальнаяПозицияАбсолютная;
				Иначе
					Возврат НачалоПозицииВставкиПроцедурИФункций;
				КонецЕсли;
				
				НеБылоПроцедурИФункций = Ложь;
				
			ИначеЕсли ТипОбласти = "ЗаголовокФункции" Тогда
				
				ИмяУстановлено = Ложь;
				ТекущаяПроцедураИлиФункция = Новый Структура;
				ТекущаяПроцедураИлиФункция.Вставить("Тип", "Функция");
				
				Если ПредыдущийЭлементКода.ДополнительныйТип = 3 Тогда
					ТекущаяПроцедураИлиФункция.Вставить("НачальныйНомерСтроки", ПредыдущийЭлементКода.НачальныйНомерСтроки);
					ТекущаяПроцедураИлиФункция.Вставить("НачальнаяПозицияВСтроке", ПредыдущийЭлементКода.НачальнаяПозицияВСтроке);
					ТекущаяПроцедураИлиФункция.Вставить("НачальнаяПозицияАбсолютная", ПредыдущийЭлементКода.НачальнаяПозицияАбсолютная);
				Иначе
					ТекущаяПроцедураИлиФункция.Вставить("НачальныйНомерСтроки", ЭлементКода.НачальныйНомерСтроки);
					ТекущаяПроцедураИлиФункция.Вставить("НачальнаяПозицияВСтроке", ЭлементКода.НачальнаяПозицияВСтроке);
					ТекущаяПроцедураИлиФункция.Вставить("НачальнаяПозицияАбсолютная", ЭлементКода.НачальнаяПозицияАбсолютная);
				КонецЕсли;

				Если НеБылоПроцедурИФункций И НачалоПозицииВставкиПроцедурИФункций = 0 Тогда
					Возврат ТекущаяПроцедураИлиФункция.НачальнаяПозицияАбсолютная;
				Иначе
					Возврат НачалоПозицииВставкиПроцедурИФункций;
				КонецЕсли;
				
				НеБылоПроцедурИФункций = Ложь;
				
			ИначеЕсли ТипОбласти = "КодФункции" ИЛИ  ТипОбласти = "КодПроцедуры" Тогда
				
				ТекущаяПроцедураИлиФункция.Вставить("КодЗаголовка", Сред(ТекстМодуля,
																		ТекущаяПроцедураИлиФункция.НачальнаяПозицияАбсолютная,
																		ЭлементКода.НачальнаяПозицияАбсолютная - ТекущаяПроцедураИлиФункция.НачальнаяПозицияАбсолютная + 1));
																		
				ТекущаяПроцедураИлиФункция.Вставить("КонецЗаголовкаНомерСтроки", ЭлементКода.НачальныйНомерСтроки);
				ТекущаяПроцедураИлиФункция.Вставить("КонецЗаголовкаПозицияВСтроке", ЭлементКода.НачальнаяПозицияВСтроке);
				ТекущаяПроцедураИлиФункция.Вставить("КонецЗаголовкаПозицияАбсолютная", ЭлементКода.НачальнаяПозицияАбсолютная);
				
			ИначеЕсли ТипОбласти = "КодМодуля" Тогда
				
				ТекущаяПроцедураИлиФункция.Вставить("КонечныйНомерСтроки", ЭлементКода.КонечныйНомерСтроки);
				ТекущаяПроцедураИлиФункция.Вставить("КонечнаяПозицияВСтроке", ЭлементКода.КонечнаяПозицияВСтроке);
				ТекущаяПроцедураИлиФункция.Вставить("КонечнаяПозицияАбсолютная", ЭлементКода.КонечнаяПозицияАбсолютная);
				
				ТекущаяПроцедураИлиФункция.Вставить("ИсходныйКод", Сред(ТекстМодуля,
																		ТекущаяПроцедураИлиФункция.НачальнаяПозицияАбсолютная,
																		ТекущаяПроцедураИлиФункция.КонечнаяПозицияАбсолютная - ТекущаяПроцедураИлиФункция.НачальнаяПозицияАбсолютная + 1));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если (ТипОбласти = "ЗаголовокПроцедуры" ИЛИ ТипОбласти = "ЗаголовокФункции")
			И ИмяУстановлено = Ложь
			И НЕ ЭлементКода.ДополнительныйТип = 1 // элемент кода не является комментарием
			И СчетчикЭлементов > 1 Тогда
			
			ТекущаяПроцедураИлиФункция.Вставить("Имя", ЭлементКода.Представление);
			ИмяУстановлено = Истина;
			
		КонецЕсли;

		Если НЕ ЭлементКода.ДополнительныйТип = 1 И НЕ ЭлементКода.ДополнительныйТип = 2 Тогда // элемент кода не является комментарием или разметкой области
			ЗаполнитьЗначенияСвойств(ПредыдущийЭлементКода, ЭлементКода);
		КонецЕсли;
		
		Если НеБылоПроцедурИФункций Тогда
			
			Если НЕ ЭтоЗонаОбъявленияПеременных
				И НРег(ЭлементКода.Представление) = Нрег("Перем") Тогда
				
				ЭтоЗонаОбъявленияПеременных = Истина;
				
			ИначеЕсли ЭтоЗонаОбъявленияПеременных И ЭлементКода.Представление = ";" Тогда
				
				ЭтоЗонаОбъявленияПеременных = Ложь;
				НачалоПозицииВставкиПроцедурИФункций = ЭлементКода.КонечнаяПозицияАбсолютная + 1;
				
			ИначеЕсли НЕ ЭтоЗонаОбъявленияПеременных И ЭлементКода.ДополнительныйТип = 0 Тогда
				
				НачалоПозицииВставкиПроцедурИФункций = ЭлементКода.НачальнаяПозицияАбсолютная;
				
			КонецЕсли;
			
		КонецЕсли;

		ЭлементКода = ПолучитьСледующийЭлементКода(ТекстМодуля, ТипОбласти, НомерСтроки, ПозицияВСтроке, ПозицияАбсолютная);
		Если ЭлементКода <> Неопределено Тогда
			СчетчикЭлементов = СчетчикЭлементов + 1;
		КонецЕсли;

	КонецЦикла;
	
	Возврат НачалоПозицииВставкиПроцедурИФункций;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСледующийЭлементКода(ТекстМодуля, ТипОбласти, НомерСтроки, ПозицияВСтроке, ПозицияАбсолютная)
	
	ПропуститьСимволыБелогоПоля(ТекстМодуля, НомерСтроки, ПозицияВСтроке, ПозицияАбсолютная);
	ДлинаКода = СтрДлина(ТекстМодуля);
	
	НачальныйНомерСтроки		= НомерСтроки;
	НачальнаяПозицияВСтроке		= ПозицияВСтроке;
	НачальнаяПозицияАбсолютная	= ПозицияАбсолютная;
	
	ТекущийЭлементКода = ПолучитьСтруктуруЭлемента();
	ТекущееПредставлениеЭлемента = "";
	ДополнительныйТип = 0;
	
	Если ПозицияАбсолютная > ДлинаКода Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущийСимвол = Сред(ТекстМодуля, ПозицияАбсолютная, 1);
	УвеличитьСчетчикиПозиции(ПозицияАбсолютная, ПозицияВСтроке);
	
	ТекущееПредставлениеЭлемента = ТекущееПредставлениеЭлемента + ТекущийСимвол;
	
	Если ТекущийСимвол = "/" И ПозицияАбсолютная <= ДлинаКода Тогда // Проверяем, является ли текущий элемент комментарием
		
		СледующийСимвол = Сред(ТекстМодуля, ПозицияАбсолютная, 1);
		Если СледующийСимвол = "/" Тогда // элемент кода является комментарием, читаем его полностью
			
			ТекущееПредставлениеЭлемента = ТекущееПредставлениеЭлемента + СледующийСимвол;
			
			ПозицияАбсолютная = ПозицияАбсолютная + 1;
			ПозицияВСтроке = ПозицияВСтроке + 1;
			
			Пока ПозицияАбсолютная <= ДлинаКода Цикл                                                  
				
				ТекущийСимвол = Сред(ТекстМодуля, ПозицияАбсолютная, 1);
				
				Если ТекущийСимвол = Символы.ПС Тогда
					Прервать;
				КонецЕсли;
				
				УвеличитьСчетчикиПозиции(ПозицияАбсолютная, ПозицияВСтроке);
				ТекущееПредставлениеЭлемента = ТекущееПредставлениеЭлемента + ТекущийСимвол;
				
			КонецЦикла;
			
			УстановитьКоординатыЭлементаКода(ТекущийЭлементКода, ТекущееПредставлениеЭлемента, НачальныйНомерСтроки, НачальнаяПозицияВСтроке, НачальнаяПозицияАбсолютная, НомерСтроки, ПозицияВСтроке-1, ПозицияАбсолютная-1, 1);
			Возврат ТекущийЭлементКода;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Найти("0123456789", ТекущийСимвол) > 0 Тогда
	
		Пока ПозицияАбсолютная <= ДлинаКода Цикл
			
			ТекущийСимвол = Сред(ТекстМодуля, ПозицияАбсолютная, 1);
			
			Если Найти("0123456789.", ТекущийСимвол) = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ТекущееПредставлениеЭлемента = ТекущееПредставлениеЭлемента + ТекущийСимвол;
			УвеличитьСчетчикиПозиции(ПозицияАбсолютная, ПозицияВСтроке);
		
		КонецЦикла;

	// Строки	
	ИначеЕсли ТекущийСимвол = """" Тогда
		
		Пока ПозицияАбсолютная <= ДлинаКода Цикл
			
			ТекущийСимвол = Сред(ТекстМодуля, ПозицияАбсолютная, 1);
			УвеличитьСчетчикиПозиции(ПозицияАбсолютная, ПозицияВСтроке);
			
			ТекущееПредставлениеЭлемента = ТекущееПредставлениеЭлемента + ТекущийСимвол;
			Если ТекущийСимвол = """" Тогда
				Прервать;
			ИначеЕсли ТекущийСимвол = Символы.ПС Тогда
				ПозицияВСтроке = 1;
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
		
		КонецЦикла;
		
	// Даты
	ИначеЕсли ТекущийСимвол = "'" Тогда
		
		Пока ПозицияАбсолютная <= ДлинаКода Цикл
			
			ТекущийСимвол = Сред(ТекстМодуля, ПозицияАбсолютная, 1);
			УвеличитьСчетчикиПозиции(ПозицияАбсолютная, ПозицияВСтроке);
			
			ТекущееПредставлениеЭлемента = ТекущееПредставлениеЭлемента + ТекущийСимвол;
			Если ТекущийСимвол = "'" Тогда
				Прервать;
			ИначеЕсли ТекущийСимвол = Символы.ПС Тогда
				ПозицияВСтроке = 1;
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
		
		КонецЦикла;
		
	// Разметка областей
	ИначеЕсли ТекущийСимвол = "#" Тогда
		
		ДополнительныйТип = 2;
		Пока ПозицияАбсолютная <= ДлинаКода Цикл
			
			ТекущийСимвол = Сред(ТекстМодуля, ПозицияАбсолютная, 1);
			
			Если ТекущийСимвол = Символы.ПС Тогда
				Прервать;
			КонецЕсли;
			
			УвеличитьСчетчикиПозиции(ПозицияАбсолютная, ПозицияВСтроке);
			ТекущееПредставлениеЭлемента = ТекущееПредставлениеЭлемента + ТекущийСимвол;
		
		КонецЦикла;
		
	//Остальное
	ИначеЕсли Найти("/*-+?();=,", ТекущийСимвол) = 0 Тогда
	
		Если ТекущийСимвол = "&" Тогда
			ДополнительныйТип = 3;
		КонецЕсли;
		
		Пока ПозицияАбсолютная <= ДлинаКода Цикл
			
			ТекущийСимвол = Сред(ТекстМодуля, ПозицияАбсолютная, 1);
			
			Если ПустаяСтрока(СокрЛП(ТекущийСимвол)) или Найти("/*-+?();=,", ТекущийСимвол) > 0 Тогда
				Прервать;
			КонецЕсли;
			
			УвеличитьСчетчикиПозиции(ПозицияАбсолютная, ПозицияВСтроке);
			ТекущееПредставлениеЭлемента = ТекущееПредставлениеЭлемента + ТекущийСимвол;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипОбласти = "КодМодуля" Тогда
		
		Если Нрег(ТекущееПредставлениеЭлемента) = Нрег("Функция") Тогда
			ТипОбласти = "ЗаголовокФункции";
		ИначеЕсли Нрег(ТекущееПредставлениеЭлемента) = Нрег("Процедура") Тогда
			ТипОбласти = "ЗаголовокПроцедуры";
		КонецЕсли;
		
	ИначеЕсли ТипОбласти = "ЗаголовокФункции" И ТекущееПредставлениеЭлемента = ")" Тогда
		ТипОбласти = "КодФункции";
		
	ИначеЕсли ТипОбласти = "ЗаголовокПроцедуры" И ТекущееПредставлениеЭлемента = ")" Тогда
		ТипОбласти = "КодПроцедуры";
		
	ИначеЕсли ТипОбласти = "КодФункции" И НРег(ТекущееПредставлениеЭлемента) = Нрег("КонецФункции") Тогда
		ТипОбласти = "КодМодуля";
		
	ИначеЕсли ТипОбласти = "КодПроцедуры" И НРег(ТекущееПредставлениеЭлемента) = Нрег("КонецПроцедуры") Тогда
		ТипОбласти = "КодМодуля";
	КонецЕсли;
	
	УстановитьКоординатыЭлементаКода(ТекущийЭлементКода, ТекущееПредставлениеЭлемента, НачальныйНомерСтроки, НачальнаяПозицияВСтроке, НачальнаяПозицияАбсолютная, НомерСтроки, ПозицияВСтроке-1, ПозицияАбсолютная-1, ДополнительныйТип);
	Возврат ТекущийЭлементКода;
	
КонецФункции

&НаКлиенте
Процедура ПропуститьСимволыБелогоПоля(ТекстМодуля, НомерСтроки, ПозицияВСтроке, ПозицияАбсолютная)
	
	ДлинаКода = СтрДлина(ТекстМодуля);
	Пока ПозицияАбсолютная <= ДлинаКода Цикл
		
		ТекущийСимвол = Сред(ТекстМодуля, ПозицияАбсолютная, 1);
		
		Если ТекущийСимвол = Символы.ПС Тогда
			ПозицияВСтроке = 0;
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СокрЛП(ТекущийСимвол)) Тогда
			Прервать;
		КонецЕсли;
		
		ПозицияАбсолютная = ПозицияАбсолютная + 1;
		ПозицияВСтроке = ПозицияВСтроке + 1;

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьСчетчикиПозиции(ПозицияАбсолютная, ПозицияВСтроке)
	ПозицияАбсолютная = ПозицияАбсолютная + 1;
	ПозицияВСтроке = ПозицияВСтроке + 1;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруЭлемента()
	
	ТекущийЭлементКода = Новый Структура;
	ТекущийЭлементКода.Вставить("Представление", "");
	ТекущийЭлементКода.Вставить("ДополнительныйТип", 0); // 1 - комментарий, 2 - разметка области, 3 - директива
	ТекущийЭлементКода.Вставить("НачальныйНомерСтроки", 0);
	ТекущийЭлементКода.Вставить("НачальнаяПозицияВСтроке", 0);
	ТекущийЭлементКода.Вставить("НачальнаяПозицияАбсолютная", 0);
	ТекущийЭлементКода.Вставить("КонечныйНомерСтроки", 0);
	ТекущийЭлементКода.Вставить("КонечнаяПозицияВСтроке", 0);
	ТекущийЭлементКода.Вставить("КонечнаяПозицияАбсолютная", 0);
	
	Возврат ТекущийЭлементКода;

КонецФункции

&НаКлиенте
Процедура УстановитьКоординатыЭлементаКода(ТекущийЭлементКода, Представление, НачальныйНомерСтроки, НачальнаяПозицияВСтроке, НачальнаяПозицияАбсолютная, КонечныйНомерСтроки, КонечнаяПозицияВСтроке, КонечнаяПозицияАбсолютная, ДополнительныйТип = 0)
	
	ТекущийЭлементКода.Вставить("Представление", Представление);
	ТекущийЭлементКода.Вставить("ДополнительныйТип", ДополнительныйТип);
	ТекущийЭлементКода.Вставить("НачальныйНомерСтроки", НачальныйНомерСтроки);
	ТекущийЭлементКода.Вставить("НачальнаяПозицияВСтроке", НачальнаяПозицияВСтроке);
	ТекущийЭлементКода.Вставить("НачальнаяПозицияАбсолютная", НачальнаяПозицияАбсолютная);
	ТекущийЭлементКода.Вставить("КонечныйНомерСтроки", КонечныйНомерСтроки);
	ТекущийЭлементКода.Вставить("КонечнаяПозицияВСтроке", КонечнаяПозицияВСтроке);
	ТекущийЭлементКода.Вставить("КонечнаяПозицияАбсолютная", КонечнаяПозицияАбсолютная);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодменитьПроцедурыМодуля(ТекстИсходногоМодуля, ТекстМодуляДонораПроцедур)
	
	ПроцедурыИсходногоМодуля = ПолучитьМассивПроцедурИФункций(ТекстИсходногоМодуля);
	ПроцедурыЗаменяющие = ПолучитьМассивПроцедурИФункций(ТекстМодуляДонораПроцедур);
	
	СоответствиеПроцедурЗаменяющего = Новый Соответствие;
	Для Каждого Заменяющая Из ПроцедурыЗаменяющие Цикл
		СоответствиеПроцедурЗаменяющего.Вставить(Нрег(Заменяющая.Имя), Заменяющая);
	КонецЦикла;
	
	ИндексПроцедуры = ПроцедурыИсходногоМодуля.ВГраница();
	Пока ИндексПроцедуры >= 0 Цикл
		
		ТекПроцедура = ПроцедурыИсходногоМодуля[ИндексПроцедуры];
		ИндексПроцедуры = ИндексПроцедуры - 1;
		
		КлючПроцедуры = НРег(ТекПроцедура.Имя);
		Заменяющая = СоответствиеПроцедурЗаменяющего.Получить(КлючПроцедуры);
		Если Заменяющая = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НачалоМодуля =  Лев(ТекстИсходногоМодуля, ТекПроцедура.НачальнаяПозицияАбсолютная-1);
		КонецМодуля = "";
		Если ТекПроцедура.КонечнаяПозицияАбсолютная < СтрДлина(ТекстИсходногоМодуля) Тогда
			КонецМодуля = Сред(ТекстИсходногоМодуля, ТекПроцедура.КонечнаяПозицияАбсолютная + 1);
		КонецЕсли;
		
		ТекстИсходногоМодуля = НачалоМодуля + Заменяющая.ИсходныйКод + КонецМодуля;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДвоичныеДанныеИзМакета(ИмяМакета)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ДвоичныеДанные = ТекОбъект.ПолучитьМакет(ИмяМакета);
	Возврат ДвоичныеДанные;
	
КонецФункции

&НаКлиенте
Функция СохранитьОбработкуВФайл(ИмяМакета)
	
	Попытка
		ПолноеИмяФайлаОбработки = ПолучитьИмяВременногоФайла("epf");
		ДвоичныеДанные = ПолучитьДвоичныеДанныеИзМакета(ИмяМакета);
		ДвоичныеДанные.Записать(ПолноеИмяФайлаОбработки);
	Исключение
		ТекстОшибки = НСтр("ru = 'Ошибка записи обработки выгрузки и загрузки данных.'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
		         
		СообщитьПользователю(ТекстОшибки);
		ЗаписатьОшибкуВЖурнал(ТекстОшибки, "Обработка выгрузка и загрузки данных");
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ПолноеИмяФайлаОбработки;
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

&НаКлиенте
Функция ПроверитьЗаполнениеРеквизита(ИмяРеквизита, ТекстОшибки, Событие)
	
	Если ПустаяСтрока(Объект[ИмяРеквизита])Тогда
		ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, Событие);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеРеквизитов()
	
	Результат = Истина;
	
	// Проверим каталог файлов Тест-центра
	КаталогФайловТЦ = Новый Файл(Объект.КаталогТестЦентра);
	Если Не КаталогФайловТЦ.Существует() ИЛИ КаталогФайловТЦ.ЭтоФайл() Тогда
		ПоказатьИЗаписатьОшибкуВЖурнал(НСтр("ru = 'Не существует, либо некорректно указан каталог файлов Тест-центра (""" + Объект.КаталогТестЦентра +  """).'"),
										НСтр("ru = 'Проверка каталога Тест-центра.'") );
		Результат = Ложь;
	КонецЕсли;
	
	Если Объект.ПрименитьИзмененияКИБ Тогда
	
		СисИнфо = Новый СистемнаяИнформация;
		ЭтоWindows = (СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64);
		
		Если ЭтоWindows Тогда
			ПутьТолстогоКлиента = ?(ПустаяСтрока(Объект.КаталогКонфигуратораИКлиента), КаталогПрограммы(), Объект.КаталогКонфигуратораИКлиента) + "\1cv8.exe";
			ПутьТонкогоКлиента = ?(ПустаяСтрока(Объект.КаталогКонфигуратораИКлиента), КаталогПрограммы(), Объект.КаталогКонфигуратораИКлиента) + "\1cv8c.exe";
		Иначе
			ПутьТолстогоКлиента = ?(ПустаяСтрока(Объект.КаталогКонфигуратораИКлиента), КаталогПрограммы(), Объект.КаталогКонфигуратораИКлиента) + "/1cv8";
			ПутьТонкогоКлиента = ?(ПустаяСтрока(Объект.КаталогКонфигуратораИКлиента), КаталогПрограммы(), Объект.КаталогКонфигуратораИКлиента) + "/1cv8c";
		КонецЕсли;
		
		// Проверим наличие файла толстого клиента
		ФайлТолстогоКлиента = Новый Файл(ПутьТолстогоКлиента);
		Если Не ФайлТолстогоКлиента.Существует() ИЛИ Не ФайлТолстогоКлиента.ЭтоФайл() Тогда
			ПоказатьИЗаписатьОшибкуВЖурнал(НСтр("ru = 'Некорректно указан каталог толстого клиента'"),
											НСтр("ru = 'Проверка файла толстого клиента.'") );
			Результат = Ложь;
		КонецЕсли;
		
		 // Проверим наличие файла тонкого клиента
		ФайлТонкогоКлиента = Новый Файл(ПутьТонкогоКлиента);
		Если Не ФайлТонкогоКлиента.Существует() ИЛИ Не ФайлТонкогоКлиента.ЭтоФайл() Тогда
			ПоказатьИЗаписатьОшибкуВЖурнал(НСтр("ru = 'Некорректно указан каталог тонкого клиента'"),
											НСтр("ru = 'Проверка файла тонкого клиента.'") );
			Результат = Ложь;
		КонецЕсли;
		 
		Если Не ПроверитьЗаполнениеРеквизита("СерверПредприятия",		НСтр("ru = 'Не указан сервер предприятия'"),	НСтр("ru = 'Проверка имени сервера предприятия.'")) Тогда
			Результат = Ложь;
		КонецЕсли;
		
		Если Не ПроверитьЗаполнениеРеквизита("ИмяИнформационнойБазы",	НСтр("ru = 'Не указана информационная база'"),	НСтр("ru = 'Проверка имени информационной базы.'")) Тогда
			Результат = Ложь;
		КонецЕсли;
		 
		// Проверим каталог файлов целевой конфигурации
		Если Не Объект.ОбновитьФайлыЦелевойКонфигурации ИЛИ ПустаяСтрока(Объект.КаталогЦелевойКонфигурации) Тогда
			
			КаталогФайловЦелевойКонфигурации = Новый Файл(Объект.КаталогЦелевойКонфигурации);
			Если Не КаталогФайловЦелевойКонфигурации.Существует() ИЛИ КаталогФайловЦелевойКонфигурации.ЭтоФайл() Тогда
				ПоказатьИЗаписатьОшибкуВЖурнал(НСтр("ru = 'Некорректно указан каталог файлов целевой конфигурации (""" + Объект.КаталогЦелевойКонфигурации +  """).'"),
												    НСтр("ru = 'Проверка каталога целевой конфигурации.'"));
				Результат = Ложь;
				
			КонецЕсли;		
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(Объект.ФайлДанныхТестЦентра) Тогда
			
			ФайлДанныхТЦ = Новый Файл(Объект.ФайлДанныхТестЦентра);
			Если Не ФайлДанныхТЦ.Существует() ИЛИ Не ФайлДанныхТЦ.ЭтоФайл() Тогда
				ПоказатьИЗаписатьОшибкуВЖурнал(НСтр("ru = 'Некорректно указан файл данных Тест-центра (""" + Объект.ФайлДанныхТестЦентра +  """).'"),
												НСтр("ru = 'Проверка файла данных Тест-центра.'") );
				Результат = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// Проверим каталог файлов целевой конфигурации
		КаталогФайловЦелевойКонфигурации = Новый Файл(Объект.КаталогЦелевойКонфигурации);
		Если Не КаталогФайловЦелевойКонфигурации.Существует() ИЛИ КаталогФайловЦелевойКонфигурации.ЭтоФайл() Тогда
			ПоказатьИЗаписатьОшибкуВЖурнал(НСтр("ru = 'Некорректно указан каталог файлов целевой конфигурации (""" + Объект.КаталогЦелевойКонфигурации +  """).'"),
											    НСтр("ru = 'Проверка каталога целевой конфигурации.'"));
			Результат = Ложь;
			
		КонецЕсли;		
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВыбратьКаталогНачало(СтартовыйКаталог, ЦелевойРеквизит)

	ОповещениеВыбора = Новый ОписаниеОповещения("ВыбратьКаталогИлиФайлЗавершение", ЭтотОбъект, ЦелевойРеквизит);
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогВыбора = Новый ДиалогВыбораФайла(Режим);
	ДиалогВыбора.Каталог = СтартовыйКаталог;
	ДиалогВыбора.Показать(ОповещениеВыбора);

КонецФункции

&НаКлиенте
Функция ВыбратьФайлНачало(СтартовыйФайл, СтруктураПараметров)

	ОповещениеВыбора = Новый ОписаниеОповещения("ВыбратьКаталогИлиФайлЗавершение", ЭтотОбъект, СтруктураПараметров.ИмяРеквизита);
	Режим = РежимДиалогаВыбораФайла.Открытие;
	
	СтартовыйКаталог = "";
	Попытка
		Файл = Новый Файл(СтартовыйФайл);
		СтартовыйКаталог = Файл.Путь;
	Исключение
	КонецПопытки;
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(Режим);
	ДиалогВыбора.Каталог = СтартовыйКаталог;
	ДиалогВыбора.ПолноеИмяФайла = СтартовыйФайл;
	
	Фильтр = Неопределено;
	СтруктураПараметров.Свойство("Фильтр", Фильтр);
	Если Фильтр <> Неопределено Тогда
		ДиалогВыбора.Фильтр = Фильтр;
	КонецЕсли;
		
	ДиалогВыбора.Показать(ОповещениеВыбора);

КонецФункции

&НаКлиенте
Процедура ВыбратьКаталогИлиФайлЗавершение(Файлы, ИмяРеквизита) Экспорт
	
	Если Файлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Файлы.Количество() > 0 Тогда
		Объект[ИмяРеквизита] = Файлы[0];
		УстановитьДоступностьЭлементов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьПараметрыИзСоответствия(Соответствие)

	Результат = Истина;
	
	Результат = Результат И УстановитьЗначениеИзСоответствия("TCCatalog",		Соответствие, Объект.КаталогТестЦентра);
	Результат = Результат И УстановитьЗначениеИзСоответствия("TCDataFile",		Соответствие, Объект.ФайлДанныхТестЦентра);
	Результат = Результат И УстановитьЗначениеИзСоответствия("CfCatalog",		Соответствие, Объект.КаталогЦелевойКонфигурации);
	Результат = Результат И УстановитьЗначениеИзСоответствия("RefreshFiles",	Соответствие, Объект.ОбновитьФайлыЦелевойКонфигурации);
	Результат = Результат И УстановитьЗначениеИзСоответствия("ClientsPath",		Соответствие, Объект.КаталогКонфигуратораИКлиента);
	Результат = Результат И УстановитьЗначениеИзСоответствия("V837AndOlder",	Соответствие, Объект.ВерсияПлатформы837ИВыше);
	Результат = Результат И УстановитьЗначениеИзСоответствия("Server",			Соответствие, Объект.СерверПредприятия);
	Результат = Результат И УстановитьЗначениеИзСоответствия("IBName",			Соответствие, Объект.ИмяИнформационнойБазы);
	Результат = Результат И УстановитьЗначениеИзСоответствия("Login",			Соответствие, Объект.ЛогинИБ);
	Результат = Результат И УстановитьЗначениеИзСоответствия("Pwd",				Соответствие, Объект.ПарольИБ);
	Результат = Результат И УстановитьЗначениеИзСоответствия("ResultDt",		Соответствие, Объект.КонечныйФайлВыгрузки);
	Результат = Результат И УстановитьЗначениеИзСоответствия("Result",			Соответствие, ФайлРезультата);
	
	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УстановитьЗначениеИзСоответствия(Знач ИмяНастройки, Соответствие, ПеременнаяНастройки)
	
	Значение = Соответствие.Получить(ИмяНастройки);
	Если Значение <> Неопределено Тогда
		
		Попытка
			
			Если ТипЗнч(ПеременнаяНастройки) = Тип("Булево") Тогда
				ПеременнаяНастройки = Число(Значение) > 0;
			Иначе
				ПеременнаяНастройки = Значение;
			КонецЕсли;
			
		Исключение
			
			ТекстОшибки = НСтр("ru = 'Ошибка обработки параметра командной строки.'");
			ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
			         
			СообщитьПользователю(ТекстОшибки);
			ЗаписатьОшибкуВЖурнал(ТекстОшибки, "Параметры командной строки");
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазложитьСтрокуПараметровВСоответствие(Знач ИсходнаяСтрока, Разделитель = ";")
	
	Результат = Новый Соответствие;
	
	ОбычноеЗакрытие = Разделитель;
	ЭкранированноеЗакрытие = """" + Разделитель;
	
	ТекущийКлюч = "";
	ОжидаемоеЗакрытиеСтроки = Разделитель;
	ОстатокСтроки = ИсходнаяСтрока;
	
	ПозицияЗнакаРавно = Найти(ОстатокСтроки, "=");
	Пока ПозицияЗнакаРавно <> 0 Цикл
		
		ТекущийКлюч = Лев(ОстатокСтроки, ПозицияЗнакаРавно - 1);
		ОстатокСтроки = Прав(ОстатокСтроки, СтрДлина(ОстатокСтроки) - ПозицияЗнакаРавно);
		
		Сч = 1;
		ТекущаяСтрока = "";
		ПредыдущийСимвол = "";
		ЭтоПервыйСимволПодстроки = Истина;		
		Пока Сч <= СтрДлина(ОстатокСтроки) Цикл
			
			ТекущийСимвол = Сред(ОстатокСтроки, Сч, 1);
			Если ЭтоПервыйСимволПодстроки Тогда
				ЭтоПервыйСимволПодстроки = Ложь;
				Если ТекущийСимвол = """" Тогда
					ОжидаемоеЗакрытиеСтроки = ЭкранированноеЗакрытие;
					Сч = Сч + 1;
					Продолжить;
				Иначе
					ОжидаемоеЗакрытиеСтроки = ОбычноеЗакрытие;
				КонецЕсли;
			КонецЕсли;
			
			Если ТекущийСимвол = """"
				И ОжидаемоеЗакрытиеСтроки = ЭкранированноеЗакрытие
				И ПредыдущийСимвол = """" Тогда
				ПредыдущийСимвол = "";
				Сч = Сч + 1;
				Продолжить;
			КонецЕсли;
			
			Если ПредыдущийСимвол+ТекущийСимвол = ОжидаемоеЗакрытиеСтроки Тогда
				
				Если ОжидаемоеЗакрытиеСтроки = ЭкранированноеЗакрытие
					И СтрДлина(ТекущаяСтрока) > 0 Тогда
					ТекущаяСтрока = Лев(ТекущаяСтрока, СтрДлина(ТекущаяСтрока) - 1);
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
			
			ТекущаяСтрока = ТекущаяСтрока + ТекущийСимвол;
			Если ОжидаемоеЗакрытиеСтроки = ЭкранированноеЗакрытие Тогда
				ПредыдущийСимвол = ТекущийСимвол;
			КонецЕсли;
			
			Сч = Сч + 1;
			
		КонецЦикла;
		
		Результат.Вставить(ТекущийКлюч, ТекущаяСтрока);
		ОстатокСтроки = Прав(ОстатокСтроки, СтрДлина(ОстатокСтроки) - Сч);
		ПозицияЗнакаРавно = Найти(ОстатокСтроки, "=");
		
	КонецЦикла;
	
	Если ОстатокСтроки <> "" Тогда
		Результат.Вставить(ОстатокСтроки, "");
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

&НаКлиенте
Функция РазбитьСтрокуПоРазделителю(Знач СтрокаТекста, Разделитель = ".")
	
	МассивЗначений = Новый Массив;
	
	Пока СтрокаТекста <> "" Цикл
		
		Позиция = Найти(СтрокаТекста, Разделитель);
		Если Позиция = 0 Тогда
			МассивЗначений.Добавить(СтрокаТекста);
			Возврат МассивЗначений;
		КонецЕсли;
		
		ЛеваяЧасть = Лев(СтрокаТекста, Позиция - 1);
		МассивЗначений.Добавить(ЛеваяЧасть);
		
		СтрокаТекста = Прав(СтрокаТекста, СтрДлина(СтрокаТекста) - Позиция - СтрДлина(Разделитель) + 1);
		Если СтрокаТекста = "" Тогда
			МассивЗначений.Добавить("");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивЗначений;
	
КонецФункции

Функция СравнитьВерсии(Знач Версия1, Знач Версия2) Экспорт

	Версия1 = СтрЗаменить(Версия1, ".", Символы.ПС);
	Версия2 = СтрЗаменить(Версия2, ".", Символы.ПС);
	
	Для Сч = 1 По 4 Цикл
		
		Строка1 = СтрПолучитьСтроку(Версия1, Сч);
		Строка2 = СтрПолучитьСтроку(Версия2, Сч);
		
		Число1 = ?(Строка1 = "", 0, Число(Строка1));
		Число2 = ?(Строка2 = "", 0, Число(Строка2));
				
		Если Число1 > Число2 Тогда
			 Возврат 1;
		 ИначеЕсли Число1 < Число2 Тогда
			 Возврат -1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСодержимоеТекстовогоФайла(Знач ИмяФайла)
	
	Попытка
		Документ = Новый ТекстовыйДокумент;
		Документ.Прочитать(ИмяФайла);
		ТекстДокумента = Документ.ПолучитьТекст();
	Исключение
		ТекстДокумента = "";
		ТекстОшибки = НСтр("ru = 'Ошибка при работе с текстовым файлом """ + ИмяФайла +  """.'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
		ПоказатьИЗаписатьОшибкуВЖурнал(ТекстОшибки, НСтр("ru = 'Работа с текстовым файлом'"));
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ТекстДокумента;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяФайлаВременногоЛога()
	
	Возврат ПолучитьИмяВременногоФайла("txt");
	
КонецФункции

&НаКлиенте
Функция ПолучитьТекстФайла(ПутьКФайлу)
	
	Результат = "";
	Документ = Новый ТекстовыйДокумент;
	
	Попытка
		Документ.Прочитать(ПутьКФайлу);
		Результат = Документ.ПолучитьТекст();
	Исключение
		Результат = "";
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьТекстФайла(ПутьКФайлу, Текст)
	
	Документ = Новый ТекстовыйДокумент;
	Документ.УстановитьТекст(Текст);
	Документ.Записать(ПутьКФайлу);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРезультатВФайл(ПутьКФайлуРезультата, РезультатТекст, НужноЗавершитьРаботу = Ложь)
	
	Если Не ПустаяСтрока(ПутьКФайлуРезультата) Тогда
		
		Попытка
			ЗаписатьТекстФайла(ФайлРезультата, РезультатТекст);
		Исключение
			ТекстОшибки	= НСтр("ru = 'Не удалось записать результат в файл """ + ФайлРезультата +  """ '");
			ТекстОшибки	= ТекстОшибки + Символы.ПС + ОписаниеОшибки();
			ЗаписатьОшибкуВЖурнал(ТекстОшибки, "Загрузка конфигурации из файлов");
		КонецПопытки;
		
	КонецЕсли;
	
	Если НужноЗавершитьРаботу Тогда
		ЗавершитьРаботуСистемы(Ложь, Ложь);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

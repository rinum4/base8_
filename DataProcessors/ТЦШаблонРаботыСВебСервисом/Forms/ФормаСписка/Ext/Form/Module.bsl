&НаСервере
Перем WSПрокси;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ПутьКФормам = ОбработкаОбъект.Метаданные().ПолноеИмя() + ".Форма";
	
КонецПроцедуры

&НаКлиенте
Процедура Подключиться(Команда)
	
	Подключен = ПодключитьсяНаСервере();
	УправлениеДоступностью();
	
	Элементы.Агент.СписокВыбора.Очистить();
	Элементы.СценарийХост.СписокВыбора.Очистить();
	Элементы.СценарийСценарий.СписокВыбора.Очистить();
	Если Подключен Тогда
		СписокСценариев = ПолучитьСписокСценариев(Объект.Сценарии);
		Для Каждого Элемент Из СписокСценариев Цикл
			Элементы.СценарийСценарий.СписокВыбора.Добавить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
		
		ЗаполнитьСписокКлиентов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодключитьсяНаСервере()
	
	Результат = Ложь;
	
	WSПрокси = СоздатьОбъектWSПрокси();
	Если WSПрокси <> Неопределено Тогда
		ЗаполнитьСпискиВыбора(WSПрокси);
		ОбновитьСписокНаСервере();
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СоздатьОбъектWSПрокси()
	
	Попытка
		
		Определение = Новый WSОпределения(Объект.WSDL, Объект.Пользователь, Объект.Пароль);
		WSСервис = Определение.Сервисы[0];
		WSПрокси = Новый WSПрокси(Определение, WSСервис.URIПространстваИмен, WSСервис.Имя, WSСервис.ТочкиПодключения[0].Имя);
		WSПрокси.Пользователь = Объект.Пользователь;
		WSПрокси.Пароль = Объект.Пароль;
		
	Исключение
		ТекстИсключения = ОписаниеОшибки();
		Сообщить(ТекстИсключения);
	КонецПопытки;
	
	Возврат WSПрокси;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСпискиВыбора(WSПрокси)
	
	// Получение списка типов клиентов
	XDTOРезультат = WSПрокси.GetClientAppsTypes();
	ТипыКлиентскихПриложений = Новый Структура;
	Для Каждого Item Из XDTOРезультат.Items Цикл
		ТипыКлиентскихПриложений.Вставить(Item.ID, Item.Name);
	КонецЦикла;
	
	// Получение списка сценариев
	XDTOРезультат = WSПрокси.GetScenarios();
	Объект.Сценарии.Очистить();
	Для Каждого Item Из XDTOРезультат.Items Цикл
		НоваяСтрока = Объект.Сценарии.Добавить();
		НоваяСтрока.УИД = Item.UUID;
		НоваяСтрока.Наименование = Item.Name;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностью()
	
	Элементы.УправлениеТестом.Доступность = Подключен;
	Элементы.УправлениеТестомОбновить.Доступность = Подключен;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	ОбновитьСписокНаСервере();
	ЗаполнитьСписокКлиентов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокКлиентов()
	
	Элементы.Агент.СписокВыбора.Очистить();
	Для Каждого Элемент Из Объект.УправлениеТестом Цикл
		Элементы.Агент.СписокВыбора.Добавить(Элемент.УИД, Элемент.Наименование);
	КонецЦикла;
	
	Элементы.СценарийХост.СписокВыбора.Очистить();
	Для Каждого Элемент Из Объект.УправлениеТестом Цикл
		Элементы.СценарийХост.СписокВыбора.Добавить(Элемент.УИД, Элемент.Наименование);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокНаСервере()
	
	Если WSПрокси = Неопределено Тогда
		WSПрокси = СоздатьОбъектWSПрокси();
	КонецЕсли;
	
	Попытка
		ТипКлиентаТип = ФабрикаXDTO.Тип(
			"http://v8.1c.ru/testcenter/RemoteManagement/1.0.0.2","ClientType");
		СценарийТип = ФабрикаXDTO.Тип(
			"http://v8.1c.ru/testcenter/RemoteManagement/1.0.0.2","Scenario");
		
		XDTOРезультат = WSПрокси.GetTestManagementList();
		СписокКлиентов = XDTOРезультат.ПолучитьСписок("Items");
		
		Объект.УправлениеТестом.Очистить();
		Для Каждого Элемент из СписокКлиентов Цикл
			
			НоваяСтрока = Объект.УправлениеТестом.Добавить();
			
			НоваяСтрока.Наименование = Элемент.Name;
			НоваяСтрока.УИД = Элемент.UUID;
			НоваяСтрока.Хост = Элемент.Host;
			НоваяСтрока.ТипКлиента = Элемент.ClientType;
			Если Элемент.ClientAppType <> Неопределено Тогда
				НоваяСтрока.ТипПриложенияИД = Элемент.ClientAppType.ID;
				НоваяСтрока.ТипПриложения = Элемент.ClientAppType.Name;
			Иначе
				НоваяСтрока.ТипПриложенияИД = "";
				НоваяСтрока.ТипПриложения = "";
			КонецЕсли;
			НоваяСтрока.ДатаНачала = Элемент.StartDate;
			НоваяСтрока.ДатаОкончания = Элемент.FinishDate;
			Если Элемент.Scenario <> Неопределено Тогда
				НоваяСтрока.СценарийУИД = Элемент.Scenario.UUID;
				НоваяСтрока.Сценарий = Элемент.Scenario.Name;
			Иначе
				НоваяСтрока.СценарийУИД = "";
				НоваяСтрока.Сценарий = "";
			КонецЕсли;
			НоваяСтрока.Выполнение = Элемент.isExecuted;
			НоваяСтрока.Результат = Элемент.Result;
			
		КонецЦикла;
	Исключение
		ТекстИсключения = ОписаниеОшибки();
		Сообщить(ТекстИсключения);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция УстановитьПараметрыКлиента(ПараметрыКлиента)
	
	WSПрокси = СоздатьОбъектWSПрокси();
	
	СвойстваСценария = ПолучитьСвойстваСценарияПоИД(Объект.Сценарии, ПараметрыКлиента.Сценарий);
	Результат = WSПрокси.SetTestManagementByID(ПараметрыКлиента.УИД,
		ПараметрыКлиента.ТипПриложенияИД, 
		ПараметрыКлиента.ДатаНачала, 
		ПараметрыКлиента.ДатаОкончания, 
		СвойстваСценария.УИД);
		
	Если Не ПустаяСтрока(Результат) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Результат;
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УправлениеТестомВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипыКлиентскихПриложений", ТипыКлиентскихПриложений);
	ПараметрыФормы.Вставить("Сценарии", ПолучитьСписокСценариев(Объект.Сценарии));
	
	ДанныеСтроки = Элементы.УправлениеТестом.ТекущиеДанные;
	ПараметрыКлиента = Новый Структура;
	ПараметрыКлиента.Вставить("Наименование", ДанныеСтроки.Наименование);
	ПараметрыКлиента.Вставить("УИД", ДанныеСтроки.УИД);
	ПараметрыКлиента.Вставить("Хост", ДанныеСтроки.Хост);
	ПараметрыКлиента.Вставить("ТипКлиента", ДанныеСтроки.ТипКлиента);
	ПараметрыКлиента.Вставить("ТипПриложения", ДанныеСтроки.ТипПриложенияИД);
	ПараметрыКлиента.Вставить("ДатаНачала", ДанныеСтроки.ДатаНачала);
	ПараметрыКлиента.Вставить("ДатаОкончания", ДанныеСтроки.ДатаОкончания);
	
	СвойстваСценария = ПолучитьСвойстваСценарияПоУИД(Объект.Сценарии, ДанныеСтроки.СценарийУИД);
	
	Если ЗначениеЗаполнено(СвойстваСценария.ИД) Тогда
		ПараметрыКлиента.Вставить("Сценарий", "Строка" + Формат(СвойстваСценария.ИД, "ЧГ=0"));
	Иначе
		ПараметрыКлиента.Вставить("Сценарий", "");
	КонецЕсли;
	
	ПараметрыКлиента.Вставить("Выполнение", ДанныеСтроки.Выполнение);
	ПараметрыФормы.Вставить("ПараметрыКлиента", ПараметрыКлиента);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьПараметрыИзФормыЭлемента", ЭтотОбъект, ДанныеСтроки);
	
	ФормаЭлемента = ПолучитьФорму(ПутьКФормам + ".ФормаЭлемента", ПараметрыФормы);
	ФормаЭлемента.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаЭлемента.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаЭлемента.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыИзФормыЭлемента(Результат, ДанныеСтроки) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОписаниеОшибки = УстановитьПараметрыКлиента(Результат);
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, Результат);
			СвойстваСценария = ПолучитьСвойстваСценарияПоИД(Объект.Сценарии, Результат.Сценарий);
			ДанныеСтроки.Сценарий = СвойстваСценария.Наименование;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокСценариев(Знач Сценарии)
	
	СписокСценариев = Новый Структура;
	Для Каждого ТекСтр Из Сценарии Цикл
		Ключ = "Строка" + Формат(ТекСтр.НомерСтроки, "ЧГ=0");
		СписокСценариев.Вставить(Ключ, ТекСтр.Наименование);
	КонецЦикла;
	
	Возврат СписокСценариев;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСвойстваСценарияПоУИД(Знач Сценарии, Знач УИДСценария)
	
	Результат = Новый Структура("ИД,Наименование");
	
	Отбор = Новый Структура("УИД", УИДСценария);
	НайденныеСтроки = Сценарии.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Результат.ИД = НайденныеСтроки[0].НомерСтроки;
		Результат.Наименование = НайденныеСтроки[0].Наименование;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСвойстваСценарияПоИД(Знач Сценарии, Знач ИДСценария)
	
	Результат = Новый Структура("УИД,Наименование");
	Если Не ПустаяСтрока(ИДСценария) Тогда
		НомерСтроки = СтрЗаменить(ИДСценария, "Строка", "");
		Отбор = Новый Структура("НомерСтроки", Число(НомерСтроки));
		НайденныеСтроки = Сценарии.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Результат.УИД = НайденныеСтроки[0].УИД;
			Результат.Наименование = НайденныеСтроки[0].Наименование;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьАгентов(Команда)
	
	ВыгрузитьАгентовНаСервере();
	ЗаполнитьСписокКлиентов();
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьАгентовНаСервере()
	
	WSПрокси = СоздатьОбъектWSПрокси();
	
	Результат = WSПрокси.UnloadAgents();
	Если Не ПустаяСтрока(Результат) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Результат;
		Сообщение.Сообщить();
	КонецЕсли;
	
	ОбновитьСписокНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАгента(Команда)
	
	Если Не ЗначениеЗаполнено(Агент) Тогда
		Возврат
	КонецЕсли;
	
	Отбор = Новый Структура("УИД", Агент);
	СтрокиТаблицы = Объект.УправлениеТестом.НайтиСтроки(Отбор);
	Если СтрокиТаблицы.Количество() = 0 Тогда
		Возврат
	Иначе
		СтрокаТаблицы = СтрокиТаблицы[0];
	КонецЕсли;
	
	ПараметрыКлиента = ПолучитьСтруктуруПараметровКлиента();
	ПараметрыКлиента.УИД = СтрокаТаблицы.УИД;
	ПараметрыКлиента.Сценарий = "";
	ПараметрыКлиента.ТипПриложенияИД = "АгентТЦ";
	ПараметрыКлиента.ДатаНачала = АгентДатаНачала;
	ПараметрыКлиента.ДатаОкончания = АгентДатаОкончания;
	
	ОписаниеОшибки = УстановитьПараметрыКлиента(ПараметрыКлиента);
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ОбновитьСписокНаСервере();
		Агент = Неопределено;
		АгентДатаНачала = Неопределено;
		АгентДатаОкончания = Неопределено;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки;
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСценарий(Команда)
	
	Если Не ЗначениеЗаполнено(СценарийХост) Тогда
		Возврат
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СценарийСценарий) Тогда
		Возврат
	КонецЕсли;
	
	Отбор = Новый Структура("УИД", СценарийХост);
	СтрокиТаблицы = Объект.УправлениеТестом.НайтиСтроки(Отбор);
	Если СтрокиТаблицы.Количество() = 0 Тогда
		Возврат
	Иначе
		СтрокаТаблицы = СтрокиТаблицы[0];
	КонецЕсли;
	
	ПараметрыКлиента = ПолучитьСтруктуруПараметровКлиента();
	ПараметрыКлиента.УИД = СтрокаТаблицы.УИД;
	ПараметрыКлиента.Сценарий = СценарийСценарий;
	ПараметрыКлиента.ТипПриложенияИД = "УправлениеТестом";
	ПараметрыКлиента.ДатаНачала = СценарийДатаНачала;
	ПараметрыКлиента.ДатаОкончания = СценарийДатаОкончания;
	
	ОписаниеОшибки = УстановитьПараметрыКлиента(ПараметрыКлиента);
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ОбновитьСписокНаСервере();
		СценарийСценарий = Неопределено;
		СценарийХост = Неопределено;
		СценарийДатаНачала = Неопределено;
		СценарийДатаОкончания = Неопределено;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки;
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПараметровКлиента()
	
	ПараметрыКлиента = Новый Структура;
	ПараметрыКлиента.Вставить("УИД", Неопределено);
	ПараметрыКлиента.Вставить("Сценарий", Неопределено);
	ПараметрыКлиента.Вставить("ТипПриложенияИД", Неопределено);
	ПараметрыКлиента.Вставить("ДатаНачала", Неопределено);
	ПараметрыКлиента.Вставить("ДатаОкончания", Неопределено);
	
	Возврат ПараметрыКлиента;
	
КонецФункции



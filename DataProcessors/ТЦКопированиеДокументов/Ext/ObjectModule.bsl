
#Область ПользовательскиеОбработчики

// Предназначена для уточнения видов документов, копирование которых должно выполняться,
// либо задания реквизитов, в которых хранится документ-основание
//
// Параметры:
//  ВидыДокументовДляОбработки - Таблица значений - Таблица со списком видов документов. По умолчанию инициализируется
//                                                  списком документов всех видов, зарегистрированных в конфигурации, 
//                                                  за исключением относящихся к подсистеме "ТестЦентр" или начинающихся с "Удалить"
//      ВидыДокументовДляОбработки.ВидДокумента - Строка - Имя вида документа, как оно задано в конфигурации
//      ВидыДокументовДляОбработки.РеквизитДокументОснование - Строка - Имя реквизита, в котором содержится документ-основание
//                                                                      Если реквизит содержится в табличной части, то задается
//                                                                      в формате "ИмяТабличнойЧасти.ИмяРеквизита".
//
Процедура ПередНачаломОбработки(ВидыДокументовДляОбработки)
	
	// ВидыДокументовДляОбработки.Очистить();
	// НоваяСтрока = ВидыДокументовДляОбработки.Добавить();
	// НоваяСтрока.ВидДокумента              = "СчетФактураВыданный";
	// НоваяСтрока.РеквизитДокументОснование = "ДокументыОснования.ДокументОснование";
	
КонецПроцедуры // ПередНачаломОбработки

// Предназначена для выполнения произвольных проверок перед копированием документов.
// Может использоваться для пропуска копирования определенных документов.
//
// Параметры:
//  ИсходныйДокументСсылка - ДокументСсылка - Исходный документ
//  Отказ - Булево - Признак отказа от копирования документа
//
Процедура ПередКопированием(ИсходныйДокументСсылка, Отказ)
	
КонецПроцедуры

// Предназначена для выполнения дополнительного заполнения данных документа после копирования
//
// Параметры:
//  ИсходныйДокументСсылка  - ДокументСсылка - Исходный документ
//  СкопированныйДокументОбъект  - ДокументОбъект - Копия исходного документа
//  РежимЗаписи - РежимЗаписиДокумента - 
//
Процедура ПослеКопирования(ИсходныйДокументСсылка, СкопированныйДокументОбъект, РежимЗаписи)
	
КонецПроцедуры // ПослеКопирования

// Предназначена для выборочной отмены проведения скопированных документов, а также для выполнения произвольного
// кода перед проведением.
//
// Параметры:
//  СкопированныйДокументОбъект - ДокументОбъект - Копия исходного документа
//  Отказ - Булево - Признак отказа от проведения документа
//
Процедура ПередПроведением(СкопированныйДокументОбъект, Отказ)
	
КонецПроцедуры // ПередПроведением

// Предназначена для выполнения произвольной логики после завершения процесса копирования
// документов за период. Может быть использована, например, для проверки результатов
// копирования.
//
// Параметры:
//  Отказ  - Булево - Признак необходимости отмены результатов копирования
//
Процедура ПослеОкончанияОбработки(Отказ)
	
	//Отказ = Истина;
	//Сообщить("Копирование завершено, транзакция отменена");
	
КонецПроцедуры // ПослеОкончанияОбработки()

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Предназначена для выполнения последовательной процедуры копирования данных
// во всех областях информационной базы
//
Процедура ВыполнитьКопированиеПоВсемОбластям(ВидыДокументовДляОбработки, НачалоЭталонногоПериода, ОкончаниеЭталонногоПериода, НачалоЦелевогоПериода, ОкончаниеЦелевогоПериода, ПроводитьСкопированныеДокументы, ВыполнениеВФоновомЗадании) Экспорт
	
	СкопированоДокументовВсего = 0;
	
	Если ВидыДокументовДляОбработки = Неопределено Тогда
		ИнициализироватьСписокВидовДокументовДляОбработки(ВидыДокументовДляОбработки);
	КонецЕсли;
	
	РазделениеВключено = Ложь;
	РазделительУстановлен = Ложь;
	Если БСППодсистемаИспользуется("РаботаВМоделиСервиса") Тогда
		Выполнить("РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();");
		Если РазделениеВключено Тогда
			Выполнить("РазделительУстановлен = ОбщегоНазначения.ИспользованиеРазделителяСеанса();");
		КонецЕсли;
	КонецЕсли;
	
	Если Не РазделениеВключено Или (РазделениеВключено И РазделительУстановлен) Тогда
		ВыполнитьКопированиеДанныхОбласти(ВидыДокументовДляОбработки, НачалоЭталонногоПериода, ОкончаниеЭталонногоПериода, НачалоЦелевогоПериода, ОкончаниеЦелевогоПериода, ПроводитьСкопированныеДокументы, СкопированоДокументовВсего, ВыполнениеВФоновомЗадании);
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОбластиДанных.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных
		               |ИЗ
		               |	РегистрСведений.ОбластиДанных КАК ОбластиДанных
		               |ГДЕ
		               |	ОбластиДанных.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбластейДанных.Используется)";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		КоличествоОбластей = Выборка.Количество();
		ОбработаноОбластей = 0;
		Пока Выборка.Следующий() Цикл
			ВойтиВОбластьДанныхНаСервере(Выборка.ОбластьДанных);
			ВыполнитьКопированиеДанныхОбласти(ВидыДокументовДляОбработки, НачалоЭталонногоПериода, ОкончаниеЭталонногоПериода, НачалоЦелевогоПериода, ОкончаниеЦелевогоПериода, ПроводитьСкопированныеДокументы, СкопированоДокументовВсего, ВыполнениеВФоновомЗадании);
			ВыйтиИзОбластиДанныхНаСервере();
			
			ОбработаноОбластей = ОбработаноОбластей + 1;
			ПроцентОбработкиОбластей = Окр(100 * ОбработаноОбластей / КоличествоОбластей, 2);
			Сообщить("ПроцентОбработкиОбластей:" + ПроцентОбработкиОбластей);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВыполнениеВФоновомЗадании Тогда
		Сообщить("СкопированоДокументовВсего:" + Формат(СкопированоДокументовВсего, "ЧГ=0"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Предназначена для автоматического заполнения списка копируемых документов
Процедура ИнициализироватьСписокВидовДокументовДляОбработки(ВидыДокументовДляОбработки) Экспорт
	
	Если ВидыДокументовДляОбработки = Неопределено Тогда
		ВидыДокументовДляОбработки = Новый ТаблицаЗначений;
		ВидыДокументовДляОбработки.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(150)));
		ВидыДокументовДляОбработки.Колонки.Добавить("РеквизитДокументОснование", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(150)));
	КонецЕсли;
	
	ЕстьПодсистемаТестЦентр = (Метаданные.Подсистемы.Найти("ТестЦентр") <> Неопределено);
	ВключенВПодсистему = Ложь;
	
	Для Каждого ВидДокумента Из Метаданные.Документы Цикл
		
		ВключатьВСписокОбработки = Ложь;
		Если Лев(ВидДокумента.Имя, 7) <> "Удалить" Тогда
			Если ЕстьПодсистемаТестЦентр Тогда
				ВключенВПодсистему = Метаданные.Подсистемы.Найти("ТестЦентр").Состав.Содержит(ВидДокумента);
			КонецЕсли;
			ВключатьВСписокОбработки = Не (ЕстьПодсистемаТестЦентр И ВключенВПодсистему);
		КонецЕсли;
		
		Если ВключатьВСписокОбработки Тогда
			НоваяСтрока = ВидыДокументовДляОбработки.Добавить();
			НоваяСтрока.ВидДокумента = ВидДокумента.Имя;
		КонецЕсли;
		
	КонецЦикла;
	
	ПередНачаломОбработки(ВидыДокументовДляОбработки);
	
КонецПроцедуры // ИнициализироватьСписокТиповДокументовДляОбработки

// Функция проверяет, встроена ли в конфигурацию запрошенная подсистема БСП
//
// Параметры:
//  ИмяПодсистемы - Строка, имя проверяемой подсистемы
//
// Взвращаемое значение:
//  Истина - Подсистема используется
//  Ложь - Подсистема не используется
//
Функция БСППодсистемаИспользуется(ИмяПодсистемы) Экспорт
	
	Результат = Истина;
	
	РодительскаяПодсистема = Метаданные.Подсистемы.Найти("СтандартныеПодсистемы");
	Если РодительскаяПодсистема = Неопределено Тогда
		Результат = Ложь;
	Иначе
		Если РодительскаяПодсистема.Подсистемы.Найти(ИмяПодсистемы) = Неопределено Тогда
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура устанавливает значение разделителей для текущего сеанса
//
// Параметры:
//   ОбластьДанных - Число - Номер области данных
Процедура ВойтиВОбластьДанныхНаСервере(Знач ОбластьДанных)
	
	УстановитьПривилегированныйРежим(Истина);
	Выполнить("ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, ОбластьДанных);");
	
КонецПроцедуры

// Процедура сбрасывает признак использования разделителей для текущего сеанса
//
Процедура ВыйтиИзОбластиДанныхНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	Выполнить("ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);");
	
КонецПроцедуры

// Предназначена для выполнения копирования данных в пределах одной области данных
//
Процедура ВыполнитьКопированиеДанныхОбласти(ВидыДокументовДляОбработки, НачалоЭталонногоПериода, ОкончаниеЭталонногоПериода, НачалоЦелевогоПериода, ОкончаниеЦелевогоПериода, ПроводитьСкопированныеДокументы, СкопированоДокументовВсего, ВыполнениеВФоновомЗадании)
	
	НачатьТранзакцию();
	
	СмещениеПериода = (НачалоЦелевогоПериода - НачалоЭталонногоПериода);
	Коэффициент = (ОкончаниеЦелевогоПериода - НачалоЦелевогоПериода) / (ОкончаниеЭталонногоПериода - НачалоЭталонногоПериода);
	КопииДокументов = Новый ТаблицаЗначений;
	ТипВсеДокументы = Новый Массив;
	Для Каждого ВидДокумента Из Метаданные.Документы Цикл
		ТипВсеДокументы.Добавить(Тип("ДокументСсылка." + ВидДокумента.Имя));
	КонецЦикла;
	КопииДокументов.Колонки.Добавить("ИсходныйДокумент", Новый ОписаниеТипов(ТипВсеДокументы));
	КопииДокументов.Колонки.Добавить("КопияДокумента", Новый ОписаниеТипов(ТипВсеДокументы));
	КопииДокументов.Колонки.Добавить("ДатаКопииДокумента", Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	КопииДокументов.Индексы.Добавить("ИсходныйДокумент");
	
	ЗаблокироватьПространстваДокументов(ВидыДокументовДляОбработки);
	
	ПроцентВыполнения = 0;
	Если ВыполнениеВФоновомЗадании Тогда
		Сообщить("ПроцентВыполненияКопирования:" + ПроцентВыполнения);
	КонецЕсли;
	
	СкопироватьДокументыБезРеквизитаОснование(ВидыДокументовДляОбработки, НачалоЭталонногоПериода, ОкончаниеЭталонногоПериода, СмещениеПериода, Коэффициент, КопииДокументов, СкопированоДокументовВсего, ПроцентВыполнения, ВыполнениеВФоновомЗадании);
	
	ПроцентВыполнения = 25;
	Если ВыполнениеВФоновомЗадании Тогда
		Сообщить("ПроцентВыполненияКопирования:" + ПроцентВыполнения);
	КонецЕсли;
	
	ЕстьПропущенныеДокументы = Истина;
	Пока ЕстьПропущенныеДокументы Цикл
		ПропущенныеДокументы = "";
		ЕстьСкопированныеДокументы = СкопироватьДокументыСОснованиемВШапке(ВидыДокументовДляОбработки, НачалоЭталонногоПериода, ОкончаниеЭталонногоПериода, СмещениеПериода, Коэффициент, КопииДокументов, ПропущенныеДокументы, СкопированоДокументовВсего, ПроцентВыполнения, ВыполнениеВФоновомЗадании);
		
		ЕстьСкопированныеДокументы = 
			СкопироватьДокументыСОснованиемВТабЧасти(ВидыДокументовДляОбработки, НачалоЭталонногоПериода, ОкончаниеЭталонногоПериода, СмещениеПериода, Коэффициент, КопииДокументов, ПропущенныеДокументы, СкопированоДокументовВсего, ПроцентВыполнения, ВыполнениеВФоновомЗадании)
			Или ЕстьСкопированныеДокументы;
		ЕстьПропущенныеДокументы = Не ПустаяСтрока(ПропущенныеДокументы);
		
		Если ЕстьПропущенныеДокументы И
			НЕ ЕстьСкопированныеДокументы Тогда
			
			ОтменитьТранзакцию();
			ОписаниеОшибки = "Ошибка копирования документов:" + ПропущенныеДокументы;
			ЗаписьЖурналаРегистрации("Копирование документов", УровеньЖурналаРегистрации.Ошибка,, ОписаниеОшибки, "Не удалось скопировать документы");
			
			ВызватьИсключение "Не удалось скопировать документы, т.к. не были скопированы документы-основания.
					|Возможные причины:
					| * Не все типы документов-оснований включены в процесс копирования
					| * Ошибки при записи документов-оснований
					| * Зацикливание ссылок
					|Дополнительную информацию см. в журнале регистрации.";
		КонецЕсли;
		
	КонецЦикла;
	
	ПроцентВыполнения = 75;
	Если ВыполнениеВФоновомЗадании Тогда
		Сообщить("ПроцентВыполненияКопирования:" + ПроцентВыполнения);
	КонецЕсли;
	
	Если ПроводитьСкопированныеДокументы Тогда
		
		КопииДокументов.Сортировать("ДатаКопииДокумента Возр");
		ПроведеноДокументов = 0;
		Для Каждого СтрокаДокумента Из КопииДокументов Цикл
			ДокОбъект = СтрокаДокумента.КопияДокумента.ПолучитьОбъект();
			Отказ = Ложь;
			ПередПроведением(ДокОбъект, Отказ);
			Если Не Отказ Тогда
				Попытка
					ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
					ПроведеноДокументов = ПроведеноДокументов + 1;
					
					Если ВыполнениеВФоновомЗадании Тогда
						ПроцентВыполнения = 75 + (25 * ПроведеноДокументов / КопииДокументов.Количество());
						Сообщить("ПроцентВыполненияКопирования:" + ПроцентВыполнения);
					КонецЕсли;
				Исключение
					ОтменитьТранзакцию();
					ЗаписьЖурналаРегистрации("Копирование документов", УровеньЖурналаРегистрации.Ошибка,,
						СтрокаДокумента.ИсходныйДокумент, ОписаниеОшибки());
					ВызватьИсключение "Не удалось провести документы.
									  |Дополнительную информацию см. в журнале регистрации.";
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ПроцентВыполнения = 100;
	Если ВыполнениеВФоновомЗадании Тогда
		Сообщить("ПроцентВыполненияКопирования:" + ПроцентВыполнения);
	КонецЕсли;
	
	Отказ = Ложь;
	ПослеОкончанияОбработки(Отказ);
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Копирование отменено";
		Сообщение.Сообщить();
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Копирование успешно завершено";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для установки управляемой блокировки по пространствам всех
// копируемых документов (эквивалент экскалации), с целью уменьшения расхода
// ресурсов на обслуживание транзакции в процессе копирования
//
Процедура ЗаблокироватьПространстваДокументов(ВидыДокументовДляОбработки)
	
	БлокировкаДанных = Новый БлокировкаДанных;
	
	Для Каждого СтрокаВидаДокумента Из ВидыДокументовДляОбработки Цикл
		ВидДокумента = СтрокаВидаДокумента.ВидДокумента;
		БлокировкаДанных.Добавить("Документ." + ВидДокумента);
	КонецЦикла;
	
	БлокировкаДанных.Заблокировать();
	
КонецПроцедуры

// Предназначена для копирования всех документов, для которых в настройках
// обработки не задан реквизит-основание. Выполняется в первую очередь.
//
Процедура СкопироватьДокументыБезРеквизитаОснование(ВидыДокументовДляОбработки,
		НачалоЭталонногоПериода, ОкончаниеЭталонногоПериода, СмещениеПериода, Коэффициент,
		КопииДокументов, СкопированоДокументовВсего, ПроцентВыполнения, ВыполнениеВФоновомЗадании)
	
	НачалоЦелевогоПериода = НачалоЭталонногоПериода + СмещениеПериода;
	
	/////////////////////////////////////////////////////////////
	ШаблонЗапросаНезависимыеДокументы = 
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Дата
	|ИЗ
	|	#ВидДокумента КАК Документ
	|ГДЕ
	|	Документ.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ Документ.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	
	// Подготовить список документов без документов-оснований
	ЗапросВидыДокументов = Новый Запрос;
	ЗапросВидыДокументов.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ВидыДокументов.ВидДокумента КАК СТРОКА) КАК ВидДокумента,
	|	ВидыДокументов.РеквизитДокументОснование
	|ПОМЕСТИТЬ ВидыДокументов
	|ИЗ
	|	&ВидыДокументов КАК ВидыДокументов
	|ГДЕ
	|	ВидыДокументов.РеквизитДокументОснование = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыДокументов.ВидДокумента,
	|	ВидыДокументов.РеквизитДокументОснование
	|ИЗ
	|	ВидыДокументов КАК ВидыДокументов";
	ЗапросВидыДокументов.УстановитьПараметр("ВидыДокументов", ВидыДокументовДляОбработки);
	
	// Выполнить копирование документов без документов-оснований
	ВыборкаВидыДокументов = ЗапросВидыДокументов.Выполнить().Выбрать();
	КоличествоВидовДокументов = ВыборкаВидыДокументов .Количество();
	СкопированоВидовДокументов = 0;
	Пока ВыборкаВидыДокументов.Следующий() Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрЗаменить(ШаблонЗапросаНезависимыеДокументы, "#ВидДокумента", "Документ." + ВыборкаВидыДокументов.ВидДокумента);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоЭталонногоПериода);
		Запрос.УстановитьПараметр("КонецПериода", ОкончаниеЭталонногоПериода);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Отказ = Ложь;
			ПередКопированием(Выборка.Ссылка, Отказ);
			Если Не Отказ Тогда
				КопияДокумента = Выборка.Ссылка.Скопировать();
				НоваяДата = НачалоЦелевогоПериода + ((Выборка.Дата + СмещениеПериода) - НачалоЦелевогоПериода) * Коэффициент;
				КопияДокумента.Дата = НоваяДата;
				
				РежимЗаписи = РежимЗаписиДокумента.Запись;
				ПослеКопирования(Выборка.Ссылка, КопияДокумента, РежимЗаписи);
				Попытка
					КопияДокумента.Записать(РежимЗаписи);
					СкопированоДокументовВсего = СкопированоДокументовВсего + 1;
					
					ИнформацияОКопиях = КопииДокументов.Добавить();
					ИнформацияОКопиях.ИсходныйДокумент = Выборка.Ссылка;
					ИнформацияОКопиях.КопияДокумента = КопияДокумента.Ссылка;
					ИнформацияОКопиях.ДатаКопииДокумента = КопияДокумента.Дата;
				Исключение
					ОтменитьТранзакцию();
					ЗаписьЖурналаРегистрации("Копирование документов", УровеньЖурналаРегистрации.Ошибка,,
						Выборка.Ссылка, ОписаниеОшибки());
					ВызватьИсключение "Не удалось провести документы.
									  |Дополнительную информацию см. в журнале регистрации.";
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
		СкопированоВидовДокументов = СкопированоВидовДокументов + 1;
		ПроцентВыполнения = Окр(25 * СкопированоВидовДокументов / КоличествоВидовДокументов);
		Если ВыполнениеВФоновомЗадании Тогда
			Сообщить("ПроцентВыполненияКопирования:" + ПроцентВыполнения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Предназначена для копирования всех документов, для которых в настройках
// обработки задан реквизит-основание, относящийся к шапке документа. Выполняется во вторую очередь.
//
Функция СкопироватьДокументыСОснованиемВШапке(ВидыДокументовДляОбработки,
		НачалоЭталонногоПериода, ОкончаниеЭталонногоПериода, СмещениеПериода, Коэффициент,
		КопииДокументов, ОписаниеПропущенныхДокументов, СкопированоДокументовВсего, ПроцентВыполнения, ВыполнениеВФоновомЗадании)
	
	НачалоЦелевогоПериода = НачалоЭталонногоПериода + СмещениеПериода;
	
	/////////////////////////////////////////////////////////////
	ШаблонЗапросаПодчиненныеДокументы = 
	"ВЫБРАТЬ
	|	ИнформацияОКопиях.ИсходныйДокумент КАК ИсходныйДокумент,
	|	ИнформацияОКопиях.КопияДокумента КАК КопияДокумента
	|ПОМЕСТИТЬ ИнформацияОКопиях
	|ИЗ
	|	&ИнформацияОКопиях КАК ИнформацияОКопиях
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИсходныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Дата,
	|	Документ.РеквизитДокументОснование КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА НЕ ИнформацияОКопияхДокОснование.ИсходныйДокумент ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СуществуетКопияДокОснования,
	|	ИнформацияОКопияхДокОснование.КопияДокумента КАК КопияДокОснования
	|ИЗ
	|	#ВидДокумента КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИнформацияОКопиях КАК ИнформацияОКопияхДокОснование
	|		ПО Документ.РеквизитДокументОснование = ИнформацияОКопияхДокОснование.ИсходныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИнформацияОКопиях КАК ИнформацияОКопияхКопируемыйДокумент
	|		ПО Документ.Ссылка = ИнформацияОКопияхКопируемыйДокумент.ИсходныйДокумент
	|ГДЕ
	|	Документ.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ Документ.ПометкаУдаления
	|	И ИнформацияОКопияхКопируемыйДокумент.ИсходныйДокумент ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	// Подготовить список документов с документами-основаниями в шапке документа
	ЗапросВидыДокументов = Новый Запрос;
	ЗапросВидыДокументов.Текст = 
	"ВЫБРАТЬ
	|	ВидыДокументов.ВидДокумента,
	|	ВидыДокументов.РеквизитДокументОснование
	|ПОМЕСТИТЬ ВидыДокументов
	|ИЗ
	|	&ВидыДокументов КАК ВидыДокументов
	|ГДЕ
	|	ВидыДокументов.РеквизитДокументОснование <> """"
	|	И НЕ ВидыДокументов.РеквизитДокументОснование ПОДОБНО ""%.%""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыДокументов.ВидДокумента,
	|	ВидыДокументов.РеквизитДокументОснование
	|ИЗ
	|	ВидыДокументов КАК ВидыДокументов";
	ЗапросВидыДокументов.УстановитьПараметр("ВидыДокументов", ВидыДокументовДляОбработки);
	
	// Выполнить итеративно копирование документов с документами-основаниями
	СкопированоДокументов = 0;
	ПропущеноДокументов = 0;
	КоличествоДокументовВВыборке = 0;
	СкопированоДокументовТекущегоВида = 0;
	ПерваяИтерация = Истина;
	ПропущенныеДокументы = Новый Массив;
	
	Результат = Истина;
	Пока ПерваяИтерация Или ПропущенныеДокументы.Количество() > 0 Цикл
		ПропущенныеДокументы.Очистить();
		
		ВыборкаВидыДокументов = ЗапросВидыДокументов.Выполнить().Выбрать();
		КоличествоВидовДокументов = ВыборкаВидыДокументов.Количество();
		Пока ВыборкаВидыДокументов.Следующий() Цикл
			
			Запрос = Новый Запрос;
			ТекстЗапроса = СтрЗаменить(ШаблонЗапросаПодчиненныеДокументы, "#ВидДокумента", "Документ." + ВыборкаВидыДокументов.ВидДокумента);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.РеквизитДокументОснование", "Документ." + ВыборкаВидыДокументов.РеквизитДокументОснование);
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("НачалоПериода", НачалоЭталонногоПериода);
			Запрос.УстановитьПараметр("КонецПериода", ОкончаниеЭталонногоПериода);
			Запрос.УстановитьПараметр("ИнформацияОКопиях", КопииДокументов);
			
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			КоличествоДокументовВВыборке = Выборка.Количество();
			СкопированоДокументовТекущегоВида = 0;
			Пока Выборка.Следующий() Цикл
				Копировать = Ложь;
				ЗаполнятьОснование = Ложь;
				Если Не ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
					Копировать = Истина;
				ИначеЕсли Выборка.СуществуетКопияДокОснования Тогда
					Копировать = Истина;
					ЗаполнятьОснование = Истина;
				Иначе
					ПропущенныеДокументы.Добавить(Выборка.Ссылка);
				КонецЕсли;
				
				Если Копировать Тогда
					
					Отказ = Ложь;
					ПередКопированием(Выборка.Ссылка, Отказ);
					Если Не Отказ Тогда
						КопияДокумента = Выборка.Ссылка.Скопировать();
						НоваяДата = НачалоЦелевогоПериода + ((Выборка.Дата + СмещениеПериода) - НачалоЦелевогоПериода) * Коэффициент;
						КопияДокумента.Дата = НоваяДата;
						
						Если ЗаполнятьОснование Тогда
							//СтрКопияОснования = КопииДокументов.Найти(Выборка.ДокументОснование, "ИсходныйДокумент");
							//ДокументОснование = СтрКопияОснования.КопияДокумента;
							КопияДокумента[ВыборкаВидыДокументов.РеквизитДокументОснование] = Выборка.КопияДокОснования; //ДокументОснование;
						КонецЕсли;
						
						РежимЗаписи = РежимЗаписиДокумента.Запись;
						ПослеКопирования(Выборка.Ссылка, КопияДокумента, РежимЗаписи);
						Попытка
							КопияДокумента.Записать(РежимЗаписи);
							СкопированоДокументовТекущегоВида = СкопированоДокументовТекущегоВида + 1;
							СкопированоДокументовВсего = СкопированоДокументовВсего + 1;
							
							ИнформацияОКопиях = КопииДокументов.Добавить();
							ИнформацияОКопиях.ИсходныйДокумент = Выборка.Ссылка;
							ИнформацияОКопиях.КопияДокумента = КопияДокумента.Ссылка;
							ИнформацияОКопиях.ДатаКопииДокумента = КопияДокумента.Дата;
							СкопированоДокументов = СкопированоДокументов + 1;
						Исключение
							ОтменитьТранзакцию();
							ЗаписьЖурналаРегистрации("Копирование документов", УровеньЖурналаРегистрации.Ошибка,,
								Выборка.Ссылка, ОписаниеОшибки());
							ВызватьИсключение "Не удалось провести документы.
											  |Дополнительную информацию см. в журнале регистрации.";
						КонецПопытки;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			Если КоличествоВидовДокументов > 0 Тогда
				Если КоличествоДокументовВВыборке > 0 Тогда
					ВесСкопированныхДокументов = СкопированоДокументовТекущегоВида / КоличествоДокументовВВыборке;
				Иначе
					ВесСкопированныхДокументов = 0;
				КонецЕсли;
				ПроцентВыполнения = ПроцентВыполнения + (25 * ВесСкопированныхДокументов / КоличествоВидовДокументов);
				Если ВыполнениеВФоновомЗадании Тогда
					Сообщить("ПроцентВыполненияКопирования:" + ПроцентВыполнения);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПропущенныеДокументы.Количество() > 0 И СкопированоДокументов = 0 Тогда
			Результат = Ложь;
			
			Для Каждого ТекДок Из ПропущенныеДокументы Цикл
				ОписаниеПропущенныхДокументов = ОписаниеПропущенныхДокументов + Символы.ПС
				+ Строка(ТекДок);
			КонецЦикла;
			
			Прервать;
		КонецЕсли;
		
		ПерваяИтерация = Ложь;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Предназначена для копирования всех документов, для которых в настройках
// обработки задан реквизит-основание, относящийся к табличной части документа. Выполняется в третью очередь.
//
Функция СкопироватьДокументыСОснованиемВТабЧасти(ВидыДокументовДляОбработки,
		НачалоЭталонногоПериода, ОкончаниеЭталонногоПериода, СмещениеПериода, Коэффициент,
		КопииДокументов, ОписаниеПропущенныхДокументов, СкопированоДокументовВсего, ПроцентВыполнения, ВыполнениеВФоновомЗадании)
	
	НачалоЦелевогоПериода = НачалоЭталонногоПериода + СмещениеПериода;
	
	/////////////////////////////////////////////////////////////
	ШаблонЗапросаПодчиненныеДокументыВТабличнойЧасти = 
	"ВЫБРАТЬ
	|	ИнформацияОКопиях.ИсходныйДокумент КАК ИсходныйДокумент,
	|	ИнформацияОКопиях.КопияДокумента КАК КопияДокумента
	|ПОМЕСТИТЬ ИнформацияОКопиях
	|ИЗ
	|	&ИнформацияОКопиях КАК ИнформацияОКопиях
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИсходныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументТЧ.Ссылка КАК Ссылка,
	|	ДокументТЧ.Ссылка.Дата КАК Дата,
	|	ДокументТЧ.РеквизитДокументОснование КАК ДокументОснование,
	|	ДокументТЧ.НомерСтроки,
	|	ВЫБОР
	|		КОГДА НЕ ИнформацияОКопияхДокОснование.ИсходныйДокумент ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СуществуетКопияДокОснования,
	|	ИнформацияОКопияхДокОснование.КопияДокумента КАК КопияДокОснования
	|ИЗ
	|	#ВидДокументаТЧ КАК ДокументТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИнформацияОКопиях КАК ИнформацияОКопияхДокОснование
	|		ПО ДокументТЧ.РеквизитДокументОснование = ИнформацияОКопияхДокОснование.ИсходныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИнформацияОКопиях КАК ИнформацияОКопияхКопируемыйДокумент
	|		ПО ДокументТЧ.Ссылка = ИнформацияОКопияхКопируемыйДокумент.ИсходныйДокумент
	|ГДЕ
	|	ДокументТЧ.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ ДокументТЧ.Ссылка.ПометкаУдаления
	|	И ИнформацияОКопияхКопируемыйДокумент.ИсходныйДокумент ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|ИТОГИ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	
	// Подготовить список документов с документами-основаниями в шапке документа
	ЗапросВидыДокументов = Новый Запрос;
	ЗапросВидыДокументов.Текст = 
	"ВЫБРАТЬ
	|	ВидыДокументов.ВидДокумента,
	|	ВидыДокументов.РеквизитДокументОснование
	|ПОМЕСТИТЬ ВидыДокументов
	|ИЗ
	|	&ВидыДокументов КАК ВидыДокументов
	|ГДЕ
	|	ВидыДокументов.РеквизитДокументОснование <> """"
	|	И ВидыДокументов.РеквизитДокументОснование ПОДОБНО ""%.%""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыДокументов.ВидДокумента,
	|	ВидыДокументов.РеквизитДокументОснование
	|ИЗ
	|	ВидыДокументов КАК ВидыДокументов";
	ЗапросВидыДокументов.УстановитьПараметр("ВидыДокументов", ВидыДокументовДляОбработки);
	
	// Выполнить итеративно копирование документов с документами-основаниями
	СкопированоДокументов = 0;
	ПропущеноДокументов = 0;
	КоличествоДокументовВВыборке = 0;
	СкопированоДокументовТекущегоВида = 0;
	ПерваяИтерация = Истина;
	ПропущенныеДокументы = Новый Массив;
	
	Результат = Истина;
	Пока ПерваяИтерация Или ПропущенныеДокументы.Количество() > 0 Цикл
		ПропущенныеДокументы.Очистить();
		
		ВыборкаВидыДокументов = ЗапросВидыДокументов.Выполнить().Выбрать();
		КоличествоВидовДокументов = ВыборкаВидыДокументов.Количество();
		Пока ВыборкаВидыДокументов.Следующий() Цикл
			
			Запрос = Новый Запрос;
			ЭлементыРеквизитаДокОсн = РазделитьСтроку(ВыборкаВидыДокументов.РеквизитДокументОснование, ".");
			ТекстЗапроса = СтрЗаменить(ШаблонЗапросаПодчиненныеДокументыВТабличнойЧасти, "#ВидДокументаТЧ", "Документ." + ВыборкаВидыДокументов.ВидДокумента + "." + ЭлементыРеквизитаДокОсн[0]);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДокументТЧ.РеквизитДокументОснование", "ДокументТЧ." + ЭлементыРеквизитаДокОсн[1]);
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("НачалоПериода", НачалоЭталонногоПериода);
			Запрос.УстановитьПараметр("КонецПериода", ОкончаниеЭталонногоПериода);
			Запрос.УстановитьПараметр("ИнформацияОКопиях", КопииДокументов);
			
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДокументы = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			КоличествоДокументовВВыборке = ВыборкаДокументы.Количество();
			СкопированоДокументовТекущегоВида = 0;
			Пока ВыборкаДокументы.Следующий() Цикл
				Копировать = Ложь;
				ЗаполнятьОснование = Ложь;
				
				ЕстьДокументыОснования = Ложь;
				СуществуютКопииДокОснований = Истина;
				ВыборкаДокументыОснования = ВыборкаДокументы.Выбрать();
				Пока ВыборкаДокументыОснования.Следующий() Цикл
					Если ЗначениеЗаполнено(ВыборкаДокументыОснования.ДокументОснование) Тогда
						ЕстьДокументыОснования = Истина;
						Если Не ВыборкаДокументыОснования.СуществуетКопияДокОснования Тогда
							СуществуютКопииДокОснований = Ложь;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если Не ЕстьДокументыОснования Тогда
					Копировать = Истина;
				ИначеЕсли СуществуютКопииДокОснований Тогда
					Копировать = Истина;
					ЗаполнятьОснование = Истина;
				Иначе
					ПропущенныеДокументы.Добавить(ВыборкаДокументы.Ссылка);
				КонецЕсли;
				
				Если Копировать Тогда
					
					Отказ = Ложь;
					ПередКопированием(ВыборкаДокументы.Ссылка, Отказ);
					Если Не Отказ Тогда
						КопияДокумента = ВыборкаДокументы.Ссылка.Скопировать();
						НоваяДата = НачалоЦелевогоПериода + ((ВыборкаДокументы.Дата + СмещениеПериода) - НачалоЦелевогоПериода) * Коэффициент;
						КопияДокумента.Дата = НоваяДата;
						
						Если ЗаполнятьОснование Тогда
							ВыборкаДокументыОснования.Сбросить();
							Пока ВыборкаДокументыОснования.Следующий() Цикл
								КопияДокумента[ЭлементыРеквизитаДокОсн[0]][ВыборкаДокументыОснования.НомерСтроки-1][ЭлементыРеквизитаДокОсн[1]] = ВыборкаДокументыОснования.КопияДокОснования;
							КонецЦикла;
						КонецЕсли;
						
						РежимЗаписи = РежимЗаписиДокумента.Запись;
						ПослеКопирования(ВыборкаДокументы.Ссылка, КопияДокумента, РежимЗаписи);
						Попытка
							КопияДокумента.Записать(РежимЗаписи);
							СкопированоДокументовТекущегоВида = СкопированоДокументовТекущегоВида + 1;
							СкопированоДокументовВсего = СкопированоДокументовВсего + 1;
							
							ИнформацияОКопиях = КопииДокументов.Добавить();
							ИнформацияОКопиях.ИсходныйДокумент = ВыборкаДокументы.Ссылка;
							ИнформацияОКопиях.КопияДокумента = КопияДокумента.Ссылка;
							ИнформацияОКопиях.ДатаКопииДокумента = КопияДокумента.Дата;
							СкопированоДокументов = СкопированоДокументов + 1;
						Исключение
							ОтменитьТранзакцию();
							ЗаписьЖурналаРегистрации("Копирование документов", УровеньЖурналаРегистрации.Ошибка,,
								ВыборкаДокументы.Ссылка, ОписаниеОшибки());
							ВызватьИсключение "Не удалось провести документы.
											  |Дополнительную информацию см. в журнале регистрации.";
						КонецПопытки;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Если КоличествоВидовДокументов > 0 Тогда
			Если КоличествоДокументовВВыборке > 0 Тогда
				ВесСкопированныхДокументов = СкопированоДокументовТекущегоВида / КоличествоДокументовВВыборке;
			Иначе
				ВесСкопированныхДокументов = 0;
			КонецЕсли;
			ПроцентВыполнения = ПроцентВыполнения + (25 * ВесСкопированныхДокументов / КоличествоВидовДокументов);
			Если ВыполнениеВФоновомЗадании Тогда
				Сообщить("ПроцентВыполненияКопирования:" + ПроцентВыполнения);
			КонецЕсли;
		КонецЕсли;
		
		Если ПропущенныеДокументы.Количество() > 0 И СкопированоДокументов = 0 Тогда
			Результат = Ложь;
			
			Для Каждого ТекДок Из ПропущенныеДокументы Цикл
				ОписаниеПропущенныхДокументов = ОписаниеПропущенныхДокументов + Символы.ПС
				+ Строка(ТекДок);
			КонецЦикла;
			
			Прервать;
		КонецЕсли;
		
		ПерваяИтерация = Ложь;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Разделить строку на составляющие по разделителю и поместить
// части строки в массив
//
// Параметры:
//  РазделяемаяСтрока - Строка, которую нужно разделить
//  Разделитель - Строка, символ разделяющий части строки
//  ПустыеСтроки - Булево, Истина - включать пустые строки в результат,
//                 Ложь - не включать пустые строки в результат
//
// Возвращаемое значение:
//  Массив - части строк
//
Функция РазделитьСтроку(ИсходнаяСтрока, Разделитель, ПустыеСтроки = Ложь) Экспорт
	
	Результат = Новый Массив;
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
	ТекущаяСтрока = "";
	
	Для Сч = 1 По ДлинаСтроки Цикл
		
		ТекущийСимвол = Сред(ИсходнаяСтрока, Сч, 1);
		
		Если ТекущийСимвол = Разделитель Тогда
			
			ОбработаннаяСтрока = СокрЛП(ТекущаяСтрока);
			
			Если Не ПустаяСтрока(ОбработаннаяСтрока) Или ПустыеСтроки Тогда
				Результат.Добавить(ОбработаннаяСтрока);
			КонецЕсли;
			
			ТекущаяСтрока = "";
			
		Иначе
			ТекущаяСтрока = ТекущаяСтрока + ТекущийСимвол;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработаннаяСтрока = СокрЛП(ТекущаяСтрока);
	
	Если Не ПустаяСтрока(ОбработаннаяСтрока) Тогда
		Результат.Добавить(ОбработаннаяСтрока);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // РазделитьСтроку()


#КонецОбласти

#Область ЛокальныеПеременные

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РазделениеВключено = Ложь;
	Если БСППодсистемаИспользуется("РаботаВМоделиСервиса") Тогда
		РазделениеВключено = ИспользуетсяРазделениеДанных();
	КонецЕсли;
	
	Если РазделениеВключено Тогда
		Элементы.ЗначениеИндикатораОбластей.МаксимальноеЗначение = 100;
		Элементы.ЗначениеИндикатораОбластей.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Объект.РежимЗаполнения = "ПоПоследнемуМесяцу";
	Объект.ПроводитьСкопированныеДокументы = Истина;
	
	Если Не ПустаяСтрока(ПараметрЗапуска) Тогда
		ПараметрыЗапуска = РазделитьСтроку(ПараметрЗапуска, ";");
		Для Каждого Параметр Из ПараметрыЗапуска Цикл
			ЭлементыПараметра = РазделитьСтроку(Параметр, "=");
			Если ЭлементыПараметра.Количество() = 2 Тогда
				ИмяПараметра = ЭлементыПараметра[0];
				ЗначениеПараметра = ЭлементыПараметра[1];
				Попытка
					Объект[ИмяПараметра] = ЗначениеПараметра;
				Исключение
					ЗаписатьВЖурнал("Ошибка инициализации параметров обработки: " + ОписаниеОшибки(), "Копирование документов",, Истина);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		ИнтерактивныйРежим = Ложь;
		ЗаполнитьВидыДокументовНаСервере();
	Иначе
		ИнтерактивныйРежим = Истина;
		ИнициализироватьДатыОбработкиПоДаннымИБ();
		ЗаполнитьВидыДокументовНаСервере();
	КонецЕсли;
	
	Если Не ИнтерактивныйРежим Тогда
		
		Если ЗначениеЗаполнено(Объект.НомерОбласти) Тогда
			ВойтиВОбластьДанныхНаСервере(Объект.НомерОбласти);
		КонецЕсли;
		
		Если (Не РазделениеВключено Или ЗначениеЗаполнено(Объект.НомерОбласти))
				И (Не ЗначениеЗаполнено(Объект.НачалоЦелевогоПериода) Или Не ЗначениеЗаполнено(Объект.НачалоЭталонногоПериода)) Тогда
			ЗаполнитьНастройки(Неопределено);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.НачалоЦелевогоПериода)
			И ЗначениеЗаполнено(Объект.НачалоЭталонногоПериода) Тогда
				
			Если Не ЗначениеЗаполнено(Объект.ОкончаниеЦелевогоПериода) Тогда
				Объект.ОкончаниеЭталонногоПериода = КонецМесяца(Объект.НачалоЦелевогоПериода);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.ОкончаниеЭталонногоПериода) Тогда
				Объект.ОкончаниеЭталонногоПериода = КонецМесяца(Объект.НачалоЭталонногоПериода);
			КонецЕсли;
			
			СообщитьОНачалеКопирования();
			ВыполнитьКопированиеНаСервере(Объект.НачалоЭталонногоПериода, Объект.ОкончаниеЭталонногоПериода, Объект.НачалоЦелевогоПериода, Объект.ОкончаниеЦелевогоПериода);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ЗавершитьРаботуСистемы(Ложь);
		Иначе
			ПодключитьОбработчикОжидания("ПроверитьСостояниеЗаданияКопирования", 2, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоЦелевогоПериодаПриИзменении(Элемент)
	
	ЭталонныйИнтервал = Объект.ОкончаниеЭталонногоПериода - Объект.НачалоЭталонногоПериода;
	Объект.ОкончаниеЦелевогоПериода = Объект.НачалоЦелевогоПериода + ЭталонныйИнтервал;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьНастройки(Команда)
	
	Если РазделениеВключено Тогда
		ОсуществленВходВОбластьДанных = ОсуществленВходВОбластьДанных();
		Если ОсуществленВходВОбластьДанных Тогда
			ТекущаяОбластьДанных = ТекущаяОбластьДанных();
		Иначе
			ТекущаяОбластьДанных = Неопределено;
		КонецЕсли;
		
		Если ТекущаяОбластьДанных <> Объект.НомерОбласти Тогда
			Если НЕ УказаннаяОбластьДанныхЗаполнена(Объект.НомерОбласти) Тогда
				ПоказатьПредупреждение(, "Выбранная область данных не используется, заполнение невозможно.",, "Ошибка входа в область");
				Возврат;
			КонецЕсли;
			ВыйтиИзОбластиДанныхНаСервере();
			ВойтиВОбластьДанныхНаСервере(Объект.НомерОбласти);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьНастройкиНаСервере();
	
	Если РазделениеВключено Тогда
		Если ОсуществленВходВОбластьДанных() И ТекущаяОбластьДанных <> Объект.НомерОбласти Тогда
			Если ТекущаяОбластьДанных <> Неопределено Тогда
				ВыйтиИзОбластиДанныхНаСервере();
				ВойтиВОбластьДанныхНаСервере(ТекущаяОбластьДанных);
				
				ОбработкаЗавершения = Новый ОписаниеОповещения(
					"ПродолжениеВходаВОбластьДанныхПослеДействийПередНачаломРаботыСистемы", ЭтотОбъект);
				Выполнить("СтандартныеПодсистемыКлиент.ПередНачаломРаботыСистемы(ОбработкаЗавершения);");
			Иначе
				ВыйтиИзОбластиДанных();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидыДокументов(Команда)
	
	ЗаполнитьВидыДокументовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыДокументовНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТЗВидыДокументов = Объект.ВидыДокументов.Выгрузить();
	ТЗВидыДокументов.Очистить();
	ОбработкаОбъект.ИнициализироватьСписокВидовДокументовДляОбработки(ТЗВидыДокументов);
	ТЗВидыДокументов.ЗаполнитьЗначения(Истина, "Выбран");
	Объект.ВидыДокументов.Загрузить(ТЗВидыДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДокументовСнятьФлажки(Команда)
	
	Для Каждого ТекСтр Из Объект.ВидыДокументов Цикл
		ТекСтр.Выбран = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДокументовУстановитьФлажки(Команда)
	
	Для Каждого ТекСтр Из Объект.ВидыДокументов Цикл
		ТекСтр.Выбран = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКопирование(Команда)
	
	СообщитьОНачалеКопирования();
	
	КопироватьДоТекущегоМомента = Ложь;
	
	ВыполнитьКопированиеНаСервере(
		Объект.НачалоЭталонногоПериода, 
		Объект.ОкончаниеЭталонногоПериода, 
		Объект.НачалоЦелевогоПериода,
		Объект.ОкончаниеЦелевогоПериода);
		
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("ПроверитьСостояниеЗаданияКопирования", 2, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик нажатия на кнопку "Выполнить копирование до текущего момента".
// Запускает итеративный процесс копирования данных области по месяцам,
// начиная с периода, заданного в параметрах обработки, и заканчивая предыдущим месяцем.
//
&НаКлиенте
Процедура ВыполнитьКопированиеДоТекущегоМомента(Команда)
	
	Если Не РазделениеВключено Или ОсуществленВходВОбластьДанных() Тогда
		ЗаписатьВЖурнал("Начало процесса копирования", "Копирование документов",, Ложь);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Начало копирования: " + Строка(ТекущаяДата());
		Сообщение.Сообщить();
		
		КопироватьДоТекущегоМомента = Истина;
		Если РазделениеВключено Тогда
			Объект.НомерОбласти = ТекущаяОбластьДанных();
		КонецЕсли;
		ЗаполнитьНастройки(Неопределено);
		
		Пока Объект.НачалоЦелевогоПериода < ДобавитьМесяц(ТекущаяДата(), -1) Цикл
			ВыполнитьКопированиеНаСервере(
				Объект.НачалоЭталонногоПериода, 
				Объект.ОкончаниеЭталонногоПериода, 
				Объект.НачалоЦелевогоПериода,
				Объект.ОкончаниеЦелевогоПериода);
				
			Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
				ПодключитьОбработчикОжидания("ПроверитьСостояниеЗаданияКопирования", 2, Истина);
				Прервать;
			Иначе
				ЗаполнитьНастройки(Неопределено);
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ЗаписатьВЖурнал("Копирование завершено", "Копирование документов",, Ложь);
		КонецЕсли;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Необходимо выполнить вход в область данных!";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНачалеКопирования()
	
	ЗаписатьВЖурнал("Начало процесса копирования", "Копирование документов",, Ложь);
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Начало копирования: " + Строка(ТекущаяДата());
	Сообщение.Сообщить();
	ЗначениеИндикатораКопирования = 0;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработчик ожидания для проверки состояния фонового задания,
// выполняющего копирование
//
&НаКлиенте
Процедура ПроверитьСостояниеЗаданияКопирования()
	
	ЗавершеноУспешно = Неопределено;
	ЗаданиеЗавершено = ПроверитьСостояниеЗаданияКопированияНаСервере(ИдентификаторЗадания, ЗначениеИндикатораОбластей, ЗначениеИндикатораКопирования, ЗавершеноУспешно);
	Если ЗаданиеЗавершено Тогда
		ИдентификаторЗадания = Неопределено;
		КопированиеЗавершено = Ложь;
		
		Если Не КопироватьДоТекущегоМомента 
			Или Не ЗавершеноУспешно Тогда
			
			КопированиеЗавершено = Истина;
		Иначе
			ЗаполнитьНастройки(Неопределено);
			Если Объект.НачалоЦелевогоПериода < ДобавитьМесяц(ТекущаяДата(), -1) Тогда
				ВыполнитьКопированиеНаСервере(
					Объект.НачалоЭталонногоПериода, 
					Объект.ОкончаниеЭталонногоПериода, 
					Объект.НачалоЦелевогоПериода,
					Объект.ОкончаниеЦелевогоПериода);
				
				ПодключитьОбработчикОжидания("ПроверитьСостояниеЗаданияКопирования", 2, Истина);
			Иначе
				КопированиеЗавершено = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если КопированиеЗавершено Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Окончание копирования: " + Строка(ТекущаяДата());
			Сообщение.Сообщить();
			ЗначениеИндикатораКопирования = 100;
			ЗаписатьВЖурнал("Копирование завершено", "Копирование документов",, Ложь);
			
			Если Не ИнтерактивныйРежим Тогда
				ЗавершитьРаботуСистемы(Ложь);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПодключитьОбработчикОжидания("ПроверитьСостояниеЗаданияКопирования", 2, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Серверный обработчик для проверки состояния фонового задания, выполняющего
// копирование
//
&НаСервере
Функция ПроверитьСостояниеЗаданияКопированияНаСервере(ИдентификаторЗадания, ПроцентОбработкиОбластей, ПроцентВыполненияКопирования, ЗавершеноУспешно)
	
	ЗаданиеКопирования = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ЗаданиеКопирования.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		СообщенияПрогресса = ЗаданиеКопирования.ПолучитьСообщенияПользователю(Истина);
		
		Для Каждого Сообщение Из СообщенияПрогресса Цикл
			Если Найти(Сообщение.Текст, "ПроцентВыполненияКопирования:") > 0 Тогда
				Попытка
					ПроцентВыполненияКопирования = Число(СтрЗаменить(Сообщение.Текст, "ПроцентВыполненияКопирования:", ""));
				Исключение
				КонецПопытки;
			ИначеЕсли Найти(Сообщение.Текст, "ПроцентОбработкиОбластей:") > 0 Тогда
				Попытка
					ПроцентОбработкиОбластей = Число(СтрЗаменить(Сообщение.Текст, "ПроцентОбработкиОбластей:", ""));
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
		ЗаданиеЗавершено = Ложь;
	Иначе
		СообщенияПрогресса = ЗаданиеКопирования.ПолучитьСообщенияПользователю(Истина);
		Если СообщенияПрогресса <> Неопределено Тогда
			Для Каждого Сообщение Из СообщенияПрогресса Цикл
				Если Найти(Сообщение.Текст, "СкопированоДокументовВсего:") > 0 Тогда
					Попытка
						СкопированоДокументовВсего = Число(СтрЗаменить(Сообщение.Текст, "СкопированоДокументовВсего:", ""));
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТекстСообщенияПользователю = "";
		Если ЗаданиеКопирования.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
			ТекстСообщенияПользователю = "Копирование периода " + Строка(Объект.НачалоЭталонногоПериода) + " - " + Строка(Объект.ОкончаниеЭталонногоПериода) + " успешно завершено"
		ИначеЕсли ЗаданиеКопирования.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			ТекстСообщенияПользователю = "Фоновое задание копирования завершено аварийно:" + Символы.ПС +
				КраткоеПредставлениеОшибки(ЗаданиеКопирования.ИнформацияОбОшибке);
		ИначеЕсли ЗаданиеКопирования.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
			ТекстСообщенияПользователю = "Фоновое задание копирования отменено";
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщенияПользователю;
		Сообщение.Сообщить();
		
		ПроцентВыполненияКопирования = 100;
		ЗаданиеЗавершено = Истина;
		ЗавершеноУспешно = (ЗаданиеКопирования.Состояние = СостояниеФоновогоЗадания.Завершено);
	КонецЕсли;
	
	Возврат ЗаданиеЗавершено;
	
КонецФункции

// Серверный обработчик процедуры копирования
//
&НаСервере
Процедура ВыполнитьКопированиеНаСервере(НачалоЭталонногоПериода, ОкончаниеЭталонногоПериода, 
		НачалоЦелевогоПериода, ОкончаниеЦелевогоПериода)
		
	ИдентификаторЗадания = Неопределено;
	ВидыДокументовДляОбработки = Объект.ВидыДокументов.Выгрузить(Новый Структура("Выбран", Истина));
	Если ПодсистемаИспользуется("ТестЦентр") Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидыДокументовДляОбработки", ВидыДокументовДляОбработки);
		СтруктураПараметров.Вставить("НачалоЭталонногоПериода", Объект.НачалоЭталонногоПериода);
		СтруктураПараметров.Вставить("ОкончаниеЭталонногоПериода", Объект.ОкончаниеЭталонногоПериода);
		СтруктураПараметров.Вставить("НачалоЦелевогоПериода", Объект.НачалоЦелевогоПериода);
		СтруктураПараметров.Вставить("ОкончаниеЦелевогоПериода", Объект.ОкончаниеЦелевогоПериода);
		СтруктураПараметров.Вставить("ПроводитьСкопированныеДокументы", Объект.ПроводитьСкопированныеДокументы);
		
		ПараметрыФоновогоЗадания = Новый Массив;
		ПараметрыФоновогоЗадания.Добавить(СтруктураПараметров);
		ИсполняющееЗадание = 
			ФоновыеЗадания.Выполнить("ТЦСервер.ЗапуститьКопированиеДокументовВФоне", ПараметрыФоновогоЗадания);
		ИдентификаторЗадания = ИсполняющееЗадание.УникальныйИдентификатор;
	Иначе
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбработкаОбъект.ВыполнитьКопированиеПоВсемОбластям(
				ВидыДокументовДляОбработки,
				Объект.НачалоЭталонногоПериода, 
				Объект.ОкончаниеЭталонногоПериода, 
				Объект.НачалоЦелевогоПериода,
				Объект.ОкончаниеЦелевогоПериода,
				Объект.ПроводитьСкопированныеДокументы,
				Ложь);
	КонецЕсли;
		
КонецПроцедуры

// Предназначена для автоматического заполнения эталонного и целевого периодов
// по данным области
&НаСервере
Процедура ИнициализироватьДатыОбработкиПоДаннымИБ()
	
	РазделениеВключено = Ложь;
	РазделительУстановлен = Ложь;
	Если БСППодсистемаИспользуется("РаботаВМоделиСервиса") Тогда
		Выполнить("РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();");
		Если РазделениеВключено Тогда
			Выполнить("РазделительУстановлен = ОбщегоНазначения.ИспользованиеРазделителяСеанса();");
		КонецЕсли;
	КонецЕсли;
	
	Если Не РазделениеВключено Или (РазделениеВключено И РазделительУстановлен) Тогда
		// Находим дату первого и последнего документа. Учитываем числа до 15-го, чтобы исключить ввод начальных остатков.
		ШаблонФрагментаЗапроса = 
		"ВЫБРАТЬ
		|	МИНИМУМ(#ДокВидДокумента.Дата) КАК МинимальнаяДата,
		|	МАКСИМУМ(#ДокВидДокумента.Дата) КАК МаксимальнаяДата,
		|	МАКСИМУМ(""#ДокВидДокумента"") КАК ВидДокумента
		|ИЗ
		|	Документ.#ВидДокумента КАК #ДокВидДокумента
		|ГДЕ
		|	ДЕНЬ(#ДокВидДокумента.Дата) МЕЖДУ 1 И 15
		|	И #ДокВидДокумента.Проведен
		|
		|ИМЕЮЩИЕ НЕ МАКСИМУМ(""#ДокВидДокумента"") ЕСТЬ NULL";
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	МИНИМУМ(МинимальнаяДата) КАК МинимальнаяДата,
		|	МАКСИМУМ(МаксимальнаяДата) КАК МаксимальнаяДата
		|ИЗ
		|(";
		ОбработанПервыйДокумент = Ложь;
		Для Каждого СтрокаВидДокумента Из Объект.ВидыДокументов Цикл
			
			Если Не СтрокаВидДокумента.Выбран Тогда
				Продолжить;
				
			ИначеЕсли СтрокаВидДокумента.ВидДокумента = "ТЦТест"
				Или Лев(СтрокаВидДокумента.ВидДокумента, 7) = "Удалить" Тогда
				Продолжить;
				
			КонецЕсли;
			
			БлокЗапроса = СтрЗаменить(ШаблонФрагментаЗапроса, "#ВидДокумента", СтрокаВидДокумента.ВидДокумента);
			БлокЗапроса = СтрЗаменить(БлокЗапроса, "#ДокВидДокумента", "Док" + СтрокаВидДокумента.ВидДокумента);
			ТекстЗапроса = ТекстЗапроса 
			+ ?(Не ОбработанПервыйДокумент, "",
										"
										|ОБЪЕДИНИТЬ ВСЕ
										|")
			+ БлокЗапроса;
			ОбработанПервыйДокумент = Истина;
			
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + 
		") КАК ДатыДокументов";
		
		Если ОбработанПервыйДокумент Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			Если Объект.РежимЗаполнения = "ПоПервомуМесяцу" Тогда
				Объект.НачалоЭталонногоПериода = НачалоМесяца(Выборка.МинимальнаяДата);
			Иначе
				Объект.НачалоЭталонногоПериода = НачалоМесяца(Выборка.МаксимальнаяДата);
			КонецЕсли;
			Объект.ОкончаниеЭталонногоПериода = КонецМесяца(Объект.НачалоЭталонногоПериода);
			
			Объект.НачалоЦелевогоПериода = НачалоМесяца(ДобавитьМесяц(Выборка.МаксимальнаяДата, 1));
			Объект.ОкончаниеЦелевогоПериода = КонецМесяца(Объект.НачалоЦелевогоПериода);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, выполнена ли инициализация области данных
//
// Параметры:
//   ОбластьДанных - Число - Номер области данных
//
&НаСервереБезКонтекста
Функция УказаннаяОбластьДанныхЗаполнена(Знач ОбластьДанных)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбластиДанных.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.ОбластиДанных КАК ОбластиДанных
	|ГДЕ
	|	ОбластиДанных.ОбластьДанныхВспомогательныеДанные = &ОбластьДанных";
	Запрос.УстановитьПараметр("ОбластьДанных", ОбластьДанных);
	
	НачатьТранзакцию();
	Попытка
		//Блокировка.Заблокировать();
		Результат = Запрос.Выполнить();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Результат = Ложь;
		Выполнить("Результат = (Выборка.Статус = Перечисления.СтатусыОбластейДанных.Используется);");
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

// Проверяет, включено ли разделение данных в конфигурации
//
&НаСервереБезКонтекста
Функция ИспользуетсяРазделениеДанных()
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользованиеРазделенияДанных = Ложь;
	Выполнить("ИспользованиеРазделенияДанных = ОбщегоНазначенияПовтИсп.РазделениеВключено();");
	
	Возврат ИспользованиеРазделенияДанных;
	
КонецФункции

// Проверяет, выполнен ли вход в область данных
//
&НаСервереБезКонтекста
Функция ОсуществленВходВОбластьДанных()
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользованиеРазделителяСеанса = Ложь;
	Если БСППодсистемаИспользуется("РаботаВМоделиСервиса") Тогда
		Выполнить("ИспользованиеРазделителяСеанса = ОбщегоНазначения.ИспользованиеРазделителяСеанса();");
	КонецЕсли;
	
	Возврат ИспользованиеРазделителяСеанса;
	
КонецФункции

// Возвращает номер области данных, в которую в данный момент выполнен вход
//
&НаСервереБезКонтекста
Функция ТекущаяОбластьДанных()
	
	УстановитьПривилегированныйРежим(Истина);
	ЗначениеРазделителяСеанса = 0;
	Выполнить("ЗначениеРазделителяСеанса = ОбщегоНазначения.ЗначениеРазделителяСеанса();");
	
	Возврат ЗначениеРазделителяСеанса;
	
КонецФункции

// Выполняет заполнение настроек обработки, доступных на форме, по данным текущей области
//
&НаСервере
Процедура ЗаполнитьНастройкиНаСервере()
	
	ИнициализироватьДатыОбработкиПоДаннымИБ();
	
КонецПроцедуры

// Процедура сбрасывает признак использования разделителей для текущего сеанса
//
&НаКлиенте
Процедура ВыйтиИзОбластиДанных()
	
	Если ОсуществленВходВОбластьДанных() Тогда
		
		ОбработкаЗавершения = Новый ОписаниеОповещения(
			"ПродолжениеВыходаИзОбластиДанныхПослеДействийПередЗавершениемРаботыСистемы", ЭтотОбъект);
		
		ПараметрыПриложения.Вставить("СтандартныеПодсистемы.ПропуститьПредупреждениеПередЗавершениемРаботыСистемы", Истина);
		Выполнить("СтандартныеПодсистемыКлиент.ПередЗавершениемРаботыСистемы(, ОбработкаЗавершения);");
	КонецЕсли;
	
КонецПроцедуры

// Асинхронный обработчик для процедуры "ВыйтиИзОбластиДанных"
//
&НаКлиенте
Процедура ПродолжениеВыходаИзОбластиДанныхПослеДействийПередЗавершениемРаботыСистемы(Результат, Неопределен) Экспорт
	
	Если Результат.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыйтиИзОбластиДанныхНаСервере();
	ОбновитьИнтерфейс();
	Выполнить("СтандартныеПодсистемыКлиент.УстановитьРасширенныйЗаголовокПриложения(Истина);");
	
	Активизировать();
	
КонецПроцедуры

// Асинхронный обработчик для процедуры "ЗаполнитьНастройки"
//
&НаКлиенте
Процедура ПродолжениеВходаВОбластьДанныхПослеДействийПередНачаломРаботыСистемы(Результат, Неопределен) Экспорт
	
	Если Результат.Отказ Тогда
		ВыйтиИзОбластиДанныхНаСервере();
		ОбновитьИнтерфейс = Истина;
		Выполнить("СтандартныеПодсистемыКлиент.УстановитьРасширенныйЗаголовокПриложения(Истина);");
		ОбновитьИнтерфейсПриНеобходимости();
		Активизировать();
	Иначе
		ОбработкаЗавершения = Новый ОписаниеОповещения(
			"ПродолжениеВходаВОбластьДанныхПослеДействийПриНачалеРаботыСистемы", ЭтотОбъект);
		
		Выполнить("СтандартныеПодсистемыКлиент.ПриНачалеРаботыСистемы(ОбработкаЗавершения);");
	КонецЕсли;
	
КонецПроцедуры

// Асинхронный обработчик для процедуры "ПродолжениеВходаВОбластьДанныхПослеДействийПередНачаломРаботыСистемы"
&НаКлиенте
Процедура ПродолжениеВходаВОбластьДанныхПослеДействийПриНачалеРаботыСистемы(Результат, Неопределен) Экспорт
	
	Если Результат.Отказ Тогда
		ВыйтиИзОбластиДанныхНаСервере();
		ОбновитьИнтерфейс = Истина;
		Если БСППодсистемаИспользуется("РаботаВМоделиСервиса") Тогда
			Выполнить("СтандартныеПодсистемыКлиент.УстановитьРасширенныйЗаголовокПриложения(Истина);");
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьИнтерфейсПриНеобходимости();
	Активизировать();
	
КонецПроцедуры

// Обновить интерфейс после изменения значений разделителей
//
&НаКлиенте
Процедура ОбновитьИнтерфейсПриНеобходимости()
	
	Если ОбновитьИнтерфейс Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

// Разделить строку на составляющие по разделителю и поместить
// части строки в массив
//
// Параметры:
//  РазделяемаяСтрока - Строка, которую нужно разделить
//  Разделитель - Строка, символ разделяющий части строки
//  ПустыеСтроки - Булево, Истина - включать пустые строки в результат,
//                 Ложь - не включать пустые строки в результат
//
// Возвращаемое значение:
//  Массив - части строк
//
&НаСервереБезКонтекста
Функция РазделитьСтроку(ИсходнаяСтрока, Разделитель, ПустыеСтроки = Ложь) Экспорт
	
	Результат = Новый Массив;
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
	ТекущаяСтрока = "";
	
	Для Сч = 1 По ДлинаСтроки Цикл
		
		ТекущийСимвол = Сред(ИсходнаяСтрока, Сч, 1);
		
		Если ТекущийСимвол = Разделитель Тогда
			
			ОбработаннаяСтрока = СокрЛП(ТекущаяСтрока);
			
			Если Не ПустаяСтрока(ОбработаннаяСтрока) Или ПустыеСтроки Тогда
				Результат.Добавить(ОбработаннаяСтрока);
			КонецЕсли;
			
			ТекущаяСтрока = "";
			
		Иначе
			ТекущаяСтрока = ТекущаяСтрока + ТекущийСимвол;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработаннаяСтрока = СокрЛП(ТекущаяСтрока);
	
	Если Не ПустаяСтрока(ОбработаннаяСтрока) Тогда
		Результат.Добавить(ОбработаннаяСтрока);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // РазделитьСтроку()

// Записать в журнал сообщение
//
// Параметры:
//  ТекстОшибки - Строка, описание ошибки
//  Событие - Строка, наименование события
//  Важность - ПеречислениеСсылка.ТЦСтатусСообщения
//  ЭтоОшибка - Булево, признак того, что сообщение содержит описание ошибки
//
&НаСервереБезКонтекста
Процедура ЗаписатьВЖурнал(ТекстОшибки, Событие, Важность, ЭтоОшибка) Экспорт
	
	Имя = ?(Событие = Неопределено, "Ошибка копирования", Событие);
	
	Если Важность = Неопределено Тогда
		Если ЭтоОшибка Тогда
			Уровень = УровеньЖурналаРегистрации.Ошибка;
		Иначе
			Уровень = УровеньЖурналаРегистрации.Информация;
		КонецЕсли;
	Иначе
		Если Важность = Перечисления.ТЦСтатусСообщения.Ошибка Тогда
			Уровень = УровеньЖурналаРегистрации.Ошибка;
		ИначеЕсли Важность = Перечисления.ТЦСтатусСообщения.Предупреждение Тогда
			Уровень = УровеньЖурналаРегистрации.Предупреждение;
		ИначеЕсли Важность = Перечисления.ТЦСтатусСообщения.Информация Тогда
			Уровень = УровеньЖурналаРегистрации.Информация;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(Имя, Уровень,, "Тест-центр", ТекстОшибки);
	
КонецПроцедуры // ЗаписатьВЖурнал()

// Функция проверяет, встроена ли в конфигурацию запрошенная подсистема БСП
//
// Параметры:
//  ИмяПодсистемы - Строка, имя проверяемой подсистемы
//
// Взвращаемое значение:
//  Истина - Подсистема используется
//  Ложь - Подсистема не используется
//
&НаСервереБезКонтекста
Функция БСППодсистемаИспользуется(ИмяПодсистемы) Экспорт
	
	Результат = Истина;
	
	РодительскаяПодсистема = Метаданные.Подсистемы.Найти("СтандартныеПодсистемы");
	Если РодительскаяПодсистема = Неопределено Тогда
		Результат = Ложь;
	Иначе
		Если РодительскаяПодсистема.Подсистемы.Найти(ИмяПодсистемы) = Неопределено Тогда
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция проверяет, встроена ли в конфигурацию запрошенная подсистема БСП
//
// Параметры:
//  ИмяПодсистемы - Строка, имя проверяемой подсистемы
//
// Взвращаемое значение:
//  Истина - Подсистема используется
//  Ложь - Подсистема не используется
//
&НаСервереБезКонтекста
Функция ПодсистемаИспользуется(ИмяПодсистемы) Экспорт
	
	Результат = Истина;
	
	Подсистема = Метаданные.Подсистемы.Найти(ИмяПодсистемы);
	Если Подсистема = Неопределено Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура устанавливает значение разделителей для текущего сеанса
//
// Параметры:
//   ОбластьДанных - Число - Номер области данных
&НаСервереБезКонтекста
Процедура ВойтиВОбластьДанныхНаСервере(Знач ОбластьДанных)
	
	УстановитьПривилегированныйРежим(Истина);
	Выполнить("ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, ОбластьДанных);");
	
КонецПроцедуры

// Процедура сбрасывает признак использования разделителей для текущего сеанса
//
&НаСервере
Процедура ВыйтиИзОбластиДанныхНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	Выполнить("ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);");
	
КонецПроцедуры

#КонецОбласти
